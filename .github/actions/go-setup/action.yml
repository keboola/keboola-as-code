name: 'Setup Go, tools and caching'
description: 'Setup Go, tools and caching'
inputs:
  go-version:
    description: Go version
    required: true
  cache-s3-bucket:
    description: S3 bucket for various caches.
    required: true
  build-type:
    description: Build type, for example "default", "linter", ...
    required: true
runs:
  using: "composite"
  steps:
    - name: Assume AWS S3 caching role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::831559560923:role/S3-gh-actions-caching
        role-session-name: ghactionscaching
        aws-region: us-east-1

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}
        cache: false

    # There is no md5sum command on macOS by default
    - name: Export name of the MD5 sum command for E2E tests
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "MD5_COMMAND=md5" >> $GITHUB_ENV
        else
          echo "MD5_COMMAND=md5sum" >> $GITHUB_ENV
        fi

    - name: Don't create ".out" directories in tests, so tests caching works
      shell: bash
      run: |
        echo "TEST_CREATE_OUT_DIR=false" >> $GITHUB_ENV

    # GOPATH     - Should be empty in our setup, see GOMODCACHE and GOBIN.
    # GOCACHE    - Build and test cache.
    # GOMODCACHE - The directory where the go command will store downloaded modules and related files.
    # GOBIN      - Compiled binaries from "go install ...", we need a directory outside GOPATH to cache only installed tools.
    - name: Set and export Go envs
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          # C: is slow: https://github.com/actions/runner-images/issues/8755
          GODIRS=D:/tmp/go
        elif [ "$RUNNER_OS" == "macOS" ]; then
          GODIRS=/Users/runner/.cache/go
        else
          GODIRS=/home/runner/.cache/go
        fi
        
        mkdir -p $GODIRS/path
        mkdir -p $GODIRS/cache
        mkdir -p $GODIRS/modcache
        mkdir -p $GODIRS/lintcache
        mkdir -p $GODIRS/bin
        
        go env -w \
        GOPATH=$GODIRS/path \
        GOCACHE=$GODIRS/cache \
        GOMODCACHE=$GODIRS/modcache \
        GOBIN=$GODIRS/bin \
        
        echo "GODIRS=$GODIRS" >> $GITHUB_ENV
        echo "GOLANGCI_LINT_CACHE=$GODIRS/lintcache" >> $GITHUB_ENV 
        echo "$GODIRS/bin" >> $GITHUB_PATH

    # Prevent linker warnings on macOs
    # https://github.com/golang/go/issues/61229#issuecomment-1952798326
    # https://github.com/golang/go/issues/61229#issuecomment-1988965927
    - name: Set GOFLAGS on MacOS
      if: runner.os == 'macOS'
      shell: bash
      run: echo "GOFLAGS=-ldflags=-extldflags=-Wl,-ld_classic" >> $GITHUB_ENV

    # Load compiled tools from cache to skip installation
    - name: Load Go tools cache
      id: go-cache-tools
      uses: runs-on/cache@v4 # replacement for actions/cache@v4
      with:
        path: |
          ${{ env.GODIRS }}/bin
        key: ${{ runner.os }}-go-${{ inputs.go-version }}-v49-tools-${{ hashFiles('scripts/tools.sh') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ inputs.go-version }}-v49-tools-
      env:
        RUNS_ON_S3_BUCKET_CACHE: ${{ inputs.cache-s3-bucket }}

    # Install missing tools
    - name: Install tools
      shell: bash
      run: |
        echo "Installing tools ..."
        ./scripts/tools.sh
        
        echo "Installed tools:"
        ls -alh "$GODIRS/bin"
        
        go clean -cache -modcache

    # Load dependencies - Go modules to skip download
    - name: Load Go modules cache
      id: go-cache-mod
      uses: runs-on/cache@v4 # replacement for actions/cache@v4
      with:
        path: |
          ${{ env.GODIRS }}/modcache
        key: ${{ runner.os }}-go-${{ inputs.go-version }}-v49-mod-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ inputs.go-version }}-v49-mod-
      env:
        RUNS_ON_S3_BUCKET_CACHE: ${{ inputs.cache-s3-bucket }}

    - name: Load Go build and test cache
      id: go-cache-build
      uses: runs-on/cache@v4 # replacement for actions/cache@v4
      with:
        path: |
          ${{ env.GODIRS }}/cache
          ${{ github.workspace }}/**/.out
        key: ${{ runner.os }}-go-${{ inputs.go-version }}-v49-build-${{ inputs.build-type }}-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ inputs.go-version }}-v49-build-${{ inputs.build-type }}-
      env:
        RUNS_ON_S3_BUCKET_CACHE: ${{ inputs.cache-s3-bucket }}

    - name: Load Linter cache
      id: go-cache-linter
      if: inputs.build-type == 'lint'
      uses: runs-on/cache@v4 # replacement for actions/cache@v4
      with:
        path: |
          ${{ env.GODIRS }}/lintcache
        key: ${{ runner.os }}-go-${{ inputs.go-version }}-v49-linter-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ inputs.go-version }}-v49-linter-
      env:
        RUNS_ON_S3_BUCKET_CACHE: ${{ inputs.cache-s3-bucket }}

    - name: Download Go modules
      shell: bash
      run: |
        echo "Downloading modules ..."
        go mod tidy
        
        echo "Modules size:"
        du -hd0 "$GODIRS/modcache"

    - name: Reset modtime of files to 1 unix timestamp, to make Go test caching work
      shell: bash
      run: |
        echo "Resetting modtime ..."
        
        excluded='-path "**/.out*" -or -name "projects.json"'
        echo "Excluded: $excluded"
        
        echo "Dirs:"
        for dir in "$(go env GOROOT)" "$(go env GOMODCACHE)" "$GITHUB_WORKSPACE"
        do
          echo "$dir"
          # !!! -L = follow symlinks
          find -L "$dir" -not \( $excluded \) -print0 | xargs -0 touch -d '1970-01-01T00:00:01'
        done
        
        echo "Done"
        echo

    # Enable the step to debug Go testing cache misses.
    # To find problematic dir/file: Run the workflow twice, download tests logs, sort lines and make a diff.
    # https://pkg.go.dev/cmd/go#hdr-Build_and_test_caching
    - name: Enable debugging of the Go test cache
      if: false # disabled, enable for debugging
      shell: bash
      run: echo "GODEBUG=gocachehash=1" >> $GITHUB_ENV
