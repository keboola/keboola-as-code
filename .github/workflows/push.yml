name: GitHub Actions
on: [ push ]
env:
  GO_VERSION: 1.17

  # DockerHub login
  DOCKERHUB_USER: "keboolabot"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test projects in KBC for integration tests
  # Project name: KBC Internal / [ ci ] Keboola-as-code 1 .. 18
  TEST_KBC_PROJECTS_LINUX: |
    connection.keboola.com|8763|${{ secrets.TEST_KBC_PROJECT_8763_TOKEN }};
    connection.keboola.com|8764|${{ secrets.TEST_KBC_PROJECT_8764_TOKEN }};
    connection.keboola.com|8765|${{ secrets.TEST_KBC_PROJECT_8765_TOKEN }};
    connection.keboola.com|8766|${{ secrets.TEST_KBC_PROJECT_8766_TOKEN }};
    connection.keboola.com|8768|${{ secrets.TEST_KBC_PROJECT_8768_TOKEN }};
    connection.keboola.com|8769|${{ secrets.TEST_KBC_PROJECT_8769_TOKEN }};
  TEST_KBC_PROJECTS_MACOS: |
    connection.keboola.com|8770|${{ secrets.TEST_KBC_PROJECT_8770_TOKEN }};
    connection.keboola.com|8771|${{ secrets.TEST_KBC_PROJECT_8771_TOKEN }};
    connection.keboola.com|8772|${{ secrets.TEST_KBC_PROJECT_8772_TOKEN }};
    connection.keboola.com|8773|${{ secrets.TEST_KBC_PROJECT_8773_TOKEN }};
    connection.keboola.com|8776|${{ secrets.TEST_KBC_PROJECT_8776_TOKEN }};
    connection.keboola.com|8775|${{ secrets.TEST_KBC_PROJECT_8775_TOKEN }};
  TEST_KBC_PROJECTS_WINDOWS: |
    connection.keboola.com|8777|${{ secrets.TEST_KBC_PROJECT_8777_TOKEN }};
    connection.keboola.com|8778|${{ secrets.TEST_KBC_PROJECT_8778_TOKEN }};
    connection.keboola.com|8779|${{ secrets.TEST_KBC_PROJECT_8779_TOKEN }};
    connection.keboola.com|8780|${{ secrets.TEST_KBC_PROJECT_8780_TOKEN }};
    connection.keboola.com|8781|${{ secrets.TEST_KBC_PROJECT_8781_TOKEN }};
    connection.keboola.com|8782|${{ secrets.TEST_KBC_PROJECT_8782_TOKEN }};

  # S3 repository
  IAM_USER: keboola-as-code-dist-s3-upload
  AWS_BUCKET_NAME: keboola-as-code-dist
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # GPG keys for DEB, RPM and APK Linux packages
  DEB_KEY_PRIVATE: ${{ secrets.DEB_KEY_PRIVATE }}
  DEB_KEY_PUBLIC: ${{ secrets.DEB_KEY_PUBLIC }}
  RPM_KEY_PRIVATE: ${{ secrets.RPM_KEY_PRIVATE }}
  RPM_KEY_PUBLIC: ${{ secrets.RPM_KEY_PUBLIC }}
  APK_KEY_PRIVATE: ${{ secrets.APK_KEY_PRIVATE }}
  APK_KEY_PUBLIC: ${{ secrets.APK_KEY_PUBLIC }}

  # Mac Os notarization
  APPLE_BUNDLE_ID: "com.keboola.kbc"
  APPLE_APP_IDENTITY: "Developer ID Application: Tomas Netrval"

jobs:
  set_version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_version.outputs.tag }}
      is_semantic_tag: ${{ steps.set_version.outputs.is_semantic_tag }}
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Set version
        id: set_version
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          if [[ "${GITHUB_REF}" == refs/tags/* ]];
          then
            export VERSION=${GITHUB_REF/refs\/tags\//}
            export VERSION=${VERSION#v}
          else
            export VERSION="dev"
          fi
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG', target version = '$VERSION'"
          echo "::set-output name=tag::$TAG"
          echo "::set-output name=is_semantic_tag::$IS_SEMANTIC_TAG"
          echo "::set-output name=version::$VERSION"

  test:
    if: ${{ false }}  #TODO disabled
    needs:
      - set_version
    concurrency:
      group: tests-${{ matrix.name }}
      cancel-in-progress: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux
            os: ubuntu-latest
            projects: TEST_KBC_PROJECTS_LINUX
          - name: mac-os
            os: macos-latest
            projects: TEST_KBC_PROJECTS_MACOS
          - name: windows
            os: windows-latest
            projects: TEST_KBC_PROJECTS_WINDOWS
    runs-on: ${{ matrix.os }}
    name: test ${{ matrix.name }}
    steps:
      - name: Setup line endings
        run: git config --global core.autocrlf false
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install tools
        run: . ./scripts/tools.sh
        shell: bash
      - name: Load Go cache
        uses: ./.github/actions/go-cache
        with:
          key: test
      - name: Run tests
        run: |
          make mod
          make tests
        shell: bash
        env:
          VERSION: ${{ needs.set_version.outputs.version }}
          TEST_KBC_PROJECTS: ${{ env[matrix.projects] }}
          TEST_PARALLELISM: 16

  lint:
    if: ${{ false }}  #TODO disabled
    needs:
      - set_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install tools
        run: . ./scripts/tools.sh
        shell: bash
      - name: Load Go cache
        uses: ./.github/actions/go-cache
        with:
          key: lint
      - name: Run code linters
        run: |
          make mod
          make lint
        shell: bash
        env:
          VERSION: ${{ needs.set_version.outputs.version }}
          TEST_KBC_PROJECTS: ${{ env[matrix.projects] }}

  cross-compile:
    needs:
      - set_version
    runs-on: macos-latest # same as release, shared cache
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install tools
        run: . ./scripts/tools.sh
        shell: bash
      - name: Load Go cache
        uses: ./.github/actions/go-cache
        with:
          key: compile
      - name: Cross-compile
        run: |
          make mod
          make build
        shell: bash
        env:
          VERSION: ${{ needs.set_version.outputs.version }}

  release:
    needs:
      - set_version
      #TODO - test
      #TODO - lint
      - cross-compile
    # only one parallel job allowed - used shared S3
    concurrency:
      group: release
      cancel-in-progress: false
    runs-on: macos-latest
    #TODO if: startsWith(github.ref, 'refs/tags/') && needs.set_version.outputs.is_semantic_tag == 'true'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install tools
        run: . ./scripts/tools.sh
        shell: bash
      - name: Load Go cache
        uses: ./.github/actions/go-cache
        with:
          key: compile
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      - name: Write private keys
        run: |
          mkdir -p /tmp/keys
          echo "$DEB_KEY_PRIVATE" > /tmp/keys/deb.key
          chmod 0600 /tmp/keys/deb.key
          echo "$RPM_KEY_PRIVATE" > /tmp/keys/rpm.key
          chmod 0600 /tmp/keys/rpm.key
          echo "$APK_KEY_PRIVATE" > /tmp/keys/apk.key
          chmod 0600 /tmp/keys/apk.key
      - name: Install Gon
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon
      - name: Release
        run: make release
        env:
          VERSION: ${{ needs.set_version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEB_KEY_PRIVATE_PATH: /tmp/keys/deb.key
          RPM_KEY_PRIVATE_PATH: /tmp/keys/rpm.key
          APK_KEY_PRIVATE_PATH: /tmp/keys/apk.key
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
      - name: Upload artifact to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/gh-release/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download exe
        id: download_exe
        shell: bash
        run: |
          hub release download "${GITHUB_REF#refs/tags/}" -i '*windows_amd64*.zip'
          printf "::set-output name=zip::%s\n" *.zip
          unzip -o *.zip && rm -v *.zip
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Prepare PATH
        id: setupmsbuild
        uses: microsoft/setup-msbuild@v1.0.3
      - name: Build MSI
        id: buildmsi
        shell: bash
        env:
          ZIP_FILE: ${{ steps.download_exe.outputs.zip }}
          MSBUILD_PATH: ${{ steps.setupmsbuild.outputs.msbuildPath }}
        run: |
          name="$(basename "$ZIP_FILE" ".zip")"
          version="$(echo -e ${GITHUB_REF#refs/tags/v} | sed s/-.*$//)"
          "${MSBUILD_PATH}\MSBuild.exe" ./build/windows/gh.wixproj -p:SourceDir="$PWD" -p:OutputPath="$PWD" -p:OutputName="$name" -p:ProductVersion="$version"
#      - name: Create Homebrew formulae
#        env:
#          TAG: ${{ needs.set_version.outputs.tag }}
#          VERSION: ${{ needs.set_version.outputs.version }}
#        run: |
#          mkdir target/homebrew
#          export DARWIN_ARM_TARGET_SHA256=$(openssl dgst -sha256  target/gh-release/*darwin_arm64.zip | cut -f 2 -d ' ' )
#          export DARWIN_AMD_TARGET_SHA256=$(openssl dgst -sha256  target/gh-release/*darwin_amd64.zip | cut -f 2 -d ' ' )
#          export LINUX_ARM_TARGET_SHA256=$(openssl dgst -sha256   target/gh-release/*linux_armv6.zip  | cut -f 2 -d ' ' )
#          export LINUX_ARM64_TARGET_SHA256=$(openssl dgst -sha256 target/gh-release/*linux_arm64.zip  | cut -f 2 -d ' ' )
#          export LINUX_AMD_TARGET_SHA256=$(openssl dgst -sha256   target/gh-release/*linux_amd64.zip  | cut -f 2 -d ' ' )
#          envsubst < build/package/homebrew/homebrew.template.rb > target/homebrew/keboola-cli.rb
#          cat target/homebrew/keboola-cli.rb
#      - name: Upload Homebrew formulae
#        uses: actions/upload-artifact@v2
#        with:
#          name: homebrew-formulae
#          path: target/homebrew/keboola-cli.rb
#          retention-days: 1


  update-pkg-index:
    needs:
      - set_version
      - release
    # only one parallel job allowed - used shared S3
    concurrency:
      group: release
      cancel-in-progress: false
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.set_version.outputs.is_semantic_tag == 'true'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Download Homebrew formulae
        uses: actions/download-artifact@v2
        with:
          name: homebrew-formulae
          path: target/homebrew
      - name: Push Homebrew formulae
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.HOMEBREW_RELEASE_GITHUB_PERSONAL_ACCESS_TOKEN }}
        with:
          source-directory: "target/homebrew"
          destination-github-username: "keboola"
          destination-repository-name: "homebrew-keboola-cli"
          target-branch: main
      - name: Build DEB repo tools
        uses: ./.github/actions/build-repo-tools
        with:
          type: deb
      - name: Build RPM repo tools
        uses: ./.github/actions/build-repo-tools
        with:
          type: rpm
      - name: Build APK repo tools
        uses: ./.github/actions/build-repo-tools
        with:
          type: apk
      - name: Mount S3 bucket
        uses: ./.github/actions/mount-s3
      - name: Index Linux packages
        run: ./build/package/linux/index.sh /s3bucket

  test-install-linux:
    needs:
      - set_version
      - release
      - update-pkg-index
    runs-on: ubuntu-latest
    steps:
      - name: Install on Ubuntu
        if: always()
        run: |
          docker run --rm ubuntu bash -c '
          set -e
          apt-get update -y && apt-get install -y wget ca-certificates gnupg
          wget -P /etc/apt/trusted.gpg.d https://cli-dist.keboola.com/deb/keboola.gpg
          echo "deb https://cli-dist.keboola.com/deb /" | tee /etc/apt/sources.list.d/keboola.list
          apt-get update
          apt-get install -y keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
          '
        env:
          VERSION: ${{ needs.set_version.outputs.version }}
      - name: Install on Debian
        if: always()
        run: |
          docker run --rm debian bash -c '
          set -e
          apt-get update -y && apt-get install -y wget ca-certificates gnupg
          wget -P /etc/apt/trusted.gpg.d https://cli-dist.keboola.com/deb/keboola.gpg
          echo "deb https://cli-dist.keboola.com/deb /" | tee /etc/apt/sources.list.d/keboola.list
          apt-get update
          apt-get install -y keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
          '
        env:
          VERSION: ${{ needs.set_version.outputs.version }}
      - name: Install on Fedora
        if: always()
        run: |
          docker run --rm fedora bash -c '
          set -e
          rpm --import https://cli-dist.keboola.com/rpm/keboola.gpg
          echo "[keboola]
          name=keboola
          baseurl=https://cli-dist.keboola.com/rpm
          enabled=1
          gpgcheck=1
          gpgkey=https://cli-dist.keboola.com/rpm/keboola.gpg
          " | tee /etc/yum.repos.d/keboola.repo
          dnf install -y keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
          '
        env:
          VERSION: ${{ needs.set_version.outputs.version }}
      - name: Install on Alpine
        if: always()
        run: |
          docker run --rm  alpine sh -c '
          set -e
          echo "https://cli-dist.keboola.com/apk" | tee -a /etc/apk/repositories
          wget -P /etc/apk/keys/ https://cli-dist.keboola.com/apk/keboola.rsa.pub
          apk update
          apk add keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
          '
        env:
          VERSION: ${{ needs.set_version.outputs.version }}
      - name: Install on Linux by Homebrew
        if: always()
        run: |
          docker run --rm homebrew/brew sh -c '
          set -e
          brew install keboola/keboola-cli/keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
          '
        env:
          VERSION: ${{ needs.set_version.outputs.version }}

  test-install-mac-os:
    needs:
      - set_version
      - release
      - update-pkg-index
    runs-on: macos-latest
    steps:
      - name: Install on MacOS by Homebrew
        run: |
          brew install keboola/keboola-cli/keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
        env:
          VERSION: ${{ needs.set_version.outputs.version }}
