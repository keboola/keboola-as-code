name: GitHub Actions
on: [ push ]
env:
  GO_VERSION: 1.19

  # DockerHub login
  DOCKERHUB_USER: "keboolabot"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test projects in KBC for integration tests
  # Project name: KBC Internal / [ ci ] Keboola-as-code 1 .. 18
  TEST_KBC_PROJECTS_LINUX: |
    connection.keboola.com|8763|${{ secrets.TEST_KBC_PROJECT_8763_TOKEN }};
    connection.keboola.com|8764|${{ secrets.TEST_KBC_PROJECT_8764_TOKEN }};
    connection.keboola.com|8765|${{ secrets.TEST_KBC_PROJECT_8765_TOKEN }};
    connection.keboola.com|8766|${{ secrets.TEST_KBC_PROJECT_8766_TOKEN }};
    connection.keboola.com|8768|${{ secrets.TEST_KBC_PROJECT_8768_TOKEN }};
    connection.keboola.com|8769|${{ secrets.TEST_KBC_PROJECT_8769_TOKEN }};
  TEST_KBC_PROJECTS_MACOS: |
    connection.keboola.com|8770|${{ secrets.TEST_KBC_PROJECT_8770_TOKEN }};
    connection.keboola.com|8771|${{ secrets.TEST_KBC_PROJECT_8771_TOKEN }};
    connection.keboola.com|8772|${{ secrets.TEST_KBC_PROJECT_8772_TOKEN }};
    connection.keboola.com|8773|${{ secrets.TEST_KBC_PROJECT_8773_TOKEN }};
    connection.keboola.com|8776|${{ secrets.TEST_KBC_PROJECT_8776_TOKEN }};
    connection.keboola.com|8775|${{ secrets.TEST_KBC_PROJECT_8775_TOKEN }};
  TEST_KBC_PROJECTS_WINDOWS: |
    connection.keboola.com|8777|${{ secrets.TEST_KBC_PROJECT_8777_TOKEN }};
    connection.keboola.com|8778|${{ secrets.TEST_KBC_PROJECT_8778_TOKEN }};
    connection.keboola.com|8779|${{ secrets.TEST_KBC_PROJECT_8779_TOKEN }};
    connection.keboola.com|8780|${{ secrets.TEST_KBC_PROJECT_8780_TOKEN }};
    connection.keboola.com|8781|${{ secrets.TEST_KBC_PROJECT_8781_TOKEN }};
    connection.keboola.com|8782|${{ secrets.TEST_KBC_PROJECT_8782_TOKEN }};

  # S3 repository
  IAM_USER: keboola-as-code-dist-s3-upload
  AWS_BUCKET_NAME: keboola-as-code-dist
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # GPG keys for DEB, RPM and APK Linux packages
  DEB_KEY_PRIVATE: ${{ secrets.DEB_KEY_PRIVATE }}
  DEB_KEY_PUBLIC: ${{ secrets.DEB_KEY_PUBLIC }}
  RPM_KEY_PRIVATE: ${{ secrets.RPM_KEY_PRIVATE }}
  RPM_KEY_PUBLIC: ${{ secrets.RPM_KEY_PUBLIC }}
  APK_KEY_PRIVATE: ${{ secrets.APK_KEY_PRIVATE }}
  APK_KEY_PUBLIC: ${{ secrets.APK_KEY_PUBLIC }}

  # WinGet packages
  WINGET_PACKAGES_REPO_FORK: "JakubMatejka/winget-pkgs"

  # macOS notarization
  APPLE_ACCOUNT_USERNAME: "apple@keboola.com"
  APPLE_BUNDLE_ID: "com.keboola.kbc"
  APPLE_TEAM_ID: "46P6KJ65M2"
  APPLE_TEAM_NAME: "Keboola Industries SE"

  DIST_BASE_URL: "https://keboola-as-code-dist.s3.amazonaws.com"

  SERVICE_IMAGE_NAME: "keboola/templates-api"
  SERVICE_ECR_REPOSITORY: "keboola/templates-api"
  SERVICE_ECR_PUSH_ROLE: "arn:aws:iam::968984773589:role/kbc-ecr-TemplatesApiPushRole-1HHHR3LGXWRZN"
  SERVICE_ECR_REGION: "us-east-1"
  SERVICE_ACR_REPOSITORY: "templates-api"
  SERVICE_ACR_REGISTRY: "keboola.azurecr.io"
  SERVICE_ACR_USERNAME: "templates-api-push"

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-version.outputs.tag }}
      is_semantic_tag: ${{ steps.set-version.outputs.is_semantic_tag }}
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Set version
        id: set-version
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          if [[ "${GITHUB_REF}" == refs/tags/* ]];
          then
            export VERSION=${GITHUB_REF/refs\/tags\//}
            export VERSION=${VERSION#v}
          else
            export VERSION="dev"
          fi
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG', target version = '$VERSION'"
          echo "::set-output name=tag::$TAG"
          echo "::set-output name=is_semantic_tag::$IS_SEMANTIC_TAG"
          echo "::set-output name=version::$VERSION"

  test:
    needs:
      - set-version
    concurrency:
      group: tests-${{ matrix.name }}
      cancel-in-progress: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux
            os: ubuntu-latest
            projects: TEST_KBC_PROJECTS_LINUX
          - name: mac-os
            os: macos-latest
            projects: TEST_KBC_PROJECTS_MACOS
          - name: windows
            os: windows-latest
            projects: TEST_KBC_PROJECTS_WINDOWS
    runs-on: ${{ matrix.os }}
    name: test ${{ matrix.name }}
    steps:
      - name: Setup line endings
        run: git config --global core.autocrlf false
      - name: Start etcd service (only on linux)
        if: matrix.name == 'linux'
        run: docker run -d --rm -e ALLOW_NONE_AUTHENTICATION=no -e ETCD_ROOT_PASSWORD=toor -p 2379:2379 docker.io/bitnami/etcd:3.5.4-debian-11-r27
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Load Go cache
        uses: ./.github/actions/go-cache
        with:
          key: test
      - name: Install tools
        run: . ./scripts/tools.sh
        shell: bash
      - name: Run tests
        run: |
          make mod
          make tests
        shell: bash
        env:
          VERSION: ${{ needs.set-version.outputs.version }}
          TEST_KBC_PROJECTS: ${{ env[matrix.projects] }}
          TEST_PARALLELISM: 16
          DATADOG_ENABLED: false
          ETCD_ENABLED: ${{ matrix.name == 'linux' && 'true' || 'false' }}
          ETCD_ENDPOINT: localhost:2379
          ETCD_USERNAME: root
          ETCD_PASSWORD: toor

  lint:
    needs:
      - set-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Load Go cache
        uses: ./.github/actions/go-cache
        with:
          key: lint
      - name: Install tools
        run: . ./scripts/tools.sh
        shell: bash
      - name: Run code linters
        run: |
          make mod
# TODO temporarily disabled due to https://keboola.atlassian.net/browse/KAC-167
#          make lint
        shell: bash
        env:
          VERSION: ${{ needs.set-version.outputs.version }}
          TEST_KBC_PROJECTS: ${{ env[matrix.projects] }}

  cross-compile:
    needs:
      - set-version
    runs-on: macos-latest # same as release, shared cache
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Load Go cache
        uses: ./.github/actions/go-cache
        with:
          key: compile
      - name: Install tools
        run: . ./scripts/tools.sh
        shell: bash
      - name: Cross-compile
        run: |
          make mod
          make build
        shell: bash
        env:
          VERSION: ${{ needs.set-version.outputs.version }}

  release:
    needs:
      - set-version
      - test
      - lint
      - cross-compile
    # only one parallel job allowed - used shared S3
    concurrency:
      group: release
      cancel-in-progress: false
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.set-version.outputs.is_semantic_tag == 'true'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Load Go cache
        uses: ./.github/actions/go-cache
        with:
          key: compile
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install tools
        run: . ./scripts/tools.sh
        shell: bash
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      - name: Write private keys
        run: |
          mkdir -p /tmp/keys
          echo "$DEB_KEY_PRIVATE" > /tmp/keys/deb.key
          chmod 0600 /tmp/keys/deb.key
          echo "$RPM_KEY_PRIVATE" > /tmp/keys/rpm.key
          chmod 0600 /tmp/keys/rpm.key
          echo "$APK_KEY_PRIVATE" > /tmp/keys/apk.key
          chmod 0600 /tmp/keys/apk.key
      - name: Install Gon
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon
      - name: Release
        run: make release
        env:
          VERSION: ${{ needs.set-version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEB_KEY_PRIVATE_PATH: /tmp/keys/deb.key
          RPM_KEY_PRIVATE_PATH: /tmp/keys/rpm.key
          APK_KEY_PRIVATE_PATH: /tmp/keys/apk.key
          APPLE_ACCOUNT_PASSWORD: ${{ secrets.APPLE_ACCOUNT_PASSWORD }}
      - name: Upload artifact to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/gh-release/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Create Homebrew formulae
        env:
          TAG: ${{ needs.set-version.outputs.tag }}
          VERSION: ${{ needs.set-version.outputs.version }}
        run: |
          mkdir target/homebrew
          export DARWIN_ARM_TARGET_SHA256=$(openssl dgst -sha256  target/gh-release/*darwin_arm64.zip | cut -f 2 -d ' ' )
          export DARWIN_AMD_TARGET_SHA256=$(openssl dgst -sha256  target/gh-release/*darwin_amd64.zip | cut -f 2 -d ' ' )
          export LINUX_ARM_TARGET_SHA256=$(openssl dgst -sha256   target/gh-release/*linux_armv6.zip  | cut -f 2 -d ' ' )
          export LINUX_ARM64_TARGET_SHA256=$(openssl dgst -sha256 target/gh-release/*linux_arm64.zip  | cut -f 2 -d ' ' )
          export LINUX_AMD_TARGET_SHA256=$(openssl dgst -sha256   target/gh-release/*linux_amd64.zip  | cut -f 2 -d ' ' )
          envsubst < build/package/homebrew/homebrew.template.rb > target/homebrew/keboola-cli.rb
          cat target/homebrew/keboola-cli.rb
      - name: Upload Homebrew formulae
        uses: actions/upload-artifact@v2
        with:
          name: homebrew-formulae
          path: target/homebrew/keboola-cli.rb
          retention-days: 1
      - name: Upload Scoop manifest
        uses: actions/upload-artifact@v2
        with:
          name: scoop-manifest
          path: target/keboola-cli.json
          retention-days: 1

  release-msi-windows:
    needs:
      - set-version
      - release
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.set-version.outputs.is_semantic_tag == 'true'
    outputs:
      msi_checksum: ${{ steps.upload_msi.outputs.msi_checksum }}
      msi_file: ${{ steps.build_msi.outputs.msi_file }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Download zipped exe
        id: download_zip
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.set-version.outputs.tag }}
        run: |
          hub release download "${TAG}" -i '*windows_amd64*.zip'
          printf "::set-output name=zip::%s\n" *.zip
          unzip -o *.zip && rm -v *.zip
      - name: Prepare PATH
        id: setup_msbuild
        uses: microsoft/setup-msbuild@v1.0.3
      - name: Obtain signing cert
        id: obtain_cert
        shell: bash
        env:
          CERT_CONTENTS: ${{ secrets.WINDOWS_CERT_PFX }}
        run: |
          base64 -d <<<"$CERT_CONTENTS" > ./cert.pfx
          printf "::set-output name=cert_file::%s\n" ".\\cert.pfx"
      - name: Sign EXE
        env:
          CERT_FILE: ${{ steps.obtain_cert.outputs.cert_file }}
          CERT_PASS: ${{ secrets.WINDOWS_CERT_PASS }}
        run: |
          .\build\package\windows\signtool sign /d "Keboola CLI" /f $env:CERT_FILE /p $env:CERT_PASS /fd sha256 /tr http://timestamp.digicert.com /v kbc.exe
      - name: Build MSI
        id: build_msi
        shell: bash
        env:
          MSBUILD_PATH: ${{ steps.setup_msbuild.outputs.msbuildPath }}
          VERSION: ${{ needs.set-version.outputs.version }}
          ZIP_FILE: ${{ steps.download_zip.outputs.zip }}
        run: |
          mkdir msi
          filename="$(basename "$ZIP_FILE" ".zip")"
          "${MSBUILD_PATH}\MSBuild.exe" ./build/package/windows/msi.wixproj -p:SourceDir="$PWD" -p:OutputPath="./msi" -p:OutputName="$filename" -p:ProductVersion="${VERSION}"
          echo "::set-output name=msi_file::${filename}.msi"
      - name: Sign MSI
        env:
          CERT_FILE: ${{ steps.obtain_cert.outputs.cert_file }}
          CERT_PASS: ${{ secrets.WINDOWS_CERT_PASS }}
          MSI_FILE: ${{ steps.build_msi.outputs.msi_file }}
        run: |
          $msi=".\build\package\windows\msi\$env:MSI_FILE"
          .\build\package\windows\signtool sign /d "Keboola CLI" /f $env:CERT_FILE /p $env:CERT_PASS /fd sha256 /tr http://timestamp.digicert.com /v $msi
      - name: Upload and checksum MSI
        id: upload_msi
        env:
          MSI_FILE: ${{ steps.build_msi.outputs.msi_file }}
        shell: bash
        run: |
          aws s3 cp "./build/package/windows/msi/${MSI_FILE}" s3://${AWS_BUCKET_NAME}/msi/
          
          choco install checksum
          checksum=$(checksum -t=sha256 -f="./build/package/windows/msi/${MSI_FILE}")
          echo $checksum
          echo "::set-output name=msi_checksum::${checksum}"

  update-repositories:
    needs:
      - set-version
      - release
    # only one parallel job allowed - used shared S3
    concurrency:
      group: release
      cancel-in-progress: false
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.set-version.outputs.is_semantic_tag == 'true'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Download Homebrew formulae
        uses: actions/download-artifact@v2
        with:
          name: homebrew-formulae
          path: target/homebrew
      - name: Push Homebrew formulae
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.HOMEBREW_RELEASE_GITHUB_PERSONAL_ACCESS_TOKEN }}
        with:
          source-directory: "target/homebrew"
          destination-github-username: "keboola"
          destination-repository-name: "homebrew-keboola-cli"
          target-branch: main
      - name: Build DEB repo tools
        uses: ./.github/actions/build-repo-tools
        with:
          type: deb
      - name: Build RPM repo tools
        uses: ./.github/actions/build-repo-tools
        with:
          type: rpm
      - name: Build APK repo tools
        uses: ./.github/actions/build-repo-tools
        with:
          type: apk
      - name: Mount S3 bucket
        uses: ./.github/actions/mount-s3
      - name: Index Linux packages
        run: ./build/package/linux/index.sh /s3bucket
      - name: Download Scoop manifest
        uses: actions/download-artifact@v2
        with:
          name: scoop-manifest
          path: target/scoop
      - name: Push Scoop manifest
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.SCOOP_RELEASE_GITHUB_PERSONAL_ACCESS_TOKEN }}
        with:
          source-directory: "target/scoop"
          destination-github-username: "keboola"
          destination-repository-name: "scoop-keboola-cli"
          target-branch: main

  update-repositories-windows:
    needs:
      - set-version
      - release
      - release-msi-windows
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.set-version.outputs.is_semantic_tag == 'true'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Push Chocolatey
        env:
          CHOCOLATEY_KEY: ${{ secrets.CHOCOLATEY_KEY }}
          MSI_CHECKSUM: ${{ needs.release-msi-windows.outputs.msi_checksum }}
          MSI_FILE: ${{ needs.release-msi-windows.outputs.msi_file }}
          VERSION: ${{ needs.set-version.outputs.version }}
        run: |
          New-Item -ItemType "directory" -Path ".\build\package\chocolatey\push"
          New-Item -ItemType "directory" -Path ".\build\package\chocolatey\push\tools"
          cd .\build\package\chocolatey\push
          $url="$env:DIST_BASE_URL/msi/$env:MSI_FILE"
          ((Get-Content -path ..\keboola-cli.nuspec -Raw) -replace '{VERSION}',$env:VERSION) | Set-Content -Path .\keboola-cli.nuspec
          ((Get-Content -path ..\chocolateyinstall.ps1 -Raw) -replace '{URL}',$url -replace '{CHECKSUM}',$env:MSI_CHECKSUM) | Set-Content -Path .\tools\chocolateyinstall.ps1
          choco apikey -k $env:CHOCOLATEY_KEY -s https://push.chocolatey.org/
          choco pack keboola-cli.nuspec
          choco push keboola-cli.$env:VERSION.nupkg -s https://push.chocolatey.org
      - name: Update Winget Repository fork
        uses: TobKed/github-forks-sync-action@master
        with:
          github_token: ${{ secrets.WINGET_RELEASE_GITHUB_PERSONAL_ACCESS_TOKEN }}
          upstream_repository: microsoft/winget-pkgs
          target_repository: ${{ env.WINGET_PACKAGES_REPO_FORK }}
          upstream_branch: master
          target_branch: master
          force: true
      - name: Submit package to Winget Repository (create PR)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.WINGET_RELEASE_GITHUB_PERSONAL_ACCESS_TOKEN }}
          MSI_FILE: ${{ needs.release-msi-windows.outputs.msi_file }}
          VERSION: ${{ needs.set-version.outputs.version }}
        run: |
          curl -kLSs https://aka.ms/wingetcreate/latest -o wingetcreate.exe
          msiUrl="${DIST_BASE_URL}/msi/${MSI_FILE}"
          ./wingetcreate.exe update -v $VERSION -u $msiUrl -t $GITHUB_TOKEN Keboola.KeboolaCLI -s

  test-install-linux:
    needs:
      - set-version
      - release
      - update-repositories
    runs-on: ubuntu-latest
    steps:
      - name: Install on Ubuntu
        if: always()
        run: |
          docker run --rm ubuntu bash -c '
          set -e
          set -o pipefail
          apt-get update -y && apt-get install -y wget ca-certificates gnupg
          wget -P /etc/apt/trusted.gpg.d https://cli-dist.keboola.com/deb/keboola.gpg
          echo "deb https://cli-dist.keboola.com/deb /" | tee /etc/apt/sources.list.d/keboola.list
          apt-get update
          apt-get install -y keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
          '
        env:
          VERSION: ${{ needs.set-version.outputs.version }}
      - name: Install on Debian
        if: always()
        run: |
          docker run --rm debian bash -c '
          set -e
          set -o pipefail
          apt-get update -y && apt-get install -y wget ca-certificates gnupg
          wget -P /etc/apt/trusted.gpg.d https://cli-dist.keboola.com/deb/keboola.gpg
          echo "deb https://cli-dist.keboola.com/deb /" | tee /etc/apt/sources.list.d/keboola.list
          apt-get update
          apt-get install -y keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
          '
        env:
          VERSION: ${{ needs.set-version.outputs.version }}
      - name: Install on Fedora
        if: always()
        run: |
          docker run --rm fedora bash -c '
          set -e
          set -o pipefail
          rpm --import https://cli-dist.keboola.com/rpm/keboola.gpg
          echo "[keboola]
          name=keboola
          baseurl=https://cli-dist.keboola.com/rpm
          enabled=1
          gpgcheck=1
          gpgkey=https://cli-dist.keboola.com/rpm/keboola.gpg
          " | tee /etc/yum.repos.d/keboola.repo
          dnf install -y keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
          '
        env:
          VERSION: ${{ needs.set-version.outputs.version }}
      - name: Install on Alpine
        if: always()
        run: |
          docker run --rm  alpine sh -c '
          set -e
          set -o pipefail
          echo "https://cli-dist.keboola.com/apk" | tee -a /etc/apk/repositories
          wget -P /etc/apk/keys/ https://cli-dist.keboola.com/apk/keboola.rsa.pub
          apk update
          apk add keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
          '
        env:
          VERSION: ${{ needs.set-version.outputs.version }}
      - name: Install on Linux by Homebrew
        if: always()
        run: |
          docker run --rm homebrew/brew sh -c '
          set -e
          brew install keboola/keboola-cli/keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
          '
        env:
          VERSION: ${{ needs.set-version.outputs.version }}

  test-install-mac-os:
    needs:
      - set-version
      - release
      - update-repositories
    runs-on: macos-latest
    steps:
      - name: Remove old git package
        run: brew list --full-name | grep '^git@' | xargs -r brew uninstall --ignore-dependencies
      - name: Install on MacOS by Homebrew
        run: |
          brew install keboola/keboola-cli/keboola-cli
          kbc --version | tee /dev/stderr | grep -q "Version:    ${{ env.VERSION }}"
        env:
          VERSION: ${{ needs.set-version.outputs.version }}

  test-install-windows:
    needs:
      - set-version
      - release-msi-windows
      - update-repositories
    runs-on: windows-latest
    steps:
      - name: Download MSI
        shell: bash
        env:
          MSI_FILE: ${{ needs.release-msi-windows.outputs.msi_file }}
        run: |
          curl "${DIST_BASE_URL}/msi/${MSI_FILE}" --output install.msi
      - name: Install on Windows from MSI
        shell: bash
        run: |
          msiexec /i install.msi /quiet /qn /l*vx install_log.txt
          [ ! -d "C:\Program Files\Keboola CLI" ] && exit 1
      - name: Install on Windows using Scoop
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop bucket add keboola https://github.com/keboola/scoop-keboola-cli.git
          scoop install keboola/keboola-cli
          kbc --version
          If (-Not (kbc --version | Select-String -Quiet "Version:    $($env:VERSION)")) { throw "kbc command not installed properly" }
        env:
          VERSION: ${{ needs.set-version.outputs.version }}

  build-and-push-templates-api:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    needs:
      - set-version
      - test
      - lint
      - cross-compile
    if: startsWith(github.ref, 'refs/tags/templates-api-v')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build image
        uses: docker/build-push-action@v2
        env:
          TAG: ${{ needs.set-version.outputs.tag }}
        with:
          load: true
          tags: ${{ env.SERVICE_IMAGE_NAME }}:${{ env.TAG }}
          file: Dockerfile-api
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.SERVICE_ECR_PUSH_ROLE }}
          aws-region: ${{ env.SERVICE_ECR_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Scan image
        uses: Azure/container-scan@v0
        with:
          image-name: ${{ env.SERVICE_IMAGE_NAME }}:${{ env.TAG }}
          severity-threshold: CRITICAL
          run-quality-checks: true
      - name: Push image to Amazon ECR
        env:
          SERVICE_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ needs.set-version.outputs.tag }}
        run: |
          docker tag $SERVICE_IMAGE_NAME:$TAG $SERVICE_ECR_REGISTRY/$SERVICE_ECR_REPOSITORY:$TAG
          docker push $SERVICE_ECR_REGISTRY/$SERVICE_ECR_REPOSITORY:$TAG
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.SERVICE_ACR_REGISTRY }}
          username: ${{ env.SERVICE_ACR_USERNAME }}
          password: ${{ secrets.SERVICE_ACR_PASSWORD }}
      - name: Push image to ACR
        env:
          TAG: ${{ needs.set-version.outputs.tag }}
        run: |
          docker tag $SERVICE_IMAGE_NAME:$TAG $SERVICE_ACR_REGISTRY/$SERVICE_ACR_REPOSITORY:$TAG
          docker push $SERVICE_ACR_REGISTRY/$SERVICE_ACR_REPOSITORY:$TAG
