// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/keboola/go-client/pkg/keboola"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/branch"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/configuration"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/key"
)

// BranchCreate is the builder for creating a Branch entity.
type BranchCreate struct {
	config
	mutation *BranchMutation
	hooks    []Hook
}

// SetBranchID sets the "branchID" field.
func (bc *BranchCreate) SetBranchID(ki keboola.BranchID) *BranchCreate {
	bc.mutation.SetBranchID(ki)
	return bc
}

// SetName sets the "name" field.
func (bc *BranchCreate) SetName(s string) *BranchCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetDescription sets the "description" field.
func (bc *BranchCreate) SetDescription(s string) *BranchCreate {
	bc.mutation.SetDescription(s)
	return bc
}

// SetIsDefault sets the "isDefault" field.
func (bc *BranchCreate) SetIsDefault(b bool) *BranchCreate {
	bc.mutation.SetIsDefault(b)
	return bc
}

// SetID sets the "id" field.
func (bc *BranchCreate) SetID(kk key.BranchKey) *BranchCreate {
	bc.mutation.SetID(kk)
	return bc
}

// AddConfigurationIDs adds the "configurations" edge to the Configuration entity by IDs.
func (bc *BranchCreate) AddConfigurationIDs(ids ...key.ConfigurationKey) *BranchCreate {
	bc.mutation.AddConfigurationIDs(ids...)
	return bc
}

// AddConfigurations adds the "configurations" edges to the Configuration entity.
func (bc *BranchCreate) AddConfigurations(c ...*Configuration) *BranchCreate {
	ids := make([]key.ConfigurationKey, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bc.AddConfigurationIDs(ids...)
}

// Mutation returns the BranchMutation object of the builder.
func (bc *BranchCreate) Mutation() *BranchMutation {
	return bc.mutation
}

// Save creates the Branch in the database.
func (bc *BranchCreate) Save(ctx context.Context) (*Branch, error) {
	return withHooks[*Branch, BranchMutation](ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BranchCreate) SaveX(ctx context.Context) *Branch {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BranchCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BranchCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BranchCreate) check() error {
	if _, ok := bc.mutation.BranchID(); !ok {
		return &ValidationError{Name: "branchID", err: errors.New(`model: missing required field "Branch.branchID"`)}
	}
	if v, ok := bc.mutation.BranchID(); ok {
		if err := branch.BranchIDValidator(int(v)); err != nil {
			return &ValidationError{Name: "branchID", err: fmt.Errorf(`model: validator failed for field "Branch.branchID": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "Branch.name"`)}
	}
	if v, ok := bc.mutation.Name(); ok {
		if err := branch.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "Branch.name": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`model: missing required field "Branch.description"`)}
	}
	if _, ok := bc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "isDefault", err: errors.New(`model: missing required field "Branch.isDefault"`)}
	}
	if v, ok := bc.mutation.ID(); ok {
		if err := branch.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`model: validator failed for field "Branch.id": %w`, err)}
		}
	}
	return nil
}

func (bc *BranchCreate) sqlSave(ctx context.Context) (*Branch, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*key.BranchKey); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BranchCreate) createSpec() (*Branch, *sqlgraph.CreateSpec) {
	var (
		_node = &Branch{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(branch.Table, sqlgraph.NewFieldSpec(branch.FieldID, field.TypeString))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.BranchID(); ok {
		_spec.SetField(branch.FieldBranchID, field.TypeInt, value)
		_node.BranchID = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(branch.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.Description(); ok {
		_spec.SetField(branch.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bc.mutation.IsDefault(); ok {
		_spec.SetField(branch.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if nodes := bc.mutation.ConfigurationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   branch.ConfigurationsTable,
			Columns: []string{branch.ConfigurationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configuration.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BranchCreateBulk is the builder for creating many Branch entities in bulk.
type BranchCreateBulk struct {
	config
	builders []*BranchCreate
}

// Save creates the Branch entities in the database.
func (bcb *BranchCreateBulk) Save(ctx context.Context) ([]*Branch, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Branch, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BranchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BranchCreateBulk) SaveX(ctx context.Context) []*Branch {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BranchCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BranchCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
