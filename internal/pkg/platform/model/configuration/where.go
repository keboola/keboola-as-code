// Code generated by ent, DO NOT EDIT.

package configuration

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/keboola/go-client/pkg/keboola"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/key"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/predicate"
)

// ID filters vertices based on their ID field.
func ID(id key.ConfigurationKey) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id key.ConfigurationKey) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id key.ConfigurationKey) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...key.ConfigurationKey) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...key.ConfigurationKey) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id key.ConfigurationKey) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id key.ConfigurationKey) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id key.ConfigurationKey) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id key.ConfigurationKey) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldID, id))
}

// BranchID applies equality check predicate on the "branchID" field. It's identical to BranchIDEQ.
func BranchID(v keboola.BranchID) predicate.Configuration {
	vc := int(v)
	return predicate.Configuration(sql.FieldEQ(FieldBranchID, vc))
}

// ComponentID applies equality check predicate on the "componentID" field. It's identical to ComponentIDEQ.
func ComponentID(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldEQ(FieldComponentID, vc))
}

// ConfigID applies equality check predicate on the "configID" field. It's identical to ConfigIDEQ.
func ConfigID(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldEQ(FieldConfigID, vc))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldDescription, v))
}

// IsDisabled applies equality check predicate on the "isDisabled" field. It's identical to IsDisabledEQ.
func IsDisabled(v bool) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldIsDisabled, v))
}

// BranchIDEQ applies the EQ predicate on the "branchID" field.
func BranchIDEQ(v keboola.BranchID) predicate.Configuration {
	vc := int(v)
	return predicate.Configuration(sql.FieldEQ(FieldBranchID, vc))
}

// BranchIDNEQ applies the NEQ predicate on the "branchID" field.
func BranchIDNEQ(v keboola.BranchID) predicate.Configuration {
	vc := int(v)
	return predicate.Configuration(sql.FieldNEQ(FieldBranchID, vc))
}

// BranchIDIn applies the In predicate on the "branchID" field.
func BranchIDIn(vs ...keboola.BranchID) predicate.Configuration {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Configuration(sql.FieldIn(FieldBranchID, v...))
}

// BranchIDNotIn applies the NotIn predicate on the "branchID" field.
func BranchIDNotIn(vs ...keboola.BranchID) predicate.Configuration {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Configuration(sql.FieldNotIn(FieldBranchID, v...))
}

// BranchIDGT applies the GT predicate on the "branchID" field.
func BranchIDGT(v keboola.BranchID) predicate.Configuration {
	vc := int(v)
	return predicate.Configuration(sql.FieldGT(FieldBranchID, vc))
}

// BranchIDGTE applies the GTE predicate on the "branchID" field.
func BranchIDGTE(v keboola.BranchID) predicate.Configuration {
	vc := int(v)
	return predicate.Configuration(sql.FieldGTE(FieldBranchID, vc))
}

// BranchIDLT applies the LT predicate on the "branchID" field.
func BranchIDLT(v keboola.BranchID) predicate.Configuration {
	vc := int(v)
	return predicate.Configuration(sql.FieldLT(FieldBranchID, vc))
}

// BranchIDLTE applies the LTE predicate on the "branchID" field.
func BranchIDLTE(v keboola.BranchID) predicate.Configuration {
	vc := int(v)
	return predicate.Configuration(sql.FieldLTE(FieldBranchID, vc))
}

// ComponentIDEQ applies the EQ predicate on the "componentID" field.
func ComponentIDEQ(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldEQ(FieldComponentID, vc))
}

// ComponentIDNEQ applies the NEQ predicate on the "componentID" field.
func ComponentIDNEQ(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldNEQ(FieldComponentID, vc))
}

// ComponentIDIn applies the In predicate on the "componentID" field.
func ComponentIDIn(vs ...keboola.ComponentID) predicate.Configuration {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Configuration(sql.FieldIn(FieldComponentID, v...))
}

// ComponentIDNotIn applies the NotIn predicate on the "componentID" field.
func ComponentIDNotIn(vs ...keboola.ComponentID) predicate.Configuration {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Configuration(sql.FieldNotIn(FieldComponentID, v...))
}

// ComponentIDGT applies the GT predicate on the "componentID" field.
func ComponentIDGT(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldGT(FieldComponentID, vc))
}

// ComponentIDGTE applies the GTE predicate on the "componentID" field.
func ComponentIDGTE(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldGTE(FieldComponentID, vc))
}

// ComponentIDLT applies the LT predicate on the "componentID" field.
func ComponentIDLT(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldLT(FieldComponentID, vc))
}

// ComponentIDLTE applies the LTE predicate on the "componentID" field.
func ComponentIDLTE(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldLTE(FieldComponentID, vc))
}

// ComponentIDContains applies the Contains predicate on the "componentID" field.
func ComponentIDContains(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldContains(FieldComponentID, vc))
}

// ComponentIDHasPrefix applies the HasPrefix predicate on the "componentID" field.
func ComponentIDHasPrefix(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldHasPrefix(FieldComponentID, vc))
}

// ComponentIDHasSuffix applies the HasSuffix predicate on the "componentID" field.
func ComponentIDHasSuffix(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldHasSuffix(FieldComponentID, vc))
}

// ComponentIDEqualFold applies the EqualFold predicate on the "componentID" field.
func ComponentIDEqualFold(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldEqualFold(FieldComponentID, vc))
}

// ComponentIDContainsFold applies the ContainsFold predicate on the "componentID" field.
func ComponentIDContainsFold(v keboola.ComponentID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldContainsFold(FieldComponentID, vc))
}

// ConfigIDEQ applies the EQ predicate on the "configID" field.
func ConfigIDEQ(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldEQ(FieldConfigID, vc))
}

// ConfigIDNEQ applies the NEQ predicate on the "configID" field.
func ConfigIDNEQ(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldNEQ(FieldConfigID, vc))
}

// ConfigIDIn applies the In predicate on the "configID" field.
func ConfigIDIn(vs ...keboola.ConfigID) predicate.Configuration {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Configuration(sql.FieldIn(FieldConfigID, v...))
}

// ConfigIDNotIn applies the NotIn predicate on the "configID" field.
func ConfigIDNotIn(vs ...keboola.ConfigID) predicate.Configuration {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Configuration(sql.FieldNotIn(FieldConfigID, v...))
}

// ConfigIDGT applies the GT predicate on the "configID" field.
func ConfigIDGT(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldGT(FieldConfigID, vc))
}

// ConfigIDGTE applies the GTE predicate on the "configID" field.
func ConfigIDGTE(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldGTE(FieldConfigID, vc))
}

// ConfigIDLT applies the LT predicate on the "configID" field.
func ConfigIDLT(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldLT(FieldConfigID, vc))
}

// ConfigIDLTE applies the LTE predicate on the "configID" field.
func ConfigIDLTE(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldLTE(FieldConfigID, vc))
}

// ConfigIDContains applies the Contains predicate on the "configID" field.
func ConfigIDContains(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldContains(FieldConfigID, vc))
}

// ConfigIDHasPrefix applies the HasPrefix predicate on the "configID" field.
func ConfigIDHasPrefix(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldHasPrefix(FieldConfigID, vc))
}

// ConfigIDHasSuffix applies the HasSuffix predicate on the "configID" field.
func ConfigIDHasSuffix(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldHasSuffix(FieldConfigID, vc))
}

// ConfigIDEqualFold applies the EqualFold predicate on the "configID" field.
func ConfigIDEqualFold(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldEqualFold(FieldConfigID, vc))
}

// ConfigIDContainsFold applies the ContainsFold predicate on the "configID" field.
func ConfigIDContainsFold(v keboola.ConfigID) predicate.Configuration {
	vc := string(v)
	return predicate.Configuration(sql.FieldContainsFold(FieldConfigID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldContainsFold(FieldDescription, v))
}

// IsDisabledEQ applies the EQ predicate on the "isDisabled" field.
func IsDisabledEQ(v bool) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldIsDisabled, v))
}

// IsDisabledNEQ applies the NEQ predicate on the "isDisabled" field.
func IsDisabledNEQ(v bool) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldIsDisabled, v))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Branch) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		p(s.Not())
	})
}
