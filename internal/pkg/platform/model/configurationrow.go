// Code generated by ent, DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/keboola/go-client/pkg/keboola"
	"github.com/keboola/go-utils/pkg/orderedmap"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/configuration"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/configurationrow"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/key"
)

// ConfigurationRow is the model entity for the ConfigurationRow schema.
type ConfigurationRow struct {
	config `json:"-"`
	// ID of the ent.
	ID key.ConfigurationRowKey `json:"id,omitempty"`
	// BranchID holds the value of the "branchID" field.
	BranchID keboola.BranchID `json:"branchID,omitempty"`
	// ComponentID holds the value of the "componentID" field.
	ComponentID keboola.ComponentID `json:"componentID,omitempty"`
	// ConfigID holds the value of the "configID" field.
	ConfigID keboola.ConfigID `json:"configID,omitempty"`
	// RowID holds the value of the "rowID" field.
	RowID keboola.RowID `json:"rowID,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// If IsDisabled=true, then when the entire configuration is run, the row will be skipped.
	IsDisabled bool `json:"isDisabled,omitempty"`
	// Content holds the value of the "content" field.
	Content *orderedmap.OrderedMap `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConfigurationRowQuery when eager-loading is set.
	Edges                    ConfigurationRowEdges `json:"edges"`
	configuration_row_parent *key.ConfigurationKey
	selectValues             sql.SelectValues
}

// ConfigurationRowEdges holds the relations/edges for other nodes in the graph.
type ConfigurationRowEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Configuration `json:"parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConfigurationRowEdges) ParentOrErr() (*Configuration, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: configuration.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConfigurationRow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case configurationrow.FieldContent:
			values[i] = new([]byte)
		case configurationrow.FieldID:
			values[i] = new(key.ConfigurationRowKey)
		case configurationrow.FieldIsDisabled:
			values[i] = new(sql.NullBool)
		case configurationrow.FieldBranchID:
			values[i] = new(sql.NullInt64)
		case configurationrow.FieldComponentID, configurationrow.FieldConfigID, configurationrow.FieldRowID, configurationrow.FieldName, configurationrow.FieldDescription:
			values[i] = new(sql.NullString)
		case configurationrow.ForeignKeys[0]: // configuration_row_parent
			values[i] = &sql.NullScanner{S: new(key.ConfigurationKey)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConfigurationRow fields.
func (cr *ConfigurationRow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case configurationrow.FieldID:
			if value, ok := values[i].(*key.ConfigurationRowKey); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cr.ID = *value
			}
		case configurationrow.FieldBranchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field branchID", values[i])
			} else if value.Valid {
				cr.BranchID = keboola.BranchID(value.Int64)
			}
		case configurationrow.FieldComponentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field componentID", values[i])
			} else if value.Valid {
				cr.ComponentID = keboola.ComponentID(value.String)
			}
		case configurationrow.FieldConfigID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field configID", values[i])
			} else if value.Valid {
				cr.ConfigID = keboola.ConfigID(value.String)
			}
		case configurationrow.FieldRowID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rowID", values[i])
			} else if value.Valid {
				cr.RowID = keboola.RowID(value.String)
			}
		case configurationrow.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cr.Name = value.String
			}
		case configurationrow.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cr.Description = value.String
			}
		case configurationrow.FieldIsDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isDisabled", values[i])
			} else if value.Valid {
				cr.IsDisabled = value.Bool
			}
		case configurationrow.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cr.Content); err != nil {
					return fmt.Errorf("unmarshal field content: %w", err)
				}
			}
		case configurationrow.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field configuration_row_parent", values[i])
			} else if value.Valid {
				cr.configuration_row_parent = new(key.ConfigurationKey)
				*cr.configuration_row_parent = *value.S.(*key.ConfigurationKey)
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConfigurationRow.
// This includes values selected through modifiers, order, etc.
func (cr *ConfigurationRow) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the ConfigurationRow entity.
func (cr *ConfigurationRow) QueryParent() *ConfigurationQuery {
	return NewConfigurationRowClient(cr.config).QueryParent(cr)
}

// Update returns a builder for updating this ConfigurationRow.
// Note that you need to call ConfigurationRow.Unwrap() before calling this method if this ConfigurationRow
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *ConfigurationRow) Update() *ConfigurationRowUpdateOne {
	return NewConfigurationRowClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the ConfigurationRow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *ConfigurationRow) Unwrap() *ConfigurationRow {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("model: ConfigurationRow is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *ConfigurationRow) String() string {
	var builder strings.Builder
	builder.WriteString("ConfigurationRow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("branchID=")
	builder.WriteString(fmt.Sprintf("%v", cr.BranchID))
	builder.WriteString(", ")
	builder.WriteString("componentID=")
	builder.WriteString(fmt.Sprintf("%v", cr.ComponentID))
	builder.WriteString(", ")
	builder.WriteString("configID=")
	builder.WriteString(fmt.Sprintf("%v", cr.ConfigID))
	builder.WriteString(", ")
	builder.WriteString("rowID=")
	builder.WriteString(fmt.Sprintf("%v", cr.RowID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(cr.Description)
	builder.WriteString(", ")
	builder.WriteString("isDisabled=")
	builder.WriteString(fmt.Sprintf("%v", cr.IsDisabled))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", cr.Content))
	builder.WriteByte(')')
	return builder.String()
}

// ConfigurationRows is a parsable slice of ConfigurationRow.
type ConfigurationRows []*ConfigurationRow
