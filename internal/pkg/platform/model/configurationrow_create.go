// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/keboola/go-client/pkg/keboola"
	"github.com/keboola/go-utils/pkg/orderedmap"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/configuration"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/configurationrow"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/key"
)

// ConfigurationRowCreate is the builder for creating a ConfigurationRow entity.
type ConfigurationRowCreate struct {
	config
	mutation *ConfigurationRowMutation
	hooks    []Hook
}

// SetBranchID sets the "branchID" field.
func (crc *ConfigurationRowCreate) SetBranchID(ki keboola.BranchID) *ConfigurationRowCreate {
	crc.mutation.SetBranchID(ki)
	return crc
}

// SetComponentID sets the "componentID" field.
func (crc *ConfigurationRowCreate) SetComponentID(ki keboola.ComponentID) *ConfigurationRowCreate {
	crc.mutation.SetComponentID(ki)
	return crc
}

// SetConfigID sets the "configID" field.
func (crc *ConfigurationRowCreate) SetConfigID(ki keboola.ConfigID) *ConfigurationRowCreate {
	crc.mutation.SetConfigID(ki)
	return crc
}

// SetRowID sets the "rowID" field.
func (crc *ConfigurationRowCreate) SetRowID(ki keboola.RowID) *ConfigurationRowCreate {
	crc.mutation.SetRowID(ki)
	return crc
}

// SetName sets the "name" field.
func (crc *ConfigurationRowCreate) SetName(s string) *ConfigurationRowCreate {
	crc.mutation.SetName(s)
	return crc
}

// SetDescription sets the "description" field.
func (crc *ConfigurationRowCreate) SetDescription(s string) *ConfigurationRowCreate {
	crc.mutation.SetDescription(s)
	return crc
}

// SetIsDisabled sets the "isDisabled" field.
func (crc *ConfigurationRowCreate) SetIsDisabled(b bool) *ConfigurationRowCreate {
	crc.mutation.SetIsDisabled(b)
	return crc
}

// SetNillableIsDisabled sets the "isDisabled" field if the given value is not nil.
func (crc *ConfigurationRowCreate) SetNillableIsDisabled(b *bool) *ConfigurationRowCreate {
	if b != nil {
		crc.SetIsDisabled(*b)
	}
	return crc
}

// SetContent sets the "content" field.
func (crc *ConfigurationRowCreate) SetContent(om *orderedmap.OrderedMap) *ConfigurationRowCreate {
	crc.mutation.SetContent(om)
	return crc
}

// SetID sets the "id" field.
func (crc *ConfigurationRowCreate) SetID(krk key.ConfigurationRowKey) *ConfigurationRowCreate {
	crc.mutation.SetID(krk)
	return crc
}

// SetParentID sets the "parent" edge to the Configuration entity by ID.
func (crc *ConfigurationRowCreate) SetParentID(id key.ConfigurationKey) *ConfigurationRowCreate {
	crc.mutation.SetParentID(id)
	return crc
}

// SetParent sets the "parent" edge to the Configuration entity.
func (crc *ConfigurationRowCreate) SetParent(c *Configuration) *ConfigurationRowCreate {
	return crc.SetParentID(c.ID)
}

// Mutation returns the ConfigurationRowMutation object of the builder.
func (crc *ConfigurationRowCreate) Mutation() *ConfigurationRowMutation {
	return crc.mutation
}

// Save creates the ConfigurationRow in the database.
func (crc *ConfigurationRowCreate) Save(ctx context.Context) (*ConfigurationRow, error) {
	crc.defaults()
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *ConfigurationRowCreate) SaveX(ctx context.Context) *ConfigurationRow {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *ConfigurationRowCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *ConfigurationRowCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crc *ConfigurationRowCreate) defaults() {
	if _, ok := crc.mutation.IsDisabled(); !ok {
		v := configurationrow.DefaultIsDisabled
		crc.mutation.SetIsDisabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *ConfigurationRowCreate) check() error {
	if _, ok := crc.mutation.BranchID(); !ok {
		return &ValidationError{Name: "branchID", err: errors.New(`model: missing required field "ConfigurationRow.branchID"`)}
	}
	if v, ok := crc.mutation.BranchID(); ok {
		if err := configurationrow.BranchIDValidator(int(v)); err != nil {
			return &ValidationError{Name: "branchID", err: fmt.Errorf(`model: validator failed for field "ConfigurationRow.branchID": %w`, err)}
		}
	}
	if _, ok := crc.mutation.ComponentID(); !ok {
		return &ValidationError{Name: "componentID", err: errors.New(`model: missing required field "ConfigurationRow.componentID"`)}
	}
	if v, ok := crc.mutation.ComponentID(); ok {
		if err := configurationrow.ComponentIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "componentID", err: fmt.Errorf(`model: validator failed for field "ConfigurationRow.componentID": %w`, err)}
		}
	}
	if _, ok := crc.mutation.ConfigID(); !ok {
		return &ValidationError{Name: "configID", err: errors.New(`model: missing required field "ConfigurationRow.configID"`)}
	}
	if v, ok := crc.mutation.ConfigID(); ok {
		if err := configurationrow.ConfigIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "configID", err: fmt.Errorf(`model: validator failed for field "ConfigurationRow.configID": %w`, err)}
		}
	}
	if _, ok := crc.mutation.RowID(); !ok {
		return &ValidationError{Name: "rowID", err: errors.New(`model: missing required field "ConfigurationRow.rowID"`)}
	}
	if v, ok := crc.mutation.RowID(); ok {
		if err := configurationrow.RowIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "rowID", err: fmt.Errorf(`model: validator failed for field "ConfigurationRow.rowID": %w`, err)}
		}
	}
	if _, ok := crc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "ConfigurationRow.name"`)}
	}
	if v, ok := crc.mutation.Name(); ok {
		if err := configurationrow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "ConfigurationRow.name": %w`, err)}
		}
	}
	if _, ok := crc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`model: missing required field "ConfigurationRow.description"`)}
	}
	if _, ok := crc.mutation.IsDisabled(); !ok {
		return &ValidationError{Name: "isDisabled", err: errors.New(`model: missing required field "ConfigurationRow.isDisabled"`)}
	}
	if _, ok := crc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`model: missing required field "ConfigurationRow.content"`)}
	}
	if v, ok := crc.mutation.ID(); ok {
		if err := configurationrow.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`model: validator failed for field "ConfigurationRow.id": %w`, err)}
		}
	}
	if len(crc.mutation.ParentIDs()) == 0 {
		return &ValidationError{Name: "parent", err: errors.New(`model: missing required edge "ConfigurationRow.parent"`)}
	}
	return nil
}

func (crc *ConfigurationRowCreate) sqlSave(ctx context.Context) (*ConfigurationRow, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*key.ConfigurationRowKey); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *ConfigurationRowCreate) createSpec() (*ConfigurationRow, *sqlgraph.CreateSpec) {
	var (
		_node = &ConfigurationRow{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(configurationrow.Table, sqlgraph.NewFieldSpec(configurationrow.FieldID, field.TypeString))
	)
	if id, ok := crc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := crc.mutation.BranchID(); ok {
		_spec.SetField(configurationrow.FieldBranchID, field.TypeInt, value)
		_node.BranchID = value
	}
	if value, ok := crc.mutation.ComponentID(); ok {
		_spec.SetField(configurationrow.FieldComponentID, field.TypeString, value)
		_node.ComponentID = value
	}
	if value, ok := crc.mutation.ConfigID(); ok {
		_spec.SetField(configurationrow.FieldConfigID, field.TypeString, value)
		_node.ConfigID = value
	}
	if value, ok := crc.mutation.RowID(); ok {
		_spec.SetField(configurationrow.FieldRowID, field.TypeString, value)
		_node.RowID = value
	}
	if value, ok := crc.mutation.Name(); ok {
		_spec.SetField(configurationrow.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := crc.mutation.Description(); ok {
		_spec.SetField(configurationrow.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := crc.mutation.IsDisabled(); ok {
		_spec.SetField(configurationrow.FieldIsDisabled, field.TypeBool, value)
		_node.IsDisabled = value
	}
	if value, ok := crc.mutation.Content(); ok {
		_spec.SetField(configurationrow.FieldContent, field.TypeJSON, value)
		_node.Content = value
	}
	if nodes := crc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   configurationrow.ParentTable,
			Columns: []string{configurationrow.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configuration.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.configuration_row_parent = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConfigurationRowCreateBulk is the builder for creating many ConfigurationRow entities in bulk.
type ConfigurationRowCreateBulk struct {
	config
	err      error
	builders []*ConfigurationRowCreate
}

// Save creates the ConfigurationRow entities in the database.
func (crcb *ConfigurationRowCreateBulk) Save(ctx context.Context) ([]*ConfigurationRow, error) {
	if crcb.err != nil {
		return nil, crcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*ConfigurationRow, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigurationRowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *ConfigurationRowCreateBulk) SaveX(ctx context.Context) []*ConfigurationRow {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *ConfigurationRowCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *ConfigurationRowCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}
