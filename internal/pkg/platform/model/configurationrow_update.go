// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/keboola/go-utils/pkg/orderedmap"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/configurationrow"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/predicate"
)

// ConfigurationRowUpdate is the builder for updating ConfigurationRow entities.
type ConfigurationRowUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigurationRowMutation
}

// Where appends a list predicates to the ConfigurationRowUpdate builder.
func (cru *ConfigurationRowUpdate) Where(ps ...predicate.ConfigurationRow) *ConfigurationRowUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetName sets the "name" field.
func (cru *ConfigurationRowUpdate) SetName(s string) *ConfigurationRowUpdate {
	cru.mutation.SetName(s)
	return cru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cru *ConfigurationRowUpdate) SetNillableName(s *string) *ConfigurationRowUpdate {
	if s != nil {
		cru.SetName(*s)
	}
	return cru
}

// SetDescription sets the "description" field.
func (cru *ConfigurationRowUpdate) SetDescription(s string) *ConfigurationRowUpdate {
	cru.mutation.SetDescription(s)
	return cru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cru *ConfigurationRowUpdate) SetNillableDescription(s *string) *ConfigurationRowUpdate {
	if s != nil {
		cru.SetDescription(*s)
	}
	return cru
}

// SetIsDisabled sets the "isDisabled" field.
func (cru *ConfigurationRowUpdate) SetIsDisabled(b bool) *ConfigurationRowUpdate {
	cru.mutation.SetIsDisabled(b)
	return cru
}

// SetNillableIsDisabled sets the "isDisabled" field if the given value is not nil.
func (cru *ConfigurationRowUpdate) SetNillableIsDisabled(b *bool) *ConfigurationRowUpdate {
	if b != nil {
		cru.SetIsDisabled(*b)
	}
	return cru
}

// SetContent sets the "content" field.
func (cru *ConfigurationRowUpdate) SetContent(om *orderedmap.OrderedMap) *ConfigurationRowUpdate {
	cru.mutation.SetContent(om)
	return cru
}

// Mutation returns the ConfigurationRowMutation object of the builder.
func (cru *ConfigurationRowUpdate) Mutation() *ConfigurationRowMutation {
	return cru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *ConfigurationRowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *ConfigurationRowUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *ConfigurationRowUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *ConfigurationRowUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *ConfigurationRowUpdate) check() error {
	if v, ok := cru.mutation.Name(); ok {
		if err := configurationrow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "ConfigurationRow.name": %w`, err)}
		}
	}
	if cru.mutation.ParentCleared() && len(cru.mutation.ParentIDs()) > 0 {
		return errors.New(`model: clearing a required unique edge "ConfigurationRow.parent"`)
	}
	return nil
}

func (cru *ConfigurationRowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(configurationrow.Table, configurationrow.Columns, sqlgraph.NewFieldSpec(configurationrow.FieldID, field.TypeString))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Name(); ok {
		_spec.SetField(configurationrow.FieldName, field.TypeString, value)
	}
	if value, ok := cru.mutation.Description(); ok {
		_spec.SetField(configurationrow.FieldDescription, field.TypeString, value)
	}
	if value, ok := cru.mutation.IsDisabled(); ok {
		_spec.SetField(configurationrow.FieldIsDisabled, field.TypeBool, value)
	}
	if value, ok := cru.mutation.Content(); ok {
		_spec.SetField(configurationrow.FieldContent, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configurationrow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// ConfigurationRowUpdateOne is the builder for updating a single ConfigurationRow entity.
type ConfigurationRowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfigurationRowMutation
}

// SetName sets the "name" field.
func (cruo *ConfigurationRowUpdateOne) SetName(s string) *ConfigurationRowUpdateOne {
	cruo.mutation.SetName(s)
	return cruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cruo *ConfigurationRowUpdateOne) SetNillableName(s *string) *ConfigurationRowUpdateOne {
	if s != nil {
		cruo.SetName(*s)
	}
	return cruo
}

// SetDescription sets the "description" field.
func (cruo *ConfigurationRowUpdateOne) SetDescription(s string) *ConfigurationRowUpdateOne {
	cruo.mutation.SetDescription(s)
	return cruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cruo *ConfigurationRowUpdateOne) SetNillableDescription(s *string) *ConfigurationRowUpdateOne {
	if s != nil {
		cruo.SetDescription(*s)
	}
	return cruo
}

// SetIsDisabled sets the "isDisabled" field.
func (cruo *ConfigurationRowUpdateOne) SetIsDisabled(b bool) *ConfigurationRowUpdateOne {
	cruo.mutation.SetIsDisabled(b)
	return cruo
}

// SetNillableIsDisabled sets the "isDisabled" field if the given value is not nil.
func (cruo *ConfigurationRowUpdateOne) SetNillableIsDisabled(b *bool) *ConfigurationRowUpdateOne {
	if b != nil {
		cruo.SetIsDisabled(*b)
	}
	return cruo
}

// SetContent sets the "content" field.
func (cruo *ConfigurationRowUpdateOne) SetContent(om *orderedmap.OrderedMap) *ConfigurationRowUpdateOne {
	cruo.mutation.SetContent(om)
	return cruo
}

// Mutation returns the ConfigurationRowMutation object of the builder.
func (cruo *ConfigurationRowUpdateOne) Mutation() *ConfigurationRowMutation {
	return cruo.mutation
}

// Where appends a list predicates to the ConfigurationRowUpdate builder.
func (cruo *ConfigurationRowUpdateOne) Where(ps ...predicate.ConfigurationRow) *ConfigurationRowUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *ConfigurationRowUpdateOne) Select(field string, fields ...string) *ConfigurationRowUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated ConfigurationRow entity.
func (cruo *ConfigurationRowUpdateOne) Save(ctx context.Context) (*ConfigurationRow, error) {
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *ConfigurationRowUpdateOne) SaveX(ctx context.Context) *ConfigurationRow {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *ConfigurationRowUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *ConfigurationRowUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *ConfigurationRowUpdateOne) check() error {
	if v, ok := cruo.mutation.Name(); ok {
		if err := configurationrow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "ConfigurationRow.name": %w`, err)}
		}
	}
	if cruo.mutation.ParentCleared() && len(cruo.mutation.ParentIDs()) > 0 {
		return errors.New(`model: clearing a required unique edge "ConfigurationRow.parent"`)
	}
	return nil
}

func (cruo *ConfigurationRowUpdateOne) sqlSave(ctx context.Context) (_node *ConfigurationRow, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(configurationrow.Table, configurationrow.Columns, sqlgraph.NewFieldSpec(configurationrow.FieldID, field.TypeString))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "ConfigurationRow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, configurationrow.FieldID)
		for _, f := range fields {
			if !configurationrow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != configurationrow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Name(); ok {
		_spec.SetField(configurationrow.FieldName, field.TypeString, value)
	}
	if value, ok := cruo.mutation.Description(); ok {
		_spec.SetField(configurationrow.FieldDescription, field.TypeString, value)
	}
	if value, ok := cruo.mutation.IsDisabled(); ok {
		_spec.SetField(configurationrow.FieldIsDisabled, field.TypeBool, value)
	}
	if value, ok := cruo.mutation.Content(); ok {
		_spec.SetField(configurationrow.FieldContent, field.TypeJSON, value)
	}
	_node = &ConfigurationRow{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configurationrow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
