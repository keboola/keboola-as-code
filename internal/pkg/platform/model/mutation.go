package

// Code generated by ent, DO NOT EDIT.

model

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/keboola/go-utils/pkg/orderedmap"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/branch"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/configuration"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/configurationrow"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/key"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/model/predicate"
	"github.com/keboola/keboola-sdk-go/v2/pkg/keboola"
	"github.com/sasha-s/go-deadlock"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBranch           = "Branch"
	TypeConfiguration    = "Configuration"
	TypeConfigurationRow = "ConfigurationRow"
)

// BranchMutation represents an operation that mutates the Branch nodes in the graph.
type BranchMutation struct {
	config
	op                    Op
	typ                   string
	id                    *key.BranchKey
	branchID              *keboola.BranchID
	addbranchID           *keboola.BranchID
	name                  *string
	description           *string
	isDefault             *bool
	clearedFields         map[string]struct{}
	configurations        map[key.ConfigurationKey]struct{}
	removedconfigurations map[key.ConfigurationKey]struct{}
	clearedconfigurations bool
	done                  bool
	oldValue              func(context.Context) (*Branch, error)
	predicates            []predicate.Branch
}

var _ ent.Mutation = (*BranchMutation)(nil)

// branchOption allows management of the mutation configuration using functional options.
type branchOption func(*BranchMutation)

// newBranchMutation creates new mutation for the Branch entity.
func newBranchMutation(c config, op Op, opts ...branchOption) *BranchMutation {
	m := &BranchMutation{
		config:        c,
		op:            op,
		typ:           TypeBranch,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBranchID sets the ID field of the mutation.
func withBranchID(id key.BranchKey) branchOption {
	return func(m *BranchMutation) {
		var (
			err   error
			once  deadlock.Once
			value *Branch
		)
		m.oldValue = func(ctx context.Context) (*Branch, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Branch.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBranch sets the old Branch of the mutation.
func withBranch(node *Branch) branchOption {
	return func(m *BranchMutation) {
		m.oldValue = func(context.Context) (*Branch, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BranchMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BranchMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Branch entities.
func (m *BranchMutation) SetID(id key.BranchKey) {
	m.id = &id
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also primary key fields
	m.SetBranchID(id.BranchID)
	// Set parent
	// ------------------------------------
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BranchMutation) ID() (id key.BranchKey, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BranchMutation) IDs(ctx context.Context) ([]key.BranchKey, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []key.BranchKey{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Branch.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBranchID sets the "branchID" field.
func (m *BranchMutation) SetBranchID(ki keboola.BranchID) {
	m.branchID = &ki
	m.addbranchID = nil
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also part of the primary key
	if m.id == nil {
		m.id = &key.BranchKey{}
	}
	m.id.BranchID = ki
	// ------------------------------------
}

// BranchID returns the value of the "branchID" field in the mutation.
func (m *BranchMutation) BranchID() (r keboola.BranchID, exists bool) {
	v := m.branchID
	if v == nil {
		return
	}
	return *v, true
}

// OldBranchID returns the old "branchID" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldBranchID(ctx context.Context) (v keboola.BranchID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBranchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBranchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBranchID: %w", err)
	}
	return oldValue.BranchID, nil
}

// AddBranchID adds ki to the "branchID" field.
func (m *BranchMutation) AddBranchID(ki keboola.BranchID) {
	if m.addbranchID != nil {
		*m.addbranchID += ki
	} else {
		m.addbranchID = &ki
	}
}

// AddedBranchID returns the value that was added to the "branchID" field in this mutation.
func (m *BranchMutation) AddedBranchID() (r keboola.BranchID, exists bool) {
	v := m.addbranchID
	if v == nil {
		return
	}
	return *v, true
}

// ResetBranchID resets all changes to the "branchID" field.
func (m *BranchMutation) ResetBranchID() {
	m.branchID = nil
	m.addbranchID = nil
}

// SetName sets the "name" field.
func (m *BranchMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BranchMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BranchMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *BranchMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *BranchMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *BranchMutation) ResetDescription() {
	m.description = nil
}

// SetIsDefault sets the "isDefault" field.
func (m *BranchMutation) SetIsDefault(b bool) {
	m.isDefault = &b
}

// IsDefault returns the value of the "isDefault" field in the mutation.
func (m *BranchMutation) IsDefault() (r bool, exists bool) {
	v := m.isDefault
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDefault returns the old "isDefault" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldIsDefault(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDefault: %w", err)
	}
	return oldValue.IsDefault, nil
}

// ResetIsDefault resets all changes to the "isDefault" field.
func (m *BranchMutation) ResetIsDefault() {
	m.isDefault = nil
}

// AddConfigurationIDs adds the "configurations" edge to the Configuration entity by ids.
func (m *BranchMutation) AddConfigurationIDs(ids ...key.ConfigurationKey) {
	if m.configurations == nil {
		m.configurations = make(map[key.ConfigurationKey]struct{})
	}
	for i := range ids {
		m.configurations[ids[i]] = struct{}{}
	}
}

// ClearConfigurations clears the "configurations" edge to the Configuration entity.
func (m *BranchMutation) ClearConfigurations() {
	m.clearedconfigurations = true
}

// ConfigurationsCleared reports if the "configurations" edge to the Configuration entity was cleared.
func (m *BranchMutation) ConfigurationsCleared() bool {
	return m.clearedconfigurations
}

// RemoveConfigurationIDs removes the "configurations" edge to the Configuration entity by IDs.
func (m *BranchMutation) RemoveConfigurationIDs(ids ...key.ConfigurationKey) {
	if m.removedconfigurations == nil {
		m.removedconfigurations = make(map[key.ConfigurationKey]struct{})
	}
	for i := range ids {
		delete(m.configurations, ids[i])
		m.removedconfigurations[ids[i]] = struct{}{}
	}
}

// RemovedConfigurations returns the removed IDs of the "configurations" edge to the Configuration entity.
func (m *BranchMutation) RemovedConfigurationsIDs() (ids []key.ConfigurationKey) {
	for id := range m.removedconfigurations {
		ids = append(ids, id)
	}
	return
}

// ConfigurationsIDs returns the "configurations" edge IDs in the mutation.
func (m *BranchMutation) ConfigurationsIDs() (ids []key.ConfigurationKey) {
	for id := range m.configurations {
		ids = append(ids, id)
	}
	return
}

// ResetConfigurations resets all changes to the "configurations" edge.
func (m *BranchMutation) ResetConfigurations() {
	m.configurations = nil
	m.clearedconfigurations = false
	m.removedconfigurations = nil
}

// Where appends a list predicates to the BranchMutation builder.
func (m *BranchMutation) Where(ps ...predicate.Branch) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BranchMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BranchMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Branch, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BranchMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BranchMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Branch).
func (m *BranchMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BranchMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.branchID != nil {
		fields = append(fields, branch.FieldBranchID)
	}
	if m.name != nil {
		fields = append(fields, branch.FieldName)
	}
	if m.description != nil {
		fields = append(fields, branch.FieldDescription)
	}
	if m.isDefault != nil {
		fields = append(fields, branch.FieldIsDefault)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BranchMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case branch.FieldBranchID:
		return m.BranchID()
	case branch.FieldName:
		return m.Name()
	case branch.FieldDescription:
		return m.Description()
	case branch.FieldIsDefault:
		return m.IsDefault()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BranchMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case branch.FieldBranchID:
		return m.OldBranchID(ctx)
	case branch.FieldName:
		return m.OldName(ctx)
	case branch.FieldDescription:
		return m.OldDescription(ctx)
	case branch.FieldIsDefault:
		return m.OldIsDefault(ctx)
	}
	return nil, fmt.Errorf("unknown Branch field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BranchMutation) SetField(name string, value ent.Value) error {
	switch name {
	case branch.FieldBranchID:
		v, ok := value.(keboola.BranchID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBranchID(v)
		return nil
	case branch.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case branch.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case branch.FieldIsDefault:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDefault(v)
		return nil
	}
	return fmt.Errorf("unknown Branch field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BranchMutation) AddedFields() []string {
	var fields []string
	if m.addbranchID != nil {
		fields = append(fields, branch.FieldBranchID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BranchMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case branch.FieldBranchID:
		return m.AddedBranchID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BranchMutation) AddField(name string, value ent.Value) error {
	switch name {
	case branch.FieldBranchID:
		v, ok := value.(keboola.BranchID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBranchID(v)
		return nil
	}
	return fmt.Errorf("unknown Branch numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BranchMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BranchMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BranchMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Branch nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BranchMutation) ResetField(name string) error {
	switch name {
	case branch.FieldBranchID:
		m.ResetBranchID()
		return nil
	case branch.FieldName:
		m.ResetName()
		return nil
	case branch.FieldDescription:
		m.ResetDescription()
		return nil
	case branch.FieldIsDefault:
		m.ResetIsDefault()
		return nil
	}
	return fmt.Errorf("unknown Branch field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BranchMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.configurations != nil {
		edges = append(edges, branch.EdgeConfigurations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BranchMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case branch.EdgeConfigurations:
		ids := make([]ent.Value, 0, len(m.configurations))
		for id := range m.configurations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BranchMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedconfigurations != nil {
		edges = append(edges, branch.EdgeConfigurations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BranchMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case branch.EdgeConfigurations:
		ids := make([]ent.Value, 0, len(m.removedconfigurations))
		for id := range m.removedconfigurations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BranchMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedconfigurations {
		edges = append(edges, branch.EdgeConfigurations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BranchMutation) EdgeCleared(name string) bool {
	switch name {
	case branch.EdgeConfigurations:
		return m.clearedconfigurations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BranchMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Branch unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BranchMutation) ResetEdge(name string) error {
	switch name {
	case branch.EdgeConfigurations:
		m.ResetConfigurations()
		return nil
	}
	return fmt.Errorf("unknown Branch edge %s", name)
}

// ConfigurationMutation represents an operation that mutates the Configuration nodes in the graph.
type ConfigurationMutation struct {
	config
	op            Op
	typ           string
	id            *key.ConfigurationKey
	branchID      *keboola.BranchID
	addbranchID   *keboola.BranchID
	componentID   *keboola.ComponentID
	configID      *keboola.ConfigID
	name          *string
	description   *string
	isDisabled    *bool
	content       **orderedmap.OrderedMap
	clearedFields map[string]struct{}
	parent        *key.BranchKey
	clearedparent bool
	done          bool
	oldValue      func(context.Context) (*Configuration, error)
	predicates    []predicate.Configuration
}

var _ ent.Mutation = (*ConfigurationMutation)(nil)

// configurationOption allows management of the mutation configuration using functional options.
type configurationOption func(*ConfigurationMutation)

// newConfigurationMutation creates new mutation for the Configuration entity.
func newConfigurationMutation(c config, op Op, opts ...configurationOption) *ConfigurationMutation {
	m := &ConfigurationMutation{
		config:        c,
		op:            op,
		typ:           TypeConfiguration,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConfigurationID sets the ID field of the mutation.
func withConfigurationID(id key.ConfigurationKey) configurationOption {
	return func(m *ConfigurationMutation) {
		var (
			err   error
			once  deadlock.Once
			value *Configuration
		)
		m.oldValue = func(ctx context.Context) (*Configuration, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Configuration.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConfiguration sets the old Configuration of the mutation.
func withConfiguration(node *Configuration) configurationOption {
	return func(m *ConfigurationMutation) {
		m.oldValue = func(context.Context) (*Configuration, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConfigurationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConfigurationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Configuration entities.
func (m *ConfigurationMutation) SetID(id key.ConfigurationKey) {
	m.id = &id
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also primary key fields
	m.SetBranchID(id.BranchID)
	m.SetComponentID(id.ComponentID)
	m.SetConfigID(id.ConfigID)
	// Set parent
	m.SetParentID(key.BranchKey{
		BranchID: id.BranchID,
	})
	// ------------------------------------
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConfigurationMutation) ID() (id key.ConfigurationKey, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConfigurationMutation) IDs(ctx context.Context) ([]key.ConfigurationKey, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []key.ConfigurationKey{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Configuration.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBranchID sets the "branchID" field.
func (m *ConfigurationMutation) SetBranchID(ki keboola.BranchID) {
	m.branchID = &ki
	m.addbranchID = nil
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also part of the primary key
	if m.id == nil {
		m.id = &key.ConfigurationKey{}
	}
	m.id.BranchID = ki
	// Update also part of edge to the parent
	if m.parent == nil {
		m.parent = &key.BranchKey{}
	}
	m.parent.BranchID = ki
	// ------------------------------------
}

// BranchID returns the value of the "branchID" field in the mutation.
func (m *ConfigurationMutation) BranchID() (r keboola.BranchID, exists bool) {
	v := m.branchID
	if v == nil {
		return
	}
	return *v, true
}

// OldBranchID returns the old "branchID" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldBranchID(ctx context.Context) (v keboola.BranchID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBranchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBranchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBranchID: %w", err)
	}
	return oldValue.BranchID, nil
}

// AddBranchID adds ki to the "branchID" field.
func (m *ConfigurationMutation) AddBranchID(ki keboola.BranchID) {
	if m.addbranchID != nil {
		*m.addbranchID += ki
	} else {
		m.addbranchID = &ki
	}
}

// AddedBranchID returns the value that was added to the "branchID" field in this mutation.
func (m *ConfigurationMutation) AddedBranchID() (r keboola.BranchID, exists bool) {
	v := m.addbranchID
	if v == nil {
		return
	}
	return *v, true
}

// ResetBranchID resets all changes to the "branchID" field.
func (m *ConfigurationMutation) ResetBranchID() {
	m.branchID = nil
	m.addbranchID = nil
}

// SetComponentID sets the "componentID" field.
func (m *ConfigurationMutation) SetComponentID(ki keboola.ComponentID) {
	m.componentID = &ki
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also part of the primary key
	if m.id == nil {
		m.id = &key.ConfigurationKey{}
	}
	m.id.ComponentID = ki
	// ------------------------------------
}

// ComponentID returns the value of the "componentID" field in the mutation.
func (m *ConfigurationMutation) ComponentID() (r keboola.ComponentID, exists bool) {
	v := m.componentID
	if v == nil {
		return
	}
	return *v, true
}

// OldComponentID returns the old "componentID" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldComponentID(ctx context.Context) (v keboola.ComponentID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComponentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComponentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComponentID: %w", err)
	}
	return oldValue.ComponentID, nil
}

// ResetComponentID resets all changes to the "componentID" field.
func (m *ConfigurationMutation) ResetComponentID() {
	m.componentID = nil
}

// SetConfigID sets the "configID" field.
func (m *ConfigurationMutation) SetConfigID(ki keboola.ConfigID) {
	m.configID = &ki
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also part of the primary key
	if m.id == nil {
		m.id = &key.ConfigurationKey{}
	}
	m.id.ConfigID = ki
	// ------------------------------------
}

// ConfigID returns the value of the "configID" field in the mutation.
func (m *ConfigurationMutation) ConfigID() (r keboola.ConfigID, exists bool) {
	v := m.configID
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigID returns the old "configID" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldConfigID(ctx context.Context) (v keboola.ConfigID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigID: %w", err)
	}
	return oldValue.ConfigID, nil
}

// ResetConfigID resets all changes to the "configID" field.
func (m *ConfigurationMutation) ResetConfigID() {
	m.configID = nil
}

// SetName sets the "name" field.
func (m *ConfigurationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ConfigurationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ConfigurationMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ConfigurationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ConfigurationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ConfigurationMutation) ResetDescription() {
	m.description = nil
}

// SetIsDisabled sets the "isDisabled" field.
func (m *ConfigurationMutation) SetIsDisabled(b bool) {
	m.isDisabled = &b
}

// IsDisabled returns the value of the "isDisabled" field in the mutation.
func (m *ConfigurationMutation) IsDisabled() (r bool, exists bool) {
	v := m.isDisabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDisabled returns the old "isDisabled" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldIsDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDisabled: %w", err)
	}
	return oldValue.IsDisabled, nil
}

// ResetIsDisabled resets all changes to the "isDisabled" field.
func (m *ConfigurationMutation) ResetIsDisabled() {
	m.isDisabled = nil
}

// SetContent sets the "content" field.
func (m *ConfigurationMutation) SetContent(om *orderedmap.OrderedMap) {
	m.content = &om
}

// Content returns the value of the "content" field in the mutation.
func (m *ConfigurationMutation) Content() (r *orderedmap.OrderedMap, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldContent(ctx context.Context) (v *orderedmap.OrderedMap, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ConfigurationMutation) ResetContent() {
	m.content = nil
}

// SetParentID sets the "parent" edge to the Branch entity by id.
func (m *ConfigurationMutation) SetParentID(id key.BranchKey) {
	m.parent = &id
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also part of the primary key
	m.SetBranchID(id.BranchID)
	// ------------------------------------
}

// ClearParent clears the "parent" edge to the Branch entity.
func (m *ConfigurationMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Branch entity was cleared.
func (m *ConfigurationMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *ConfigurationMutation) ParentID() (id key.BranchKey, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *ConfigurationMutation) ParentIDs() (ids []key.BranchKey) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *ConfigurationMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// Where appends a list predicates to the ConfigurationMutation builder.
func (m *ConfigurationMutation) Where(ps ...predicate.Configuration) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ConfigurationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ConfigurationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Configuration, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ConfigurationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ConfigurationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Configuration).
func (m *ConfigurationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConfigurationMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.branchID != nil {
		fields = append(fields, configuration.FieldBranchID)
	}
	if m.componentID != nil {
		fields = append(fields, configuration.FieldComponentID)
	}
	if m.configID != nil {
		fields = append(fields, configuration.FieldConfigID)
	}
	if m.name != nil {
		fields = append(fields, configuration.FieldName)
	}
	if m.description != nil {
		fields = append(fields, configuration.FieldDescription)
	}
	if m.isDisabled != nil {
		fields = append(fields, configuration.FieldIsDisabled)
	}
	if m.content != nil {
		fields = append(fields, configuration.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConfigurationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case configuration.FieldBranchID:
		return m.BranchID()
	case configuration.FieldComponentID:
		return m.ComponentID()
	case configuration.FieldConfigID:
		return m.ConfigID()
	case configuration.FieldName:
		return m.Name()
	case configuration.FieldDescription:
		return m.Description()
	case configuration.FieldIsDisabled:
		return m.IsDisabled()
	case configuration.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConfigurationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case configuration.FieldBranchID:
		return m.OldBranchID(ctx)
	case configuration.FieldComponentID:
		return m.OldComponentID(ctx)
	case configuration.FieldConfigID:
		return m.OldConfigID(ctx)
	case configuration.FieldName:
		return m.OldName(ctx)
	case configuration.FieldDescription:
		return m.OldDescription(ctx)
	case configuration.FieldIsDisabled:
		return m.OldIsDisabled(ctx)
	case configuration.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown Configuration field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConfigurationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case configuration.FieldBranchID:
		v, ok := value.(keboola.BranchID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBranchID(v)
		return nil
	case configuration.FieldComponentID:
		v, ok := value.(keboola.ComponentID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponentID(v)
		return nil
	case configuration.FieldConfigID:
		v, ok := value.(keboola.ConfigID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigID(v)
		return nil
	case configuration.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case configuration.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case configuration.FieldIsDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDisabled(v)
		return nil
	case configuration.FieldContent:
		v, ok := value.(*orderedmap.OrderedMap)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown Configuration field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConfigurationMutation) AddedFields() []string {
	var fields []string
	if m.addbranchID != nil {
		fields = append(fields, configuration.FieldBranchID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConfigurationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case configuration.FieldBranchID:
		return m.AddedBranchID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConfigurationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case configuration.FieldBranchID:
		v, ok := value.(keboola.BranchID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBranchID(v)
		return nil
	}
	return fmt.Errorf("unknown Configuration numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConfigurationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConfigurationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConfigurationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Configuration nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConfigurationMutation) ResetField(name string) error {
	switch name {
	case configuration.FieldBranchID:
		m.ResetBranchID()
		return nil
	case configuration.FieldComponentID:
		m.ResetComponentID()
		return nil
	case configuration.FieldConfigID:
		m.ResetConfigID()
		return nil
	case configuration.FieldName:
		m.ResetName()
		return nil
	case configuration.FieldDescription:
		m.ResetDescription()
		return nil
	case configuration.FieldIsDisabled:
		m.ResetIsDisabled()
		return nil
	case configuration.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown Configuration field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConfigurationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.parent != nil {
		edges = append(edges, configuration.EdgeParent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConfigurationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case configuration.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConfigurationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConfigurationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConfigurationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedparent {
		edges = append(edges, configuration.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConfigurationMutation) EdgeCleared(name string) bool {
	switch name {
	case configuration.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConfigurationMutation) ClearEdge(name string) error {
	switch name {
	case configuration.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Configuration unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConfigurationMutation) ResetEdge(name string) error {
	switch name {
	case configuration.EdgeParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown Configuration edge %s", name)
}

// ConfigurationRowMutation represents an operation that mutates the ConfigurationRow nodes in the graph.
type ConfigurationRowMutation struct {
	config
	op            Op
	typ           string
	id            *key.ConfigurationRowKey
	branchID      *keboola.BranchID
	addbranchID   *keboola.BranchID
	componentID   *keboola.ComponentID
	configID      *keboola.ConfigID
	rowID         *keboola.RowID
	name          *string
	description   *string
	isDisabled    *bool
	content       **orderedmap.OrderedMap
	clearedFields map[string]struct{}
	parent        *key.ConfigurationKey
	clearedparent bool
	done          bool
	oldValue      func(context.Context) (*ConfigurationRow, error)
	predicates    []predicate.ConfigurationRow
}

var _ ent.Mutation = (*ConfigurationRowMutation)(nil)

// configurationrowOption allows management of the mutation configuration using functional options.
type configurationrowOption func(*ConfigurationRowMutation)

// newConfigurationRowMutation creates new mutation for the ConfigurationRow entity.
func newConfigurationRowMutation(c config, op Op, opts ...configurationrowOption) *ConfigurationRowMutation {
	m := &ConfigurationRowMutation{
		config:        c,
		op:            op,
		typ:           TypeConfigurationRow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConfigurationRowID sets the ID field of the mutation.
func withConfigurationRowID(id key.ConfigurationRowKey) configurationrowOption {
	return func(m *ConfigurationRowMutation) {
		var (
			err   error
			once  deadlock.Once
			value *ConfigurationRow
		)
		m.oldValue = func(ctx context.Context) (*ConfigurationRow, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ConfigurationRow.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConfigurationRow sets the old ConfigurationRow of the mutation.
func withConfigurationRow(node *ConfigurationRow) configurationrowOption {
	return func(m *ConfigurationRowMutation) {
		m.oldValue = func(context.Context) (*ConfigurationRow, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConfigurationRowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConfigurationRowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ConfigurationRow entities.
func (m *ConfigurationRowMutation) SetID(id key.ConfigurationRowKey) {
	m.id = &id
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also primary key fields
	m.SetBranchID(id.BranchID)
	m.SetComponentID(id.ComponentID)
	m.SetConfigID(id.ConfigID)
	m.SetRowID(id.RowID)
	// Set parent
	m.SetParentID(key.ConfigurationKey{
		BranchID:    id.BranchID,
		ComponentID: id.ComponentID,
		ConfigID:    id.ConfigID,
	})
	// ------------------------------------
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConfigurationRowMutation) ID() (id key.ConfigurationRowKey, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConfigurationRowMutation) IDs(ctx context.Context) ([]key.ConfigurationRowKey, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []key.ConfigurationRowKey{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ConfigurationRow.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBranchID sets the "branchID" field.
func (m *ConfigurationRowMutation) SetBranchID(ki keboola.BranchID) {
	m.branchID = &ki
	m.addbranchID = nil
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also part of the primary key
	if m.id == nil {
		m.id = &key.ConfigurationRowKey{}
	}
	m.id.BranchID = ki
	// Update also part of edge to the parent
	if m.parent == nil {
		m.parent = &key.ConfigurationKey{}
	}
	m.parent.BranchID = ki
	// ------------------------------------
}

// BranchID returns the value of the "branchID" field in the mutation.
func (m *ConfigurationRowMutation) BranchID() (r keboola.BranchID, exists bool) {
	v := m.branchID
	if v == nil {
		return
	}
	return *v, true
}

// OldBranchID returns the old "branchID" field's value of the ConfigurationRow entity.
// If the ConfigurationRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationRowMutation) OldBranchID(ctx context.Context) (v keboola.BranchID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBranchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBranchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBranchID: %w", err)
	}
	return oldValue.BranchID, nil
}

// AddBranchID adds ki to the "branchID" field.
func (m *ConfigurationRowMutation) AddBranchID(ki keboola.BranchID) {
	if m.addbranchID != nil {
		*m.addbranchID += ki
	} else {
		m.addbranchID = &ki
	}
}

// AddedBranchID returns the value that was added to the "branchID" field in this mutation.
func (m *ConfigurationRowMutation) AddedBranchID() (r keboola.BranchID, exists bool) {
	v := m.addbranchID
	if v == nil {
		return
	}
	return *v, true
}

// ResetBranchID resets all changes to the "branchID" field.
func (m *ConfigurationRowMutation) ResetBranchID() {
	m.branchID = nil
	m.addbranchID = nil
}

// SetComponentID sets the "componentID" field.
func (m *ConfigurationRowMutation) SetComponentID(ki keboola.ComponentID) {
	m.componentID = &ki
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also part of the primary key
	if m.id == nil {
		m.id = &key.ConfigurationRowKey{}
	}
	m.id.ComponentID = ki
	// Update also part of edge to the parent
	if m.parent == nil {
		m.parent = &key.ConfigurationKey{}
	}
	m.parent.ComponentID = ki
	// ------------------------------------
}

// ComponentID returns the value of the "componentID" field in the mutation.
func (m *ConfigurationRowMutation) ComponentID() (r keboola.ComponentID, exists bool) {
	v := m.componentID
	if v == nil {
		return
	}
	return *v, true
}

// OldComponentID returns the old "componentID" field's value of the ConfigurationRow entity.
// If the ConfigurationRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationRowMutation) OldComponentID(ctx context.Context) (v keboola.ComponentID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComponentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComponentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComponentID: %w", err)
	}
	return oldValue.ComponentID, nil
}

// ResetComponentID resets all changes to the "componentID" field.
func (m *ConfigurationRowMutation) ResetComponentID() {
	m.componentID = nil
}

// SetConfigID sets the "configID" field.
func (m *ConfigurationRowMutation) SetConfigID(ki keboola.ConfigID) {
	m.configID = &ki
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also part of the primary key
	if m.id == nil {
		m.id = &key.ConfigurationRowKey{}
	}
	m.id.ConfigID = ki
	// Update also part of edge to the parent
	if m.parent == nil {
		m.parent = &key.ConfigurationKey{}
	}
	m.parent.ConfigID = ki
	// ------------------------------------
}

// ConfigID returns the value of the "configID" field in the mutation.
func (m *ConfigurationRowMutation) ConfigID() (r keboola.ConfigID, exists bool) {
	v := m.configID
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigID returns the old "configID" field's value of the ConfigurationRow entity.
// If the ConfigurationRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationRowMutation) OldConfigID(ctx context.Context) (v keboola.ConfigID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigID: %w", err)
	}
	return oldValue.ConfigID, nil
}

// ResetConfigID resets all changes to the "configID" field.
func (m *ConfigurationRowMutation) ResetConfigID() {
	m.configID = nil
}

// SetRowID sets the "rowID" field.
func (m *ConfigurationRowMutation) SetRowID(ki keboola.RowID) {
	m.rowID = &ki
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also part of the primary key
	if m.id == nil {
		m.id = &key.ConfigurationRowKey{}
	}
	m.id.RowID = ki
	// ------------------------------------
}

// RowID returns the value of the "rowID" field in the mutation.
func (m *ConfigurationRowMutation) RowID() (r keboola.RowID, exists bool) {
	v := m.rowID
	if v == nil {
		return
	}
	return *v, true
}

// OldRowID returns the old "rowID" field's value of the ConfigurationRow entity.
// If the ConfigurationRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationRowMutation) OldRowID(ctx context.Context) (v keboola.RowID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRowID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRowID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRowID: %w", err)
	}
	return oldValue.RowID, nil
}

// ResetRowID resets all changes to the "rowID" field.
func (m *ConfigurationRowMutation) ResetRowID() {
	m.rowID = nil
}

// SetName sets the "name" field.
func (m *ConfigurationRowMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ConfigurationRowMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ConfigurationRow entity.
// If the ConfigurationRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationRowMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ConfigurationRowMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ConfigurationRowMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ConfigurationRowMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ConfigurationRow entity.
// If the ConfigurationRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationRowMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ConfigurationRowMutation) ResetDescription() {
	m.description = nil
}

// SetIsDisabled sets the "isDisabled" field.
func (m *ConfigurationRowMutation) SetIsDisabled(b bool) {
	m.isDisabled = &b
}

// IsDisabled returns the value of the "isDisabled" field in the mutation.
func (m *ConfigurationRowMutation) IsDisabled() (r bool, exists bool) {
	v := m.isDisabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDisabled returns the old "isDisabled" field's value of the ConfigurationRow entity.
// If the ConfigurationRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationRowMutation) OldIsDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDisabled: %w", err)
	}
	return oldValue.IsDisabled, nil
}

// ResetIsDisabled resets all changes to the "isDisabled" field.
func (m *ConfigurationRowMutation) ResetIsDisabled() {
	m.isDisabled = nil
}

// SetContent sets the "content" field.
func (m *ConfigurationRowMutation) SetContent(om *orderedmap.OrderedMap) {
	m.content = &om
}

// Content returns the value of the "content" field in the mutation.
func (m *ConfigurationRowMutation) Content() (r *orderedmap.OrderedMap, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the ConfigurationRow entity.
// If the ConfigurationRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationRowMutation) OldContent(ctx context.Context) (v *orderedmap.OrderedMap, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ConfigurationRowMutation) ResetContent() {
	m.content = nil
}

// SetParentID sets the "parent" edge to the Configuration entity by id.
func (m *ConfigurationRowMutation) SetParentID(id key.ConfigurationKey) {
	m.parent = &id
	// Added by "primarykey" ent extension
	// ------------------------------------
	// Update also part of the primary key
	m.SetBranchID(id.BranchID)
	m.SetComponentID(id.ComponentID)
	m.SetConfigID(id.ConfigID)
	// ------------------------------------
}

// ClearParent clears the "parent" edge to the Configuration entity.
func (m *ConfigurationRowMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Configuration entity was cleared.
func (m *ConfigurationRowMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *ConfigurationRowMutation) ParentID() (id key.ConfigurationKey, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *ConfigurationRowMutation) ParentIDs() (ids []key.ConfigurationKey) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *ConfigurationRowMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// Where appends a list predicates to the ConfigurationRowMutation builder.
func (m *ConfigurationRowMutation) Where(ps ...predicate.ConfigurationRow) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ConfigurationRowMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ConfigurationRowMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ConfigurationRow, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ConfigurationRowMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ConfigurationRowMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ConfigurationRow).
func (m *ConfigurationRowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConfigurationRowMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.branchID != nil {
		fields = append(fields, configurationrow.FieldBranchID)
	}
	if m.componentID != nil {
		fields = append(fields, configurationrow.FieldComponentID)
	}
	if m.configID != nil {
		fields = append(fields, configurationrow.FieldConfigID)
	}
	if m.rowID != nil {
		fields = append(fields, configurationrow.FieldRowID)
	}
	if m.name != nil {
		fields = append(fields, configurationrow.FieldName)
	}
	if m.description != nil {
		fields = append(fields, configurationrow.FieldDescription)
	}
	if m.isDisabled != nil {
		fields = append(fields, configurationrow.FieldIsDisabled)
	}
	if m.content != nil {
		fields = append(fields, configurationrow.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConfigurationRowMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case configurationrow.FieldBranchID:
		return m.BranchID()
	case configurationrow.FieldComponentID:
		return m.ComponentID()
	case configurationrow.FieldConfigID:
		return m.ConfigID()
	case configurationrow.FieldRowID:
		return m.RowID()
	case configurationrow.FieldName:
		return m.Name()
	case configurationrow.FieldDescription:
		return m.Description()
	case configurationrow.FieldIsDisabled:
		return m.IsDisabled()
	case configurationrow.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConfigurationRowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case configurationrow.FieldBranchID:
		return m.OldBranchID(ctx)
	case configurationrow.FieldComponentID:
		return m.OldComponentID(ctx)
	case configurationrow.FieldConfigID:
		return m.OldConfigID(ctx)
	case configurationrow.FieldRowID:
		return m.OldRowID(ctx)
	case configurationrow.FieldName:
		return m.OldName(ctx)
	case configurationrow.FieldDescription:
		return m.OldDescription(ctx)
	case configurationrow.FieldIsDisabled:
		return m.OldIsDisabled(ctx)
	case configurationrow.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown ConfigurationRow field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConfigurationRowMutation) SetField(name string, value ent.Value) error {
	switch name {
	case configurationrow.FieldBranchID:
		v, ok := value.(keboola.BranchID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBranchID(v)
		return nil
	case configurationrow.FieldComponentID:
		v, ok := value.(keboola.ComponentID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponentID(v)
		return nil
	case configurationrow.FieldConfigID:
		v, ok := value.(keboola.ConfigID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigID(v)
		return nil
	case configurationrow.FieldRowID:
		v, ok := value.(keboola.RowID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRowID(v)
		return nil
	case configurationrow.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case configurationrow.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case configurationrow.FieldIsDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDisabled(v)
		return nil
	case configurationrow.FieldContent:
		v, ok := value.(*orderedmap.OrderedMap)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown ConfigurationRow field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConfigurationRowMutation) AddedFields() []string {
	var fields []string
	if m.addbranchID != nil {
		fields = append(fields, configurationrow.FieldBranchID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConfigurationRowMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case configurationrow.FieldBranchID:
		return m.AddedBranchID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConfigurationRowMutation) AddField(name string, value ent.Value) error {
	switch name {
	case configurationrow.FieldBranchID:
		v, ok := value.(keboola.BranchID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBranchID(v)
		return nil
	}
	return fmt.Errorf("unknown ConfigurationRow numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConfigurationRowMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConfigurationRowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConfigurationRowMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ConfigurationRow nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConfigurationRowMutation) ResetField(name string) error {
	switch name {
	case configurationrow.FieldBranchID:
		m.ResetBranchID()
		return nil
	case configurationrow.FieldComponentID:
		m.ResetComponentID()
		return nil
	case configurationrow.FieldConfigID:
		m.ResetConfigID()
		return nil
	case configurationrow.FieldRowID:
		m.ResetRowID()
		return nil
	case configurationrow.FieldName:
		m.ResetName()
		return nil
	case configurationrow.FieldDescription:
		m.ResetDescription()
		return nil
	case configurationrow.FieldIsDisabled:
		m.ResetIsDisabled()
		return nil
	case configurationrow.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown ConfigurationRow field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConfigurationRowMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.parent != nil {
		edges = append(edges, configurationrow.EdgeParent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConfigurationRowMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case configurationrow.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConfigurationRowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConfigurationRowMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConfigurationRowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedparent {
		edges = append(edges, configurationrow.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConfigurationRowMutation) EdgeCleared(name string) bool {
	switch name {
	case configurationrow.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConfigurationRowMutation) ClearEdge(name string) error {
	switch name {
	case configurationrow.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown ConfigurationRow unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConfigurationRowMutation) ResetEdge(name string) error {
	switch name {
	case configurationrow.EdgeParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown ConfigurationRow edge %s", name)
}
