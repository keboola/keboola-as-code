// Code generated by goa v3.11.1, DO NOT EDIT.
//
// buffer HTTP server types
//
// Command:
// $ goa gen github.com/keboola/keboola-as-code/api/buffer --output
// ./internal/pkg/service/buffer/api

package server

import (
	"fmt"
	"strings"
	"unicode/utf8"

	buffer "github.com/keboola/keboola-as-code/internal/pkg/service/buffer/api/gen/buffer"
	"github.com/keboola/keboola-as-code/internal/pkg/service/buffer/store/model/column"
	goa "goa.design/goa/v3/pkg"
)

// CreateReceiverRequestBody is the type of the "buffer" service
// "CreateReceiver" endpoint HTTP request body.
type CreateReceiverRequestBody struct {
	// Optional ID, if not filled in, it will be generated from name. Cannot be
	// changed later.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Human readable name of the receiver.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of teh receiver.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of exports, max 20 exports per a receiver.
	Exports []*CreateExportDataRequestBody `form:"exports,omitempty" json:"exports,omitempty" xml:"exports,omitempty"`
}

// UpdateReceiverRequestBody is the type of the "buffer" service
// "UpdateReceiver" endpoint HTTP request body.
type UpdateReceiverRequestBody struct {
	// Human readable name of the receiver.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of teh receiver.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// CreateExportRequestBody is the type of the "buffer" service "CreateExport"
// endpoint HTTP request body.
type CreateExportRequestBody struct {
	// Optional ID, if not filled in, it will be generated from name. Cannot be
	// changed later.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Human readable name of the export.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Export column mapping.
	Mapping *MappingRequestBody `form:"mapping,omitempty" json:"mapping,omitempty" xml:"mapping,omitempty"`
	// Table import conditions.
	Conditions *ConditionsRequestBody `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
}

// UpdateExportRequestBody is the type of the "buffer" service "UpdateExport"
// endpoint HTTP request body.
type UpdateExportRequestBody struct {
	// Human readable name of the export.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Export column mapping.
	Mapping *MappingRequestBody `form:"mapping,omitempty" json:"mapping,omitempty" xml:"mapping,omitempty"`
	// Table import conditions.
	Conditions *ConditionsRequestBody `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
}

// APIVersionIndexResponseBody is the type of the "buffer" service
// "ApiVersionIndex" endpoint HTTP response body.
type APIVersionIndexResponseBody struct {
	// Name of the API
	API string `form:"api" json:"api" xml:"api"`
	// URL of the API documentation.
	Documentation string `form:"documentation" json:"documentation" xml:"documentation"`
}

// CreateReceiverResponseBody is the type of the "buffer" service
// "CreateReceiver" endpoint HTTP response body.
type CreateReceiverResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// UpdateReceiverResponseBody is the type of the "buffer" service
// "UpdateReceiver" endpoint HTTP response body.
type UpdateReceiverResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// URL of the receiver. Contains secret used for authentication.
	URL string `form:"url" json:"url" xml:"url"`
	// Human readable name of the receiver.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of teh receiver.
	Description string `form:"description" json:"description" xml:"description"`
	// List of exports, max 20 exports per a receiver.
	Exports []*ExportResponseBody `form:"exports" json:"exports" xml:"exports"`
}

// ListReceiversResponseBody is the type of the "buffer" service
// "ListReceivers" endpoint HTTP response body.
type ListReceiversResponseBody struct {
	Receivers []*ReceiverResponseBody `form:"receivers" json:"receivers" xml:"receivers"`
}

// GetReceiverResponseBody is the type of the "buffer" service "GetReceiver"
// endpoint HTTP response body.
type GetReceiverResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// URL of the receiver. Contains secret used for authentication.
	URL string `form:"url" json:"url" xml:"url"`
	// Human readable name of the receiver.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of teh receiver.
	Description string `form:"description" json:"description" xml:"description"`
	// List of exports, max 20 exports per a receiver.
	Exports []*ExportResponseBody `form:"exports" json:"exports" xml:"exports"`
}

// RefreshReceiverTokensResponseBody is the type of the "buffer" service
// "RefreshReceiverTokens" endpoint HTTP response body.
type RefreshReceiverTokensResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// URL of the receiver. Contains secret used for authentication.
	URL string `form:"url" json:"url" xml:"url"`
	// Human readable name of the receiver.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of teh receiver.
	Description string `form:"description" json:"description" xml:"description"`
	// List of exports, max 20 exports per a receiver.
	Exports []*ExportResponseBody `form:"exports" json:"exports" xml:"exports"`
}

// CreateExportResponseBody is the type of the "buffer" service "CreateExport"
// endpoint HTTP response body.
type CreateExportResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// GetExportResponseBody is the type of the "buffer" service "GetExport"
// endpoint HTTP response body.
type GetExportResponseBody struct {
	ID         string `form:"id" json:"id" xml:"id"`
	ReceiverID string `form:"receiverId" json:"receiverId" xml:"receiverId"`
	// Human readable name of the export.
	Name string `form:"name" json:"name" xml:"name"`
	// Export column mapping.
	Mapping *MappingResponseBody `form:"mapping" json:"mapping" xml:"mapping"`
	// Table import conditions.
	Conditions *ConditionsResponseBody `form:"conditions" json:"conditions" xml:"conditions"`
}

// ListExportsResponseBody is the type of the "buffer" service "ListExports"
// endpoint HTTP response body.
type ListExportsResponseBody struct {
	Exports []*ExportResponseBody `form:"exports" json:"exports" xml:"exports"`
}

// UpdateExportResponseBody is the type of the "buffer" service "UpdateExport"
// endpoint HTTP response body.
type UpdateExportResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// GetTaskResponseBody is the type of the "buffer" service "GetTask" endpoint
// HTTP response body.
type GetTaskResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// CreateReceiverBufferReceiverAlreadyExistsResponseBody is the type of the
// "buffer" service "CreateReceiver" endpoint HTTP response body for the
// "buffer.receiverAlreadyExists" error.
type CreateReceiverBufferReceiverAlreadyExistsResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateReceiverBufferResourceLimitReachedResponseBody is the type of the
// "buffer" service "CreateReceiver" endpoint HTTP response body for the
// "buffer.resourceLimitReached" error.
type CreateReceiverBufferResourceLimitReachedResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateReceiverBufferReceiverNotFoundResponseBody is the type of the "buffer"
// service "UpdateReceiver" endpoint HTTP response body for the
// "buffer.receiverNotFound" error.
type UpdateReceiverBufferReceiverNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetReceiverBufferReceiverNotFoundResponseBody is the type of the "buffer"
// service "GetReceiver" endpoint HTTP response body for the
// "buffer.receiverNotFound" error.
type GetReceiverBufferReceiverNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteReceiverBufferReceiverNotFoundResponseBody is the type of the "buffer"
// service "DeleteReceiver" endpoint HTTP response body for the
// "buffer.receiverNotFound" error.
type DeleteReceiverBufferReceiverNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// RefreshReceiverTokensBufferReceiverNotFoundResponseBody is the type of the
// "buffer" service "RefreshReceiverTokens" endpoint HTTP response body for the
// "buffer.receiverNotFound" error.
type RefreshReceiverTokensBufferReceiverNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateExportBufferReceiverNotFoundResponseBody is the type of the "buffer"
// service "CreateExport" endpoint HTTP response body for the
// "buffer.receiverNotFound" error.
type CreateExportBufferReceiverNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateExportBufferExportAlreadyExistsResponseBody is the type of the
// "buffer" service "CreateExport" endpoint HTTP response body for the
// "buffer.exportAlreadyExists" error.
type CreateExportBufferExportAlreadyExistsResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateExportBufferResourceLimitReachedResponseBody is the type of the
// "buffer" service "CreateExport" endpoint HTTP response body for the
// "buffer.resourceLimitReached" error.
type CreateExportBufferResourceLimitReachedResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetExportBufferReceiverNotFoundResponseBody is the type of the "buffer"
// service "GetExport" endpoint HTTP response body for the
// "buffer.receiverNotFound" error.
type GetExportBufferReceiverNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetExportBufferExportNotFoundResponseBody is the type of the "buffer"
// service "GetExport" endpoint HTTP response body for the
// "buffer.exportNotFound" error.
type GetExportBufferExportNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ListExportsBufferReceiverNotFoundResponseBody is the type of the "buffer"
// service "ListExports" endpoint HTTP response body for the
// "buffer.receiverNotFound" error.
type ListExportsBufferReceiverNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateExportBufferReceiverNotFoundResponseBody is the type of the "buffer"
// service "UpdateExport" endpoint HTTP response body for the
// "buffer.receiverNotFound" error.
type UpdateExportBufferReceiverNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateExportBufferExportNotFoundResponseBody is the type of the "buffer"
// service "UpdateExport" endpoint HTTP response body for the
// "buffer.exportNotFound" error.
type UpdateExportBufferExportNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteExportBufferReceiverNotFoundResponseBody is the type of the "buffer"
// service "DeleteExport" endpoint HTTP response body for the
// "buffer.receiverNotFound" error.
type DeleteExportBufferReceiverNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteExportBufferExportNotFoundResponseBody is the type of the "buffer"
// service "DeleteExport" endpoint HTTP response body for the
// "buffer.exportNotFound" error.
type DeleteExportBufferExportNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ImportBufferReceiverNotFoundResponseBody is the type of the "buffer" service
// "Import" endpoint HTTP response body for the "buffer.receiverNotFound" error.
type ImportBufferReceiverNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ImportBufferPayloadTooLargeResponseBody is the type of the "buffer" service
// "Import" endpoint HTTP response body for the "buffer.payloadTooLarge" error.
type ImportBufferPayloadTooLargeResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetTaskBufferTaskNotFoundResponseBody is the type of the "buffer" service
// "GetTask" endpoint HTTP response body for the "buffer.taskNotFound" error.
type GetTaskBufferTaskNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// TaskOutputsResponseBody is used to define fields on response body types.
type TaskOutputsResponseBody struct {
	// ID of the created/updated export.
	ExportID *string `form:"exportId,omitempty" json:"exportId,omitempty" xml:"exportId,omitempty"`
	// ID of the created/updated receiver.
	ReceiverID *string `form:"receiverId,omitempty" json:"receiverId,omitempty" xml:"receiverId,omitempty"`
}

// ExportResponseBody is used to define fields on response body types.
type ExportResponseBody struct {
	ID         string `form:"id" json:"id" xml:"id"`
	ReceiverID string `form:"receiverId" json:"receiverId" xml:"receiverId"`
	// Human readable name of the export.
	Name string `form:"name" json:"name" xml:"name"`
	// Export column mapping.
	Mapping *MappingResponseBody `form:"mapping" json:"mapping" xml:"mapping"`
	// Table import conditions.
	Conditions *ConditionsResponseBody `form:"conditions" json:"conditions" xml:"conditions"`
}

// MappingResponseBody is used to define fields on response body types.
type MappingResponseBody struct {
	// Destination table ID.
	TableID string `form:"tableId" json:"tableId" xml:"tableId"`
	// Enables incremental loading to the table.
	Incremental *bool `form:"incremental,omitempty" json:"incremental,omitempty" xml:"incremental,omitempty"`
	// List of export column mappings. An export may have a maximum of 50 columns.
	Columns []*ColumnResponseBody `form:"columns" json:"columns" xml:"columns"`
}

// ColumnResponseBody is used to define fields on response body types.
type ColumnResponseBody struct {
	// Sets this column as a part of the primary key of the destination table.
	PrimaryKey bool `form:"primaryKey" json:"primaryKey" xml:"primaryKey"`
	// Column mapping type. This represents a static mapping (e.g. `body` or
	// `headers`), or a custom mapping using a template language (`template`).
	Type column.Type `form:"type" json:"type" xml:"type"`
	// Column name.
	Name string `form:"name" json:"name" xml:"name"`
	// Template mapping details. Only for "type" = "template".
	Template *TemplateResponseBody `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// TemplateResponseBody is used to define fields on response body types.
type TemplateResponseBody struct {
	Language string `form:"language" json:"language" xml:"language"`
	Content  string `form:"content" json:"content" xml:"content"`
}

// ConditionsResponseBody is used to define fields on response body types.
type ConditionsResponseBody struct {
	// Maximum import buffer size in number of records.
	Count int `form:"count" json:"count" xml:"count"`
	// Maximum import buffer size in bytes. Units: B, KB, MB.
	Size string `form:"size" json:"size" xml:"size"`
	// Minimum import interval. Units: [s]econd,[m]inute,[h]our.
	Time string `form:"time" json:"time" xml:"time"`
}

// ReceiverResponseBody is used to define fields on response body types.
type ReceiverResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// URL of the receiver. Contains secret used for authentication.
	URL string `form:"url" json:"url" xml:"url"`
	// Human readable name of the receiver.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of teh receiver.
	Description string `form:"description" json:"description" xml:"description"`
	// List of exports, max 20 exports per a receiver.
	Exports []*ExportResponseBody `form:"exports" json:"exports" xml:"exports"`
}

// CreateExportDataRequestBody is used to define fields on request body types.
type CreateExportDataRequestBody struct {
	// Optional ID, if not filled in, it will be generated from name. Cannot be
	// changed later.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Human readable name of the export.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Export column mapping.
	Mapping *MappingRequestBody `form:"mapping,omitempty" json:"mapping,omitempty" xml:"mapping,omitempty"`
	// Table import conditions.
	Conditions *ConditionsRequestBody `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
}

// MappingRequestBody is used to define fields on request body types.
type MappingRequestBody struct {
	// Destination table ID.
	TableID *string `form:"tableId,omitempty" json:"tableId,omitempty" xml:"tableId,omitempty"`
	// Enables incremental loading to the table.
	Incremental *bool `form:"incremental,omitempty" json:"incremental,omitempty" xml:"incremental,omitempty"`
	// List of export column mappings. An export may have a maximum of 50 columns.
	Columns []*ColumnRequestBody `form:"columns,omitempty" json:"columns,omitempty" xml:"columns,omitempty"`
}

// ColumnRequestBody is used to define fields on request body types.
type ColumnRequestBody struct {
	// Sets this column as a part of the primary key of the destination table.
	PrimaryKey *bool `form:"primaryKey,omitempty" json:"primaryKey,omitempty" xml:"primaryKey,omitempty"`
	// Column mapping type. This represents a static mapping (e.g. `body` or
	// `headers`), or a custom mapping using a template language (`template`).
	Type *column.Type `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Column name.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Template mapping details. Only for "type" = "template".
	Template *TemplateRequestBody `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// TemplateRequestBody is used to define fields on request body types.
type TemplateRequestBody struct {
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	Content  *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// ConditionsRequestBody is used to define fields on request body types.
type ConditionsRequestBody struct {
	// Maximum import buffer size in number of records.
	Count *int `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// Maximum import buffer size in bytes. Units: B, KB, MB.
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Minimum import interval. Units: [s]econd,[m]inute,[h]our.
	Time *string `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// NewAPIVersionIndexResponseBody builds the HTTP response body from the result
// of the "ApiVersionIndex" endpoint of the "buffer" service.
func NewAPIVersionIndexResponseBody(res *buffer.ServiceDetail) *APIVersionIndexResponseBody {
	body := &APIVersionIndexResponseBody{
		API:           res.API,
		Documentation: res.Documentation,
	}
	return body
}

// NewCreateReceiverResponseBody builds the HTTP response body from the result
// of the "CreateReceiver" endpoint of the "buffer" service.
func NewCreateReceiverResponseBody(res *buffer.Task) *CreateReceiverResponseBody {
	body := &CreateReceiverResponseBody{
		ID:         string(res.ID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalBufferTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewUpdateReceiverResponseBody builds the HTTP response body from the result
// of the "UpdateReceiver" endpoint of the "buffer" service.
func NewUpdateReceiverResponseBody(res *buffer.Receiver) *UpdateReceiverResponseBody {
	body := &UpdateReceiverResponseBody{
		ID:          string(res.ID),
		URL:         res.URL,
		Name:        res.Name,
		Description: res.Description,
	}
	if res.Exports != nil {
		body.Exports = make([]*ExportResponseBody, len(res.Exports))
		for i, val := range res.Exports {
			body.Exports[i] = marshalBufferExportToExportResponseBody(val)
		}
	}
	return body
}

// NewListReceiversResponseBody builds the HTTP response body from the result
// of the "ListReceivers" endpoint of the "buffer" service.
func NewListReceiversResponseBody(res *buffer.ReceiversList) *ListReceiversResponseBody {
	body := &ListReceiversResponseBody{}
	if res.Receivers != nil {
		body.Receivers = make([]*ReceiverResponseBody, len(res.Receivers))
		for i, val := range res.Receivers {
			body.Receivers[i] = marshalBufferReceiverToReceiverResponseBody(val)
		}
	}
	return body
}

// NewGetReceiverResponseBody builds the HTTP response body from the result of
// the "GetReceiver" endpoint of the "buffer" service.
func NewGetReceiverResponseBody(res *buffer.Receiver) *GetReceiverResponseBody {
	body := &GetReceiverResponseBody{
		ID:          string(res.ID),
		URL:         res.URL,
		Name:        res.Name,
		Description: res.Description,
	}
	if res.Exports != nil {
		body.Exports = make([]*ExportResponseBody, len(res.Exports))
		for i, val := range res.Exports {
			body.Exports[i] = marshalBufferExportToExportResponseBody(val)
		}
	}
	return body
}

// NewRefreshReceiverTokensResponseBody builds the HTTP response body from the
// result of the "RefreshReceiverTokens" endpoint of the "buffer" service.
func NewRefreshReceiverTokensResponseBody(res *buffer.Receiver) *RefreshReceiverTokensResponseBody {
	body := &RefreshReceiverTokensResponseBody{
		ID:          string(res.ID),
		URL:         res.URL,
		Name:        res.Name,
		Description: res.Description,
	}
	if res.Exports != nil {
		body.Exports = make([]*ExportResponseBody, len(res.Exports))
		for i, val := range res.Exports {
			body.Exports[i] = marshalBufferExportToExportResponseBody(val)
		}
	}
	return body
}

// NewCreateExportResponseBody builds the HTTP response body from the result of
// the "CreateExport" endpoint of the "buffer" service.
func NewCreateExportResponseBody(res *buffer.Task) *CreateExportResponseBody {
	body := &CreateExportResponseBody{
		ID:         string(res.ID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalBufferTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewGetExportResponseBody builds the HTTP response body from the result of
// the "GetExport" endpoint of the "buffer" service.
func NewGetExportResponseBody(res *buffer.Export) *GetExportResponseBody {
	body := &GetExportResponseBody{
		ID:         string(res.ID),
		ReceiverID: string(res.ReceiverID),
		Name:       res.Name,
	}
	if res.Mapping != nil {
		body.Mapping = marshalBufferMappingToMappingResponseBody(res.Mapping)
	}
	if res.Conditions != nil {
		body.Conditions = marshalBufferConditionsToConditionsResponseBody(res.Conditions)
	}
	return body
}

// NewListExportsResponseBody builds the HTTP response body from the result of
// the "ListExports" endpoint of the "buffer" service.
func NewListExportsResponseBody(res *buffer.ExportsList) *ListExportsResponseBody {
	body := &ListExportsResponseBody{}
	if res.Exports != nil {
		body.Exports = make([]*ExportResponseBody, len(res.Exports))
		for i, val := range res.Exports {
			body.Exports[i] = marshalBufferExportToExportResponseBody(val)
		}
	}
	return body
}

// NewUpdateExportResponseBody builds the HTTP response body from the result of
// the "UpdateExport" endpoint of the "buffer" service.
func NewUpdateExportResponseBody(res *buffer.Task) *UpdateExportResponseBody {
	body := &UpdateExportResponseBody{
		ID:         string(res.ID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalBufferTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewGetTaskResponseBody builds the HTTP response body from the result of the
// "GetTask" endpoint of the "buffer" service.
func NewGetTaskResponseBody(res *buffer.Task) *GetTaskResponseBody {
	body := &GetTaskResponseBody{
		ID:         string(res.ID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalBufferTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewCreateReceiverBufferReceiverAlreadyExistsResponseBody builds the HTTP
// response body from the result of the "CreateReceiver" endpoint of the
// "buffer" service.
func NewCreateReceiverBufferReceiverAlreadyExistsResponseBody(res *buffer.GenericError) *CreateReceiverBufferReceiverAlreadyExistsResponseBody {
	body := &CreateReceiverBufferReceiverAlreadyExistsResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateReceiverBufferResourceLimitReachedResponseBody builds the HTTP
// response body from the result of the "CreateReceiver" endpoint of the
// "buffer" service.
func NewCreateReceiverBufferResourceLimitReachedResponseBody(res *buffer.GenericError) *CreateReceiverBufferResourceLimitReachedResponseBody {
	body := &CreateReceiverBufferResourceLimitReachedResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateReceiverBufferReceiverNotFoundResponseBody builds the HTTP response
// body from the result of the "UpdateReceiver" endpoint of the "buffer"
// service.
func NewUpdateReceiverBufferReceiverNotFoundResponseBody(res *buffer.GenericError) *UpdateReceiverBufferReceiverNotFoundResponseBody {
	body := &UpdateReceiverBufferReceiverNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetReceiverBufferReceiverNotFoundResponseBody builds the HTTP response
// body from the result of the "GetReceiver" endpoint of the "buffer" service.
func NewGetReceiverBufferReceiverNotFoundResponseBody(res *buffer.GenericError) *GetReceiverBufferReceiverNotFoundResponseBody {
	body := &GetReceiverBufferReceiverNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteReceiverBufferReceiverNotFoundResponseBody builds the HTTP response
// body from the result of the "DeleteReceiver" endpoint of the "buffer"
// service.
func NewDeleteReceiverBufferReceiverNotFoundResponseBody(res *buffer.GenericError) *DeleteReceiverBufferReceiverNotFoundResponseBody {
	body := &DeleteReceiverBufferReceiverNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewRefreshReceiverTokensBufferReceiverNotFoundResponseBody builds the HTTP
// response body from the result of the "RefreshReceiverTokens" endpoint of the
// "buffer" service.
func NewRefreshReceiverTokensBufferReceiverNotFoundResponseBody(res *buffer.GenericError) *RefreshReceiverTokensBufferReceiverNotFoundResponseBody {
	body := &RefreshReceiverTokensBufferReceiverNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateExportBufferReceiverNotFoundResponseBody builds the HTTP response
// body from the result of the "CreateExport" endpoint of the "buffer" service.
func NewCreateExportBufferReceiverNotFoundResponseBody(res *buffer.GenericError) *CreateExportBufferReceiverNotFoundResponseBody {
	body := &CreateExportBufferReceiverNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateExportBufferExportAlreadyExistsResponseBody builds the HTTP
// response body from the result of the "CreateExport" endpoint of the "buffer"
// service.
func NewCreateExportBufferExportAlreadyExistsResponseBody(res *buffer.GenericError) *CreateExportBufferExportAlreadyExistsResponseBody {
	body := &CreateExportBufferExportAlreadyExistsResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateExportBufferResourceLimitReachedResponseBody builds the HTTP
// response body from the result of the "CreateExport" endpoint of the "buffer"
// service.
func NewCreateExportBufferResourceLimitReachedResponseBody(res *buffer.GenericError) *CreateExportBufferResourceLimitReachedResponseBody {
	body := &CreateExportBufferResourceLimitReachedResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetExportBufferReceiverNotFoundResponseBody builds the HTTP response body
// from the result of the "GetExport" endpoint of the "buffer" service.
func NewGetExportBufferReceiverNotFoundResponseBody(res *buffer.GenericError) *GetExportBufferReceiverNotFoundResponseBody {
	body := &GetExportBufferReceiverNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetExportBufferExportNotFoundResponseBody builds the HTTP response body
// from the result of the "GetExport" endpoint of the "buffer" service.
func NewGetExportBufferExportNotFoundResponseBody(res *buffer.GenericError) *GetExportBufferExportNotFoundResponseBody {
	body := &GetExportBufferExportNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewListExportsBufferReceiverNotFoundResponseBody builds the HTTP response
// body from the result of the "ListExports" endpoint of the "buffer" service.
func NewListExportsBufferReceiverNotFoundResponseBody(res *buffer.GenericError) *ListExportsBufferReceiverNotFoundResponseBody {
	body := &ListExportsBufferReceiverNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateExportBufferReceiverNotFoundResponseBody builds the HTTP response
// body from the result of the "UpdateExport" endpoint of the "buffer" service.
func NewUpdateExportBufferReceiverNotFoundResponseBody(res *buffer.GenericError) *UpdateExportBufferReceiverNotFoundResponseBody {
	body := &UpdateExportBufferReceiverNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateExportBufferExportNotFoundResponseBody builds the HTTP response
// body from the result of the "UpdateExport" endpoint of the "buffer" service.
func NewUpdateExportBufferExportNotFoundResponseBody(res *buffer.GenericError) *UpdateExportBufferExportNotFoundResponseBody {
	body := &UpdateExportBufferExportNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteExportBufferReceiverNotFoundResponseBody builds the HTTP response
// body from the result of the "DeleteExport" endpoint of the "buffer" service.
func NewDeleteExportBufferReceiverNotFoundResponseBody(res *buffer.GenericError) *DeleteExportBufferReceiverNotFoundResponseBody {
	body := &DeleteExportBufferReceiverNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteExportBufferExportNotFoundResponseBody builds the HTTP response
// body from the result of the "DeleteExport" endpoint of the "buffer" service.
func NewDeleteExportBufferExportNotFoundResponseBody(res *buffer.GenericError) *DeleteExportBufferExportNotFoundResponseBody {
	body := &DeleteExportBufferExportNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewImportBufferReceiverNotFoundResponseBody builds the HTTP response body
// from the result of the "Import" endpoint of the "buffer" service.
func NewImportBufferReceiverNotFoundResponseBody(res *buffer.GenericError) *ImportBufferReceiverNotFoundResponseBody {
	body := &ImportBufferReceiverNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewImportBufferPayloadTooLargeResponseBody builds the HTTP response body
// from the result of the "Import" endpoint of the "buffer" service.
func NewImportBufferPayloadTooLargeResponseBody(res *buffer.GenericError) *ImportBufferPayloadTooLargeResponseBody {
	body := &ImportBufferPayloadTooLargeResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetTaskBufferTaskNotFoundResponseBody builds the HTTP response body from
// the result of the "GetTask" endpoint of the "buffer" service.
func NewGetTaskBufferTaskNotFoundResponseBody(res *buffer.GenericError) *GetTaskBufferTaskNotFoundResponseBody {
	body := &GetTaskBufferTaskNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateReceiverPayload builds a buffer service CreateReceiver endpoint
// payload.
func NewCreateReceiverPayload(body *CreateReceiverRequestBody, storageAPIToken string) *buffer.CreateReceiverPayload {
	v := &buffer.CreateReceiverPayload{
		Name:        *body.Name,
		Description: body.Description,
	}
	if body.ID != nil {
		id := buffer.ReceiverID(*body.ID)
		v.ID = &id
	}
	if body.Exports != nil {
		v.Exports = make([]*buffer.CreateExportData, len(body.Exports))
		for i, val := range body.Exports {
			v.Exports[i] = unmarshalCreateExportDataRequestBodyToBufferCreateExportData(val)
		}
	}
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateReceiverPayload builds a buffer service UpdateReceiver endpoint
// payload.
func NewUpdateReceiverPayload(body *UpdateReceiverRequestBody, receiverID string, storageAPIToken string) *buffer.UpdateReceiverPayload {
	v := &buffer.UpdateReceiverPayload{
		Name:        body.Name,
		Description: body.Description,
	}
	v.ReceiverID = buffer.ReceiverID(receiverID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewListReceiversPayload builds a buffer service ListReceivers endpoint
// payload.
func NewListReceiversPayload(storageAPIToken string) *buffer.ListReceiversPayload {
	v := &buffer.ListReceiversPayload{}
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetReceiverPayload builds a buffer service GetReceiver endpoint payload.
func NewGetReceiverPayload(receiverID string, storageAPIToken string) *buffer.GetReceiverPayload {
	v := &buffer.GetReceiverPayload{}
	v.ReceiverID = buffer.ReceiverID(receiverID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewDeleteReceiverPayload builds a buffer service DeleteReceiver endpoint
// payload.
func NewDeleteReceiverPayload(receiverID string, storageAPIToken string) *buffer.DeleteReceiverPayload {
	v := &buffer.DeleteReceiverPayload{}
	v.ReceiverID = buffer.ReceiverID(receiverID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewRefreshReceiverTokensPayload builds a buffer service
// RefreshReceiverTokens endpoint payload.
func NewRefreshReceiverTokensPayload(receiverID string, storageAPIToken string) *buffer.RefreshReceiverTokensPayload {
	v := &buffer.RefreshReceiverTokensPayload{}
	v.ReceiverID = buffer.ReceiverID(receiverID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewCreateExportPayload builds a buffer service CreateExport endpoint payload.
func NewCreateExportPayload(body *CreateExportRequestBody, receiverID string, storageAPIToken string) *buffer.CreateExportPayload {
	v := &buffer.CreateExportPayload{
		Name: *body.Name,
	}
	if body.ID != nil {
		id := buffer.ExportID(*body.ID)
		v.ID = &id
	}
	v.Mapping = unmarshalMappingRequestBodyToBufferMapping(body.Mapping)
	if body.Conditions != nil {
		v.Conditions = unmarshalConditionsRequestBodyToBufferConditions(body.Conditions)
	}
	v.ReceiverID = buffer.ReceiverID(receiverID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetExportPayload builds a buffer service GetExport endpoint payload.
func NewGetExportPayload(receiverID string, exportID string, storageAPIToken string) *buffer.GetExportPayload {
	v := &buffer.GetExportPayload{}
	v.ReceiverID = buffer.ReceiverID(receiverID)
	v.ExportID = buffer.ExportID(exportID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewListExportsPayload builds a buffer service ListExports endpoint payload.
func NewListExportsPayload(receiverID string, storageAPIToken string) *buffer.ListExportsPayload {
	v := &buffer.ListExportsPayload{}
	v.ReceiverID = buffer.ReceiverID(receiverID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateExportPayload builds a buffer service UpdateExport endpoint payload.
func NewUpdateExportPayload(body *UpdateExportRequestBody, receiverID string, exportID string, storageAPIToken string) *buffer.UpdateExportPayload {
	v := &buffer.UpdateExportPayload{
		Name: body.Name,
	}
	if body.Mapping != nil {
		v.Mapping = unmarshalMappingRequestBodyToBufferMapping(body.Mapping)
	}
	if body.Conditions != nil {
		v.Conditions = unmarshalConditionsRequestBodyToBufferConditions(body.Conditions)
	}
	v.ReceiverID = buffer.ReceiverID(receiverID)
	v.ExportID = buffer.ExportID(exportID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewDeleteExportPayload builds a buffer service DeleteExport endpoint payload.
func NewDeleteExportPayload(receiverID string, exportID string, storageAPIToken string) *buffer.DeleteExportPayload {
	v := &buffer.DeleteExportPayload{}
	v.ReceiverID = buffer.ReceiverID(receiverID)
	v.ExportID = buffer.ExportID(exportID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewImportPayload builds a buffer service Import endpoint payload.
func NewImportPayload(projectID int, receiverID string, secret string, contentType string) *buffer.ImportPayload {
	v := &buffer.ImportPayload{}
	v.ProjectID = buffer.ProjectID(projectID)
	v.ReceiverID = buffer.ReceiverID(receiverID)
	v.Secret = secret
	v.ContentType = contentType

	return v
}

// NewGetTaskPayload builds a buffer service GetTask endpoint payload.
func NewGetTaskPayload(taskID string, storageAPIToken string) *buffer.GetTaskPayload {
	v := &buffer.GetTaskPayload{}
	v.TaskID = buffer.TaskID(taskID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// ValidateCreateReceiverRequestBody runs the validations defined on
// CreateReceiverRequestBody
func ValidateCreateReceiverRequestBody(body *CreateReceiverRequestBody, errContext []string) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", strings.Join(errContext, ".")))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "id"), "."), *body.ID, utf8.RuneCountInString(*body.ID), 1, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "id"), "."), *body.ID, utf8.RuneCountInString(*body.ID), 48, false))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "description"), "."), *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	for i, e := range body.Exports {
		errContext := append(errContext, fmt.Sprintf(`exports[%d]`, i))
		if e != nil {
			if err2 := ValidateCreateExportDataRequestBody(e, errContext); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateReceiverRequestBody runs the validations defined on
// UpdateReceiverRequestBody
func ValidateUpdateReceiverRequestBody(body *UpdateReceiverRequestBody, errContext []string) (err error) {
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "description"), "."), *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	return
}

// ValidateCreateExportRequestBody runs the validations defined on
// CreateExportRequestBody
func ValidateCreateExportRequestBody(body *CreateExportRequestBody, errContext []string) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", strings.Join(errContext, ".")))
	}
	if body.Mapping == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mapping", strings.Join(errContext, ".")))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "id"), "."), *body.ID, utf8.RuneCountInString(*body.ID), 1, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "id"), "."), *body.ID, utf8.RuneCountInString(*body.ID), 48, false))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Mapping != nil {
		if err2 := ValidateMappingRequestBody(body.Mapping, append(errContext, "mapping")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Conditions != nil {
		if err2 := ValidateConditionsRequestBody(body.Conditions, append(errContext, "conditions")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateExportRequestBody runs the validations defined on
// UpdateExportRequestBody
func ValidateUpdateExportRequestBody(body *UpdateExportRequestBody, errContext []string) (err error) {
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Mapping != nil {
		if err2 := ValidateMappingRequestBody(body.Mapping, append(errContext, "mapping")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Conditions != nil {
		if err2 := ValidateConditionsRequestBody(body.Conditions, append(errContext, "conditions")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateExportDataRequestBody runs the validations defined on
// CreateExportDataRequestBody
func ValidateCreateExportDataRequestBody(body *CreateExportDataRequestBody, errContext []string) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", strings.Join(errContext, ".")))
	}
	if body.Mapping == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mapping", strings.Join(errContext, ".")))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "id"), "."), *body.ID, utf8.RuneCountInString(*body.ID), 1, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "id"), "."), *body.ID, utf8.RuneCountInString(*body.ID), 48, false))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Mapping != nil {
		if err2 := ValidateMappingRequestBody(body.Mapping, append(errContext, "mapping")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Conditions != nil {
		if err2 := ValidateConditionsRequestBody(body.Conditions, append(errContext, "conditions")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateMappingRequestBody runs the validations defined on MappingRequestBody
func ValidateMappingRequestBody(body *MappingRequestBody, errContext []string) (err error) {
	if body.TableID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tableId", strings.Join(errContext, ".")))
	}
	if body.Columns == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("columns", strings.Join(errContext, ".")))
	}
	if len(body.Columns) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "columns"), "."), body.Columns, len(body.Columns), 1, true))
	}
	if len(body.Columns) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "columns"), "."), body.Columns, len(body.Columns), 50, false))
	}
	for i, e := range body.Columns {
		errContext := append(errContext, fmt.Sprintf(`columns[%d]`, i))
		if e != nil {
			if err2 := ValidateColumnRequestBody(e, errContext); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateColumnRequestBody runs the validations defined on ColumnRequestBody
func ValidateColumnRequestBody(body *ColumnRequestBody, errContext []string) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", strings.Join(errContext, ".")))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", strings.Join(errContext, ".")))
	}
	if body.Type != nil {
		if !(*body.Type == "id" || *body.Type == "datetime" || *body.Type == "ip" || *body.Type == "body" || *body.Type == "headers" || *body.Type == "template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(strings.Join(append(errContext, "type"), "."), *body.Type, []interface{}{"id", "datetime", "ip", strings.Join(errContext, "."), "headers", "template"}))
		}
	}
	if body.Template != nil {
		if err2 := ValidateTemplateRequestBody(body.Template, append(errContext, "template")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTemplateRequestBody runs the validations defined on
// TemplateRequestBody
func ValidateTemplateRequestBody(body *TemplateRequestBody, errContext []string) (err error) {
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", strings.Join(errContext, ".")))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", strings.Join(errContext, ".")))
	}
	if body.Language != nil {
		if !(*body.Language == "jsonnet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(strings.Join(append(errContext, "language"), "."), *body.Language, []interface{}{"jsonnet"}))
		}
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "content"), "."), *body.Content, utf8.RuneCountInString(*body.Content), 1, true))
		}
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "content"), "."), *body.Content, utf8.RuneCountInString(*body.Content), 4096, false))
		}
	}
	return
}

// ValidateConditionsRequestBody runs the validations defined on
// ConditionsRequestBody
func ValidateConditionsRequestBody(body *ConditionsRequestBody, errContext []string) (err error) {
	if body.Count != nil {
		if *body.Count < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(strings.Join(append(errContext, "count"), "."), *body.Count, 1, true))
		}
	}
	if body.Count != nil {
		if *body.Count > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(strings.Join(append(errContext, "count"), "."), *body.Count, 1e+07, false))
		}
	}
	return
}
