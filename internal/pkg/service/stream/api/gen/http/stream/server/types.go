// Code generated by goa v3.22.6, DO NOT EDIT.
//
// stream HTTP server types
//
// Command:
// $ goa gen github.com/keboola/keboola-as-code/api/stream --output
// ./internal/pkg/service/stream/api

package server

import (
	"unicode/utf8"

	stream "github.com/keboola/keboola-as-code/internal/pkg/service/stream/api/gen/stream"
	"github.com/keboola/keboola-as-code/internal/pkg/service/stream/definition"
	"github.com/keboola/keboola-as-code/internal/pkg/service/stream/mapping/table/column"
	goa "goa.design/goa/v3/pkg"
)

// CreateSourceRequestBody is the type of the "stream" service "CreateSource"
// endpoint HTTP request body.
type CreateSourceRequestBody struct {
	// Optional ID, if not filled in, it will be generated from name. Cannot be
	// changed later.
	SourceID *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Type     *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the source.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateSourceRequestBody is the type of the "stream" service "UpdateSource"
// endpoint HTTP request body.
type UpdateSourceRequestBody struct {
	// Description of the modification, description of the version.
	ChangeDescription *string `form:"changeDescription,omitempty" json:"changeDescription,omitempty" xml:"changeDescription,omitempty"`
	Type              *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the source.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateSourceSettingsRequestBody is the type of the "stream" service
// "UpdateSourceSettings" endpoint HTTP request body.
type UpdateSourceSettingsRequestBody struct {
	// Description of the modification, description of the version.
	ChangeDescription *string                    `form:"changeDescription,omitempty" json:"changeDescription,omitempty" xml:"changeDescription,omitempty"`
	Settings          []*SettingPatchRequestBody `form:"settings,omitempty" json:"settings,omitempty" xml:"settings,omitempty"`
}

// CreateSinkRequestBody is the type of the "stream" service "CreateSink"
// endpoint HTTP request body.
type CreateSinkRequestBody struct {
	// Optional ID, if not filled in, it will be generated from name. Cannot be
	// changed later.
	SinkID *string `form:"sinkId,omitempty" json:"sinkId,omitempty" xml:"sinkId,omitempty"`
	Type   *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the sink.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string                     `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Table       *TableSinkCreateRequestBody `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
}

// UpdateSinkSettingsRequestBody is the type of the "stream" service
// "UpdateSinkSettings" endpoint HTTP request body.
type UpdateSinkSettingsRequestBody struct {
	// Description of the modification, description of the version.
	ChangeDescription *string                    `form:"changeDescription,omitempty" json:"changeDescription,omitempty" xml:"changeDescription,omitempty"`
	Settings          []*SettingPatchRequestBody `form:"settings,omitempty" json:"settings,omitempty" xml:"settings,omitempty"`
}

// UpdateSinkRequestBody is the type of the "stream" service "UpdateSink"
// endpoint HTTP request body.
type UpdateSinkRequestBody struct {
	// Description of the modification, description of the version.
	ChangeDescription *string `form:"changeDescription,omitempty" json:"changeDescription,omitempty" xml:"changeDescription,omitempty"`
	Type              *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the sink.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string                     `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Table       *TableSinkUpdateRequestBody `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
}

// APIVersionIndexResponseBody is the type of the "stream" service
// "ApiVersionIndex" endpoint HTTP response body.
type APIVersionIndexResponseBody struct {
	// Name of the API
	API string `form:"api" json:"api" xml:"api"`
	// URL of the API documentation.
	Documentation string `form:"documentation" json:"documentation" xml:"documentation"`
}

// CreateSourceResponseBody is the type of the "stream" service "CreateSource"
// endpoint HTTP response body.
type CreateSourceResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// UpdateSourceResponseBody is the type of the "stream" service "UpdateSource"
// endpoint HTTP response body.
type UpdateSourceResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// ListSourcesResponseBody is the type of the "stream" service "ListSources"
// endpoint HTTP response body.
type ListSourcesResponseBody struct {
	ProjectID int                            `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int                            `form:"branchId" json:"branchId" xml:"branchId"`
	Page      *PaginatedResponseResponseBody `form:"page" json:"page" xml:"page"`
	Sources   []*SourceResponseBody          `form:"sources" json:"sources" xml:"sources"`
}

// ListDeletedSourcesResponseBody is the type of the "stream" service
// "ListDeletedSources" endpoint HTTP response body.
type ListDeletedSourcesResponseBody struct {
	ProjectID int                            `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int                            `form:"branchId" json:"branchId" xml:"branchId"`
	Page      *PaginatedResponseResponseBody `form:"page" json:"page" xml:"page"`
	Sources   []*SourceResponseBody          `form:"sources" json:"sources" xml:"sources"`
}

// GetSourceResponseBody is the type of the "stream" service "GetSource"
// endpoint HTTP response body.
type GetSourceResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	Type      string `form:"type" json:"type" xml:"type"`
	// Human readable name of the source.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string `form:"description" json:"description" xml:"description"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody     `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody        `form:"version" json:"version" xml:"version"`
	Created  *CreatedEntityResponseBody  `form:"created" json:"created" xml:"created"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
}

// DeleteSourceResponseBody is the type of the "stream" service "DeleteSource"
// endpoint HTTP response body.
type DeleteSourceResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// GetSourceSettingsResponseBody is the type of the "stream" service
// "GetSourceSettings" endpoint HTTP response body.
type GetSourceSettingsResponseBody struct {
	Settings []*SettingResultResponseBody `form:"settings,omitempty" json:"settings,omitempty" xml:"settings,omitempty"`
}

// UpdateSourceSettingsResponseBody is the type of the "stream" service
// "UpdateSourceSettings" endpoint HTTP response body.
type UpdateSourceSettingsResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// TestSourceResponseBody is the type of the "stream" service "TestSource"
// endpoint HTTP response body.
type TestSourceResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	// Table for each configured sink.
	Tables []*TestResultTableResponseBody `form:"tables" json:"tables" xml:"tables"`
}

// DisableSourceResponseBody is the type of the "stream" service
// "DisableSource" endpoint HTTP response body.
type DisableSourceResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// EnableSourceResponseBody is the type of the "stream" service "EnableSource"
// endpoint HTTP response body.
type EnableSourceResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// UndeleteSourceResponseBody is the type of the "stream" service
// "UndeleteSource" endpoint HTTP response body.
type UndeleteSourceResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// ListSourceVersionsResponseBody is the type of the "stream" service
// "ListSourceVersions" endpoint HTTP response body.
type ListSourceVersionsResponseBody struct {
	Versions []*VersionResponseBody         `form:"versions" json:"versions" xml:"versions"`
	Page     *PaginatedResponseResponseBody `form:"page" json:"page" xml:"page"`
}

// SourceVersionDetailResponseBody is the type of the "stream" service
// "SourceVersionDetail" endpoint HTTP response body.
type SourceVersionDetailResponseBody struct {
	// Version number counted from 1.
	Number definition.VersionNumber `form:"number" json:"number" xml:"number"`
	// Hash of the entity state.
	Hash string `form:"hash" json:"hash" xml:"hash"`
	// Description of the change.
	Description string `form:"description" json:"description" xml:"description"`
	// Date and time of the modification.
	At string `form:"at" json:"at" xml:"at"`
	// Who modified the entity.
	By *ByResponseBody `form:"by" json:"by" xml:"by"`
}

// RollbackSourceVersionResponseBody is the type of the "stream" service
// "RollbackSourceVersion" endpoint HTTP response body.
type RollbackSourceVersionResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// CreateSinkResponseBody is the type of the "stream" service "CreateSink"
// endpoint HTTP response body.
type CreateSinkResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// GetSinkResponseBody is the type of the "stream" service "GetSink" endpoint
// HTTP response body.
type GetSinkResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	SinkID    string `form:"sinkId" json:"sinkId" xml:"sinkId"`
	Type      string `form:"type" json:"type" xml:"type"`
	// Human readable name of the sink.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string                      `form:"description" json:"description" xml:"description"`
	Table       *TableSinkResponseBody      `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
	Version     *VersionResponseBody        `form:"version" json:"version" xml:"version"`
	Created     *CreatedEntityResponseBody  `form:"created" json:"created" xml:"created"`
	Deleted     *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled    *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
}

// GetSinkSettingsResponseBody is the type of the "stream" service
// "GetSinkSettings" endpoint HTTP response body.
type GetSinkSettingsResponseBody struct {
	Settings []*SettingResultResponseBody `form:"settings,omitempty" json:"settings,omitempty" xml:"settings,omitempty"`
}

// UpdateSinkSettingsResponseBody is the type of the "stream" service
// "UpdateSinkSettings" endpoint HTTP response body.
type UpdateSinkSettingsResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// ListSinksResponseBody is the type of the "stream" service "ListSinks"
// endpoint HTTP response body.
type ListSinksResponseBody struct {
	ProjectID int                            `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int                            `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string                         `form:"sourceId" json:"sourceId" xml:"sourceId"`
	Page      *PaginatedResponseResponseBody `form:"page" json:"page" xml:"page"`
	Sinks     []*SinkResponseBody            `form:"sinks" json:"sinks" xml:"sinks"`
}

// ListDeletedSinksResponseBody is the type of the "stream" service
// "ListDeletedSinks" endpoint HTTP response body.
type ListDeletedSinksResponseBody struct {
	ProjectID int                            `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int                            `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string                         `form:"sourceId" json:"sourceId" xml:"sourceId"`
	Page      *PaginatedResponseResponseBody `form:"page" json:"page" xml:"page"`
	Sinks     []*SinkResponseBody            `form:"sinks" json:"sinks" xml:"sinks"`
}

// UpdateSinkResponseBody is the type of the "stream" service "UpdateSink"
// endpoint HTTP response body.
type UpdateSinkResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// DeleteSinkResponseBody is the type of the "stream" service "DeleteSink"
// endpoint HTTP response body.
type DeleteSinkResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// SinkStatisticsTotalResponseBody is the type of the "stream" service
// "SinkStatisticsTotal" endpoint HTTP response body.
type SinkStatisticsTotalResponseBody struct {
	Total  *LevelResponseBody  `form:"total" json:"total" xml:"total"`
	Levels *LevelsResponseBody `form:"levels" json:"levels" xml:"levels"`
}

// SinkStatisticsFilesResponseBody is the type of the "stream" service
// "SinkStatisticsFiles" endpoint HTTP response body.
type SinkStatisticsFilesResponseBody struct {
	Files []*SinkFileResponseBody `form:"files" json:"files" xml:"files"`
}

// DisableSinkResponseBody is the type of the "stream" service "DisableSink"
// endpoint HTTP response body.
type DisableSinkResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// EnableSinkResponseBody is the type of the "stream" service "EnableSink"
// endpoint HTTP response body.
type EnableSinkResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// UndeleteSinkResponseBody is the type of the "stream" service "UndeleteSink"
// endpoint HTTP response body.
type UndeleteSinkResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// ListSinkVersionsResponseBody is the type of the "stream" service
// "ListSinkVersions" endpoint HTTP response body.
type ListSinkVersionsResponseBody struct {
	Versions []*VersionResponseBody         `form:"versions" json:"versions" xml:"versions"`
	Page     *PaginatedResponseResponseBody `form:"page" json:"page" xml:"page"`
}

// SinkVersionDetailResponseBody is the type of the "stream" service
// "SinkVersionDetail" endpoint HTTP response body.
type SinkVersionDetailResponseBody struct {
	// Version number counted from 1.
	Number definition.VersionNumber `form:"number" json:"number" xml:"number"`
	// Hash of the entity state.
	Hash string `form:"hash" json:"hash" xml:"hash"`
	// Description of the change.
	Description string `form:"description" json:"description" xml:"description"`
	// Date and time of the modification.
	At string `form:"at" json:"at" xml:"at"`
	// Who modified the entity.
	By *ByResponseBody `form:"by" json:"by" xml:"by"`
}

// RollbackSinkVersionResponseBody is the type of the "stream" service
// "RollbackSinkVersion" endpoint HTTP response body.
type RollbackSinkVersionResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// GetTaskResponseBody is the type of the "stream" service "GetTask" endpoint
// HTTP response body.
type GetTaskResponseBody struct {
	TaskID string `form:"taskId" json:"taskId" xml:"taskId"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// AggregationSourcesResponseBody is the type of the "stream" service
// "AggregationSources" endpoint HTTP response body.
type AggregationSourcesResponseBody struct {
	ProjectID int                             `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int                             `form:"branchId" json:"branchId" xml:"branchId"`
	Page      *PaginatedResponseResponseBody  `form:"page" json:"page" xml:"page"`
	Sources   []*AggregatedSourceResponseBody `form:"sources" json:"sources" xml:"sources"`
}

// CreateSourceStreamAPISourceAlreadyExistsResponseBody is the type of the
// "stream" service "CreateSource" endpoint HTTP response body for the
// "stream.api.sourceAlreadyExists" error.
type CreateSourceStreamAPISourceAlreadyExistsResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateSourceStreamAPIResourceLimitReachedResponseBody is the type of the
// "stream" service "CreateSource" endpoint HTTP response body for the
// "stream.api.resourceLimitReached" error.
type CreateSourceStreamAPIResourceLimitReachedResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSourceStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "UpdateSource" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type UpdateSourceStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSourceStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "GetSource" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type GetSourceStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteSourceStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "DeleteSource" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type DeleteSourceStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSourceSettingsStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "GetSourceSettings" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type GetSourceSettingsStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSourceSettingsStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "UpdateSourceSettings" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type UpdateSourceSettingsStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSourceSettingsStreamAPIForbiddenResponseBody is the type of the
// "stream" service "UpdateSourceSettings" endpoint HTTP response body for the
// "stream.api.forbidden" error.
type UpdateSourceSettingsStreamAPIForbiddenResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// TestSourceStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "TestSource" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type TestSourceStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// TestSourceStreamAPIInvalidColumnValueResponseBody is the type of the
// "stream" service "TestSource" endpoint HTTP response body for the
// "stream.api.invalidColumnValue" error.
type TestSourceStreamAPIInvalidColumnValueResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SourceStatisticsClearStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "SourceStatisticsClear" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type SourceStatisticsClearStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DisableSourceStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "DisableSource" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type DisableSourceStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// EnableSourceStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "EnableSource" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type EnableSourceStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UndeleteSourceStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "UndeleteSource" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type UndeleteSourceStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ListSourceVersionsStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "ListSourceVersions" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type ListSourceVersionsStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SourceVersionDetailStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "SourceVersionDetail" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type SourceVersionDetailStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SourceVersionDetailStreamAPIVersionNotFoundResponseBody is the type of the
// "stream" service "SourceVersionDetail" endpoint HTTP response body for the
// "stream.api.versionNotFound" error.
type SourceVersionDetailStreamAPIVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// RollbackSourceVersionStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "RollbackSourceVersion" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type RollbackSourceVersionStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// RollbackSourceVersionStreamAPIVersionNotFoundResponseBody is the type of the
// "stream" service "RollbackSourceVersion" endpoint HTTP response body for the
// "stream.api.versionNotFound" error.
type RollbackSourceVersionStreamAPIVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateSinkStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "CreateSink" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type CreateSinkStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateSinkStreamAPISinkAlreadyExistsResponseBody is the type of the "stream"
// service "CreateSink" endpoint HTTP response body for the
// "stream.api.sinkAlreadyExists" error.
type CreateSinkStreamAPISinkAlreadyExistsResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateSinkStreamAPIResourceLimitReachedResponseBody is the type of the
// "stream" service "CreateSink" endpoint HTTP response body for the
// "stream.api.resourceLimitReached" error.
type CreateSinkStreamAPIResourceLimitReachedResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSinkStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "GetSink" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type GetSinkStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSinkStreamAPISinkNotFoundResponseBody is the type of the "stream" service
// "GetSink" endpoint HTTP response body for the "stream.api.sinkNotFound"
// error.
type GetSinkStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSinkSettingsStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "GetSinkSettings" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type GetSinkSettingsStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSinkSettingsStreamAPISinkNotFoundResponseBody is the type of the "stream"
// service "GetSinkSettings" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type GetSinkSettingsStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSinkSettingsStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "UpdateSinkSettings" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type UpdateSinkSettingsStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSinkSettingsStreamAPISinkNotFoundResponseBody is the type of the
// "stream" service "UpdateSinkSettings" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type UpdateSinkSettingsStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSinkSettingsStreamAPIForbiddenResponseBody is the type of the "stream"
// service "UpdateSinkSettings" endpoint HTTP response body for the
// "stream.api.forbidden" error.
type UpdateSinkSettingsStreamAPIForbiddenResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ListSinksStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "ListSinks" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type ListSinksStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ListDeletedSinksStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "ListDeletedSinks" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type ListDeletedSinksStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSinkStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "UpdateSink" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type UpdateSinkStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSinkStreamAPISinkNotFoundResponseBody is the type of the "stream"
// service "UpdateSink" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type UpdateSinkStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteSinkStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "DeleteSink" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type DeleteSinkStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteSinkStreamAPISinkNotFoundResponseBody is the type of the "stream"
// service "DeleteSink" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type DeleteSinkStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SinkStatisticsTotalStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "SinkStatisticsTotal" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type SinkStatisticsTotalStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SinkStatisticsTotalStreamAPISinkNotFoundResponseBody is the type of the
// "stream" service "SinkStatisticsTotal" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type SinkStatisticsTotalStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SinkStatisticsFilesStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "SinkStatisticsFiles" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type SinkStatisticsFilesStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SinkStatisticsFilesStreamAPISinkNotFoundResponseBody is the type of the
// "stream" service "SinkStatisticsFiles" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type SinkStatisticsFilesStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SinkStatisticsClearStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "SinkStatisticsClear" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type SinkStatisticsClearStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SinkStatisticsClearStreamAPISinkNotFoundResponseBody is the type of the
// "stream" service "SinkStatisticsClear" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type SinkStatisticsClearStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DisableSinkStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "DisableSink" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type DisableSinkStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DisableSinkStreamAPISinkNotFoundResponseBody is the type of the "stream"
// service "DisableSink" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type DisableSinkStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// EnableSinkStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "EnableSink" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type EnableSinkStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// EnableSinkStreamAPISinkNotFoundResponseBody is the type of the "stream"
// service "EnableSink" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type EnableSinkStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UndeleteSinkStreamAPISourceNotFoundResponseBody is the type of the "stream"
// service "UndeleteSink" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type UndeleteSinkStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UndeleteSinkStreamAPISinkNotFoundResponseBody is the type of the "stream"
// service "UndeleteSink" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type UndeleteSinkStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ListSinkVersionsStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "ListSinkVersions" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type ListSinkVersionsStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ListSinkVersionsStreamAPISinkNotFoundResponseBody is the type of the
// "stream" service "ListSinkVersions" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type ListSinkVersionsStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SinkVersionDetailStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "SinkVersionDetail" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type SinkVersionDetailStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SinkVersionDetailStreamAPISinkNotFoundResponseBody is the type of the
// "stream" service "SinkVersionDetail" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type SinkVersionDetailStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// SinkVersionDetailStreamAPIVersionNotFoundResponseBody is the type of the
// "stream" service "SinkVersionDetail" endpoint HTTP response body for the
// "stream.api.versionNotFound" error.
type SinkVersionDetailStreamAPIVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// RollbackSinkVersionStreamAPISourceNotFoundResponseBody is the type of the
// "stream" service "RollbackSinkVersion" endpoint HTTP response body for the
// "stream.api.sourceNotFound" error.
type RollbackSinkVersionStreamAPISourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// RollbackSinkVersionStreamAPISinkNotFoundResponseBody is the type of the
// "stream" service "RollbackSinkVersion" endpoint HTTP response body for the
// "stream.api.sinkNotFound" error.
type RollbackSinkVersionStreamAPISinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// RollbackSinkVersionStreamAPIVersionNotFoundResponseBody is the type of the
// "stream" service "RollbackSinkVersion" endpoint HTTP response body for the
// "stream.api.versionNotFound" error.
type RollbackSinkVersionStreamAPIVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetTaskStreamAPITaskNotFoundResponseBody is the type of the "stream" service
// "GetTask" endpoint HTTP response body for the "stream.api.taskNotFound"
// error.
type GetTaskStreamAPITaskNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// TaskOutputsResponseBody is used to define fields on response body types.
type TaskOutputsResponseBody struct {
	// Absolute URL of the entity.
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// ID of the parent project.
	ProjectID *int `form:"projectId,omitempty" json:"projectId,omitempty" xml:"projectId,omitempty"`
	// ID of the parent branch.
	BranchID *int `form:"branchId,omitempty" json:"branchId,omitempty" xml:"branchId,omitempty"`
	// ID of the created/updated source.
	SourceID *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// ID of the created/updated sink.
	SinkID *string `form:"sinkId,omitempty" json:"sinkId,omitempty" xml:"sinkId,omitempty"`
}

// PaginatedResponseResponseBody is used to define fields on response body
// types.
type PaginatedResponseResponseBody struct {
	// Current limit.
	Limit int `form:"limit" json:"limit" xml:"limit"`
	// Total count of all records.
	TotalCount int `form:"totalCount" json:"totalCount" xml:"totalCount"`
	// Current offset.
	AfterID string `form:"afterId" json:"afterId" xml:"afterId"`
	// ID of the last record in the response.
	LastID string `form:"lastId" json:"lastId" xml:"lastId"`
}

// SourceResponseBody is used to define fields on response body types.
type SourceResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	Type      string `form:"type" json:"type" xml:"type"`
	// Human readable name of the source.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string `form:"description" json:"description" xml:"description"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody     `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody        `form:"version" json:"version" xml:"version"`
	Created  *CreatedEntityResponseBody  `form:"created" json:"created" xml:"created"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
}

// HTTPSourceResponseBody is used to define fields on response body types.
type HTTPSourceResponseBody struct {
	// URL of the HTTP source. Contains secret used for authentication.
	URL string `form:"url" json:"url" xml:"url"`
}

// VersionResponseBody is used to define fields on response body types.
type VersionResponseBody struct {
	// Version number counted from 1.
	Number definition.VersionNumber `form:"number" json:"number" xml:"number"`
	// Hash of the entity state.
	Hash string `form:"hash" json:"hash" xml:"hash"`
	// Description of the change.
	Description string `form:"description" json:"description" xml:"description"`
	// Date and time of the modification.
	At string `form:"at" json:"at" xml:"at"`
	// Who modified the entity.
	By *ByResponseBody `form:"by" json:"by" xml:"by"`
}

// ByResponseBody is used to define fields on response body types.
type ByResponseBody struct {
	// Date and time of deletion.
	Type string `form:"type" json:"type" xml:"type"`
	// ID of the token.
	TokenID *string `form:"tokenId,omitempty" json:"tokenId,omitempty" xml:"tokenId,omitempty"`
	// Description of the token.
	TokenDesc *string `form:"tokenDesc,omitempty" json:"tokenDesc,omitempty" xml:"tokenDesc,omitempty"`
	// ID of the user.
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Name of the user.
	UserName *string `form:"userName,omitempty" json:"userName,omitempty" xml:"userName,omitempty"`
}

// CreatedEntityResponseBody is used to define fields on response body types.
type CreatedEntityResponseBody struct {
	// Date and time of deletion.
	At string `form:"at" json:"at" xml:"at"`
	// Who created the entity.
	By *ByResponseBody `form:"by" json:"by" xml:"by"`
}

// DeletedEntityResponseBody is used to define fields on response body types.
type DeletedEntityResponseBody struct {
	// Date and time of deletion.
	At string `form:"at" json:"at" xml:"at"`
	// Who deleted the entity, for example "system", "user", ...
	By *ByResponseBody `form:"by" json:"by" xml:"by"`
}

// DisabledEntityResponseBody is used to define fields on response body types.
type DisabledEntityResponseBody struct {
	// Date and time of disabling.
	At string `form:"at" json:"at" xml:"at"`
	// Who disabled the entity, for example "system", "user", ...
	By *ByResponseBody `form:"by" json:"by" xml:"by"`
	// Why was the entity disabled?
	Reason string `form:"reason" json:"reason" xml:"reason"`
}

// SettingResultResponseBody is used to define fields on response body types.
type SettingResultResponseBody struct {
	// Key path.
	Key string `form:"key" json:"key" xml:"key"`
	// Value type.
	Type string `form:"type" json:"type" xml:"type"`
	// Key description.
	Description string `form:"description" json:"description" xml:"description"`
	// Actual value.
	Value any `form:"value" json:"value" xml:"value"`
	// Default value.
	DefaultValue any `form:"defaultValue" json:"defaultValue" xml:"defaultValue"`
	// True, if the default value is locally overwritten.
	Overwritten bool `form:"overwritten" json:"overwritten" xml:"overwritten"`
	// True, if only a super admin can modify the key.
	Protected bool `form:"protected" json:"protected" xml:"protected"`
	// Validation rules as a string definition.
	Validation *string `form:"validation,omitempty" json:"validation,omitempty" xml:"validation,omitempty"`
}

// TestResultTableResponseBody is used to define fields on response body types.
type TestResultTableResponseBody struct {
	SinkID  string `form:"sinkId" json:"sinkId" xml:"sinkId"`
	TableID string `form:"tableId" json:"tableId" xml:"tableId"`
	// Generated rows.
	Rows []*TestResultRowResponseBody `form:"rows" json:"rows" xml:"rows"`
}

// TestResultRowResponseBody is used to define fields on response body types.
type TestResultRowResponseBody struct {
	// Generated columns.
	Columns []*TestResultColumnResponseBody `form:"columns" json:"columns" xml:"columns"`
}

// TestResultColumnResponseBody is used to define fields on response body types.
type TestResultColumnResponseBody struct {
	// Column name.
	Name string `form:"name" json:"name" xml:"name"`
	// Column value.
	Value string `form:"value" json:"value" xml:"value"`
}

// TableSinkResponseBody is used to define fields on response body types.
type TableSinkResponseBody struct {
	Type    string                    `form:"type" json:"type" xml:"type"`
	TableID string                    `form:"tableId" json:"tableId" xml:"tableId"`
	Mapping *TableMappingResponseBody `form:"mapping" json:"mapping" xml:"mapping"`
}

// TableMappingResponseBody is used to define fields on response body types.
type TableMappingResponseBody struct {
	Columns []*TableColumnResponseBody `form:"columns" json:"columns" xml:"columns"`
}

// TableColumnResponseBody is used to define fields on response body types.
type TableColumnResponseBody struct {
	// Column mapping type. This represents a static mapping (e.g. `body` or
	// `headers`), or a custom mapping using a template language (`template`).
	Type column.Type `form:"type" json:"type" xml:"type"`
	// Column name.
	Name string `form:"name" json:"name" xml:"name"`
	// Path to the value.
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	// Fallback value if path doesn't exist.
	DefaultValue *string `form:"defaultValue,omitempty" json:"defaultValue,omitempty" xml:"defaultValue,omitempty"`
	// Set to true if path value should use raw string instead of json-encoded
	// value.
	RawString *bool `form:"rawString,omitempty" json:"rawString,omitempty" xml:"rawString,omitempty"`
	// Template mapping details. Only for "type" = "template".
	Template *TableColumnTemplateResponseBody `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// TableColumnTemplateResponseBody is used to define fields on response body
// types.
type TableColumnTemplateResponseBody struct {
	Language string `form:"language" json:"language" xml:"language"`
	Content  string `form:"content" json:"content" xml:"content"`
}

// SinkResponseBody is used to define fields on response body types.
type SinkResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	SinkID    string `form:"sinkId" json:"sinkId" xml:"sinkId"`
	Type      string `form:"type" json:"type" xml:"type"`
	// Human readable name of the sink.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string                      `form:"description" json:"description" xml:"description"`
	Table       *TableSinkResponseBody      `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
	Version     *VersionResponseBody        `form:"version" json:"version" xml:"version"`
	Created     *CreatedEntityResponseBody  `form:"created" json:"created" xml:"created"`
	Deleted     *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled    *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
}

// LevelResponseBody is used to define fields on response body types.
type LevelResponseBody struct {
	// Timestamp of the first received record.
	FirstRecordAt *string `form:"firstRecordAt,omitempty" json:"firstRecordAt,omitempty" xml:"firstRecordAt,omitempty"`
	// Timestamp of the last received record.
	LastRecordAt *string `form:"lastRecordAt,omitempty" json:"lastRecordAt,omitempty" xml:"lastRecordAt,omitempty"`
	RecordsCount uint64  `form:"recordsCount" json:"recordsCount" xml:"recordsCount"`
	// Compressed size of data in bytes.
	CompressedSize uint64 `form:"compressedSize" json:"compressedSize" xml:"compressedSize"`
	// Uncompressed size of data in bytes.
	UncompressedSize uint64 `form:"uncompressedSize" json:"uncompressedSize" xml:"uncompressedSize"`
}

// LevelsResponseBody is used to define fields on response body types.
type LevelsResponseBody struct {
	Local   *LevelResponseBody `form:"local,omitempty" json:"local,omitempty" xml:"local,omitempty"`
	Staging *LevelResponseBody `form:"staging,omitempty" json:"staging,omitempty" xml:"staging,omitempty"`
	Target  *LevelResponseBody `form:"target,omitempty" json:"target,omitempty" xml:"target,omitempty"`
}

// SinkFileResponseBody is used to define fields on response body types.
type SinkFileResponseBody struct {
	State       string  `form:"state" json:"state" xml:"state"`
	OpenedAt    string  `form:"openedAt" json:"openedAt" xml:"openedAt"`
	ClosingAt   *string `form:"closingAt,omitempty" json:"closingAt,omitempty" xml:"closingAt,omitempty"`
	ImportingAt *string `form:"importingAt,omitempty" json:"importingAt,omitempty" xml:"importingAt,omitempty"`
	ImportedAt  *string `form:"importedAt,omitempty" json:"importedAt,omitempty" xml:"importedAt,omitempty"`
	// Number of failed attempts.
	RetryAttempt *int `form:"retryAttempt,omitempty" json:"retryAttempt,omitempty" xml:"retryAttempt,omitempty"`
	// Reason of the last failed attempt.
	RetryReason *string `form:"retryReason,omitempty" json:"retryReason,omitempty" xml:"retryReason,omitempty"`
	// Next attempt time.
	RetryAfter *string                         `form:"retryAfter,omitempty" json:"retryAfter,omitempty" xml:"retryAfter,omitempty"`
	Statistics *SinkFileStatisticsResponseBody `form:"statistics,omitempty" json:"statistics,omitempty" xml:"statistics,omitempty"`
}

// SinkFileStatisticsResponseBody is used to define fields on response body
// types.
type SinkFileStatisticsResponseBody struct {
	Total  *LevelResponseBody  `form:"total" json:"total" xml:"total"`
	Levels *LevelsResponseBody `form:"levels" json:"levels" xml:"levels"`
}

// AggregatedSourceResponseBody is used to define fields on response body types.
type AggregatedSourceResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	Type      string `form:"type" json:"type" xml:"type"`
	// Human readable name of the source.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string `form:"description" json:"description" xml:"description"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody       `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody          `form:"version" json:"version" xml:"version"`
	Created  *CreatedEntityResponseBody    `form:"created" json:"created" xml:"created"`
	Deleted  *DeletedEntityResponseBody    `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody   `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	Sinks    []*AggregatedSinkResponseBody `form:"sinks" json:"sinks" xml:"sinks"`
}

// AggregatedSinkResponseBody is used to define fields on response body types.
type AggregatedSinkResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	SinkID    string `form:"sinkId" json:"sinkId" xml:"sinkId"`
	Type      string `form:"type" json:"type" xml:"type"`
	// Human readable name of the sink.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string                            `form:"description" json:"description" xml:"description"`
	Table       *TableSinkResponseBody            `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
	Version     *VersionResponseBody              `form:"version" json:"version" xml:"version"`
	Created     *CreatedEntityResponseBody        `form:"created" json:"created" xml:"created"`
	Deleted     *DeletedEntityResponseBody        `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled    *DisabledEntityResponseBody       `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	Statistics  *AggregatedStatisticsResponseBody `form:"statistics,omitempty" json:"statistics,omitempty" xml:"statistics,omitempty"`
}

// AggregatedStatisticsResponseBody is used to define fields on response body
// types.
type AggregatedStatisticsResponseBody struct {
	Total  *LevelResponseBody      `form:"total" json:"total" xml:"total"`
	Levels *LevelsResponseBody     `form:"levels" json:"levels" xml:"levels"`
	Files  []*SinkFileResponseBody `form:"files" json:"files" xml:"files"`
}

// SettingPatchRequestBody is used to define fields on request body types.
type SettingPatchRequestBody struct {
	// Key path.
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// A new key value. Use null to reset the value to the default value.
	Value any `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// TableSinkCreateRequestBody is used to define fields on request body types.
type TableSinkCreateRequestBody struct {
	Type    *string                  `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	TableID *string                  `form:"tableId,omitempty" json:"tableId,omitempty" xml:"tableId,omitempty"`
	Mapping *TableMappingRequestBody `form:"mapping,omitempty" json:"mapping,omitempty" xml:"mapping,omitempty"`
}

// TableMappingRequestBody is used to define fields on request body types.
type TableMappingRequestBody struct {
	Columns []*TableColumnRequestBody `form:"columns,omitempty" json:"columns,omitempty" xml:"columns,omitempty"`
}

// TableColumnRequestBody is used to define fields on request body types.
type TableColumnRequestBody struct {
	// Column mapping type. This represents a static mapping (e.g. `body` or
	// `headers`), or a custom mapping using a template language (`template`).
	Type *column.Type `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Column name.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Path to the value.
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	// Fallback value if path doesn't exist.
	DefaultValue *string `form:"defaultValue,omitempty" json:"defaultValue,omitempty" xml:"defaultValue,omitempty"`
	// Set to true if path value should use raw string instead of json-encoded
	// value.
	RawString *bool `form:"rawString,omitempty" json:"rawString,omitempty" xml:"rawString,omitempty"`
	// Template mapping details. Only for "type" = "template".
	Template *TableColumnTemplateRequestBody `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// TableColumnTemplateRequestBody is used to define fields on request body
// types.
type TableColumnTemplateRequestBody struct {
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	Content  *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// TableSinkUpdateRequestBody is used to define fields on request body types.
type TableSinkUpdateRequestBody struct {
	Type    *string                  `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	TableID *string                  `form:"tableId,omitempty" json:"tableId,omitempty" xml:"tableId,omitempty"`
	Mapping *TableMappingRequestBody `form:"mapping,omitempty" json:"mapping,omitempty" xml:"mapping,omitempty"`
}

// NewAPIVersionIndexResponseBody builds the HTTP response body from the result
// of the "ApiVersionIndex" endpoint of the "stream" service.
func NewAPIVersionIndexResponseBody(res *stream.ServiceDetail) *APIVersionIndexResponseBody {
	body := &APIVersionIndexResponseBody{
		API:           res.API,
		Documentation: res.Documentation,
	}
	return body
}

// NewCreateSourceResponseBody builds the HTTP response body from the result of
// the "CreateSource" endpoint of the "stream" service.
func NewCreateSourceResponseBody(res *stream.Task) *CreateSourceResponseBody {
	body := &CreateSourceResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewUpdateSourceResponseBody builds the HTTP response body from the result of
// the "UpdateSource" endpoint of the "stream" service.
func NewUpdateSourceResponseBody(res *stream.Task) *UpdateSourceResponseBody {
	body := &UpdateSourceResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewListSourcesResponseBody builds the HTTP response body from the result of
// the "ListSources" endpoint of the "stream" service.
func NewListSourcesResponseBody(res *stream.SourcesList) *ListSourcesResponseBody {
	body := &ListSourcesResponseBody{
		ProjectID: int(res.ProjectID),
		BranchID:  int(res.BranchID),
	}
	if res.Page != nil {
		body.Page = marshalStreamPaginatedResponseToPaginatedResponseResponseBody(res.Page)
	}
	if res.Sources != nil {
		body.Sources = make([]*SourceResponseBody, len(res.Sources))
		for i, val := range res.Sources {
			body.Sources[i] = marshalStreamSourceToSourceResponseBody(val)
		}
	} else {
		body.Sources = []*SourceResponseBody{}
	}
	return body
}

// NewListDeletedSourcesResponseBody builds the HTTP response body from the
// result of the "ListDeletedSources" endpoint of the "stream" service.
func NewListDeletedSourcesResponseBody(res *stream.SourcesList) *ListDeletedSourcesResponseBody {
	body := &ListDeletedSourcesResponseBody{
		ProjectID: int(res.ProjectID),
		BranchID:  int(res.BranchID),
	}
	if res.Page != nil {
		body.Page = marshalStreamPaginatedResponseToPaginatedResponseResponseBody(res.Page)
	}
	if res.Sources != nil {
		body.Sources = make([]*SourceResponseBody, len(res.Sources))
		for i, val := range res.Sources {
			body.Sources[i] = marshalStreamSourceToSourceResponseBody(val)
		}
	} else {
		body.Sources = []*SourceResponseBody{}
	}
	return body
}

// NewGetSourceResponseBody builds the HTTP response body from the result of
// the "GetSource" endpoint of the "stream" service.
func NewGetSourceResponseBody(res *stream.Source) *GetSourceResponseBody {
	body := &GetSourceResponseBody{
		ProjectID:   int(res.ProjectID),
		BranchID:    int(res.BranchID),
		SourceID:    string(res.SourceID),
		Type:        string(res.Type),
		Name:        res.Name,
		Description: res.Description,
	}
	if res.HTTP != nil {
		body.HTTP = marshalStreamHTTPSourceToHTTPSourceResponseBody(res.HTTP)
	}
	if res.Version != nil {
		body.Version = marshalStreamVersionToVersionResponseBody(res.Version)
	}
	if res.Created != nil {
		body.Created = marshalStreamCreatedEntityToCreatedEntityResponseBody(res.Created)
	}
	if res.Deleted != nil {
		body.Deleted = marshalStreamDeletedEntityToDeletedEntityResponseBody(res.Deleted)
	}
	if res.Disabled != nil {
		body.Disabled = marshalStreamDisabledEntityToDisabledEntityResponseBody(res.Disabled)
	}
	return body
}

// NewDeleteSourceResponseBody builds the HTTP response body from the result of
// the "DeleteSource" endpoint of the "stream" service.
func NewDeleteSourceResponseBody(res *stream.Task) *DeleteSourceResponseBody {
	body := &DeleteSourceResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewGetSourceSettingsResponseBody builds the HTTP response body from the
// result of the "GetSourceSettings" endpoint of the "stream" service.
func NewGetSourceSettingsResponseBody(res *stream.SettingsResult) *GetSourceSettingsResponseBody {
	body := &GetSourceSettingsResponseBody{}
	if res.Settings != nil {
		body.Settings = make([]*SettingResultResponseBody, len(res.Settings))
		for i, val := range res.Settings {
			body.Settings[i] = marshalStreamSettingResultToSettingResultResponseBody(val)
		}
	}
	return body
}

// NewUpdateSourceSettingsResponseBody builds the HTTP response body from the
// result of the "UpdateSourceSettings" endpoint of the "stream" service.
func NewUpdateSourceSettingsResponseBody(res *stream.Task) *UpdateSourceSettingsResponseBody {
	body := &UpdateSourceSettingsResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewTestSourceResponseBody builds the HTTP response body from the result of
// the "TestSource" endpoint of the "stream" service.
func NewTestSourceResponseBody(res *stream.TestResult) *TestSourceResponseBody {
	body := &TestSourceResponseBody{
		ProjectID: int(res.ProjectID),
		BranchID:  int(res.BranchID),
		SourceID:  string(res.SourceID),
	}
	if res.Tables != nil {
		body.Tables = make([]*TestResultTableResponseBody, len(res.Tables))
		for i, val := range res.Tables {
			body.Tables[i] = marshalStreamTestResultTableToTestResultTableResponseBody(val)
		}
	} else {
		body.Tables = []*TestResultTableResponseBody{}
	}
	return body
}

// NewDisableSourceResponseBody builds the HTTP response body from the result
// of the "DisableSource" endpoint of the "stream" service.
func NewDisableSourceResponseBody(res *stream.Task) *DisableSourceResponseBody {
	body := &DisableSourceResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewEnableSourceResponseBody builds the HTTP response body from the result of
// the "EnableSource" endpoint of the "stream" service.
func NewEnableSourceResponseBody(res *stream.Task) *EnableSourceResponseBody {
	body := &EnableSourceResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewUndeleteSourceResponseBody builds the HTTP response body from the result
// of the "UndeleteSource" endpoint of the "stream" service.
func NewUndeleteSourceResponseBody(res *stream.Task) *UndeleteSourceResponseBody {
	body := &UndeleteSourceResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewListSourceVersionsResponseBody builds the HTTP response body from the
// result of the "ListSourceVersions" endpoint of the "stream" service.
func NewListSourceVersionsResponseBody(res *stream.EntityVersions) *ListSourceVersionsResponseBody {
	body := &ListSourceVersionsResponseBody{}
	if res.Versions != nil {
		body.Versions = make([]*VersionResponseBody, len(res.Versions))
		for i, val := range res.Versions {
			body.Versions[i] = marshalStreamVersionToVersionResponseBody(val)
		}
	} else {
		body.Versions = []*VersionResponseBody{}
	}
	if res.Page != nil {
		body.Page = marshalStreamPaginatedResponseToPaginatedResponseResponseBody(res.Page)
	}
	return body
}

// NewSourceVersionDetailResponseBody builds the HTTP response body from the
// result of the "SourceVersionDetail" endpoint of the "stream" service.
func NewSourceVersionDetailResponseBody(res *stream.Version) *SourceVersionDetailResponseBody {
	body := &SourceVersionDetailResponseBody{
		Number:      res.Number,
		Hash:        res.Hash,
		Description: res.Description,
		At:          res.At,
	}
	if res.By != nil {
		body.By = marshalStreamByToByResponseBody(res.By)
	}
	return body
}

// NewRollbackSourceVersionResponseBody builds the HTTP response body from the
// result of the "RollbackSourceVersion" endpoint of the "stream" service.
func NewRollbackSourceVersionResponseBody(res *stream.Task) *RollbackSourceVersionResponseBody {
	body := &RollbackSourceVersionResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewCreateSinkResponseBody builds the HTTP response body from the result of
// the "CreateSink" endpoint of the "stream" service.
func NewCreateSinkResponseBody(res *stream.Task) *CreateSinkResponseBody {
	body := &CreateSinkResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewGetSinkResponseBody builds the HTTP response body from the result of the
// "GetSink" endpoint of the "stream" service.
func NewGetSinkResponseBody(res *stream.Sink) *GetSinkResponseBody {
	body := &GetSinkResponseBody{
		ProjectID:   int(res.ProjectID),
		BranchID:    int(res.BranchID),
		SourceID:    string(res.SourceID),
		SinkID:      string(res.SinkID),
		Type:        string(res.Type),
		Name:        res.Name,
		Description: res.Description,
	}
	if res.Table != nil {
		body.Table = marshalStreamTableSinkToTableSinkResponseBody(res.Table)
	}
	if res.Version != nil {
		body.Version = marshalStreamVersionToVersionResponseBody(res.Version)
	}
	if res.Created != nil {
		body.Created = marshalStreamCreatedEntityToCreatedEntityResponseBody(res.Created)
	}
	if res.Deleted != nil {
		body.Deleted = marshalStreamDeletedEntityToDeletedEntityResponseBody(res.Deleted)
	}
	if res.Disabled != nil {
		body.Disabled = marshalStreamDisabledEntityToDisabledEntityResponseBody(res.Disabled)
	}
	return body
}

// NewGetSinkSettingsResponseBody builds the HTTP response body from the result
// of the "GetSinkSettings" endpoint of the "stream" service.
func NewGetSinkSettingsResponseBody(res *stream.SettingsResult) *GetSinkSettingsResponseBody {
	body := &GetSinkSettingsResponseBody{}
	if res.Settings != nil {
		body.Settings = make([]*SettingResultResponseBody, len(res.Settings))
		for i, val := range res.Settings {
			body.Settings[i] = marshalStreamSettingResultToSettingResultResponseBody(val)
		}
	}
	return body
}

// NewUpdateSinkSettingsResponseBody builds the HTTP response body from the
// result of the "UpdateSinkSettings" endpoint of the "stream" service.
func NewUpdateSinkSettingsResponseBody(res *stream.Task) *UpdateSinkSettingsResponseBody {
	body := &UpdateSinkSettingsResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewListSinksResponseBody builds the HTTP response body from the result of
// the "ListSinks" endpoint of the "stream" service.
func NewListSinksResponseBody(res *stream.SinksList) *ListSinksResponseBody {
	body := &ListSinksResponseBody{
		ProjectID: int(res.ProjectID),
		BranchID:  int(res.BranchID),
		SourceID:  string(res.SourceID),
	}
	if res.Page != nil {
		body.Page = marshalStreamPaginatedResponseToPaginatedResponseResponseBody(res.Page)
	}
	if res.Sinks != nil {
		body.Sinks = make([]*SinkResponseBody, len(res.Sinks))
		for i, val := range res.Sinks {
			body.Sinks[i] = marshalStreamSinkToSinkResponseBody(val)
		}
	} else {
		body.Sinks = []*SinkResponseBody{}
	}
	return body
}

// NewListDeletedSinksResponseBody builds the HTTP response body from the
// result of the "ListDeletedSinks" endpoint of the "stream" service.
func NewListDeletedSinksResponseBody(res *stream.SinksList) *ListDeletedSinksResponseBody {
	body := &ListDeletedSinksResponseBody{
		ProjectID: int(res.ProjectID),
		BranchID:  int(res.BranchID),
		SourceID:  string(res.SourceID),
	}
	if res.Page != nil {
		body.Page = marshalStreamPaginatedResponseToPaginatedResponseResponseBody(res.Page)
	}
	if res.Sinks != nil {
		body.Sinks = make([]*SinkResponseBody, len(res.Sinks))
		for i, val := range res.Sinks {
			body.Sinks[i] = marshalStreamSinkToSinkResponseBody(val)
		}
	} else {
		body.Sinks = []*SinkResponseBody{}
	}
	return body
}

// NewUpdateSinkResponseBody builds the HTTP response body from the result of
// the "UpdateSink" endpoint of the "stream" service.
func NewUpdateSinkResponseBody(res *stream.Task) *UpdateSinkResponseBody {
	body := &UpdateSinkResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewDeleteSinkResponseBody builds the HTTP response body from the result of
// the "DeleteSink" endpoint of the "stream" service.
func NewDeleteSinkResponseBody(res *stream.Task) *DeleteSinkResponseBody {
	body := &DeleteSinkResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewSinkStatisticsTotalResponseBody builds the HTTP response body from the
// result of the "SinkStatisticsTotal" endpoint of the "stream" service.
func NewSinkStatisticsTotalResponseBody(res *stream.SinkStatisticsTotalResult) *SinkStatisticsTotalResponseBody {
	body := &SinkStatisticsTotalResponseBody{}
	if res.Total != nil {
		body.Total = marshalStreamLevelToLevelResponseBody(res.Total)
	}
	if res.Levels != nil {
		body.Levels = marshalStreamLevelsToLevelsResponseBody(res.Levels)
	}
	return body
}

// NewSinkStatisticsFilesResponseBody builds the HTTP response body from the
// result of the "SinkStatisticsFiles" endpoint of the "stream" service.
func NewSinkStatisticsFilesResponseBody(res *stream.SinkStatisticsFilesResult) *SinkStatisticsFilesResponseBody {
	body := &SinkStatisticsFilesResponseBody{}
	if res.Files != nil {
		body.Files = make([]*SinkFileResponseBody, len(res.Files))
		for i, val := range res.Files {
			body.Files[i] = marshalStreamSinkFileToSinkFileResponseBody(val)
		}
	} else {
		body.Files = []*SinkFileResponseBody{}
	}
	return body
}

// NewDisableSinkResponseBody builds the HTTP response body from the result of
// the "DisableSink" endpoint of the "stream" service.
func NewDisableSinkResponseBody(res *stream.Task) *DisableSinkResponseBody {
	body := &DisableSinkResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewEnableSinkResponseBody builds the HTTP response body from the result of
// the "EnableSink" endpoint of the "stream" service.
func NewEnableSinkResponseBody(res *stream.Task) *EnableSinkResponseBody {
	body := &EnableSinkResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewUndeleteSinkResponseBody builds the HTTP response body from the result of
// the "UndeleteSink" endpoint of the "stream" service.
func NewUndeleteSinkResponseBody(res *stream.Task) *UndeleteSinkResponseBody {
	body := &UndeleteSinkResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewListSinkVersionsResponseBody builds the HTTP response body from the
// result of the "ListSinkVersions" endpoint of the "stream" service.
func NewListSinkVersionsResponseBody(res *stream.EntityVersions) *ListSinkVersionsResponseBody {
	body := &ListSinkVersionsResponseBody{}
	if res.Versions != nil {
		body.Versions = make([]*VersionResponseBody, len(res.Versions))
		for i, val := range res.Versions {
			body.Versions[i] = marshalStreamVersionToVersionResponseBody(val)
		}
	} else {
		body.Versions = []*VersionResponseBody{}
	}
	if res.Page != nil {
		body.Page = marshalStreamPaginatedResponseToPaginatedResponseResponseBody(res.Page)
	}
	return body
}

// NewSinkVersionDetailResponseBody builds the HTTP response body from the
// result of the "SinkVersionDetail" endpoint of the "stream" service.
func NewSinkVersionDetailResponseBody(res *stream.Version) *SinkVersionDetailResponseBody {
	body := &SinkVersionDetailResponseBody{
		Number:      res.Number,
		Hash:        res.Hash,
		Description: res.Description,
		At:          res.At,
	}
	if res.By != nil {
		body.By = marshalStreamByToByResponseBody(res.By)
	}
	return body
}

// NewRollbackSinkVersionResponseBody builds the HTTP response body from the
// result of the "RollbackSinkVersion" endpoint of the "stream" service.
func NewRollbackSinkVersionResponseBody(res *stream.Task) *RollbackSinkVersionResponseBody {
	body := &RollbackSinkVersionResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewGetTaskResponseBody builds the HTTP response body from the result of the
// "GetTask" endpoint of the "stream" service.
func NewGetTaskResponseBody(res *stream.Task) *GetTaskResponseBody {
	body := &GetTaskResponseBody{
		TaskID:     string(res.TaskID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewAggregationSourcesResponseBody builds the HTTP response body from the
// result of the "AggregationSources" endpoint of the "stream" service.
func NewAggregationSourcesResponseBody(res *stream.AggregatedSourcesResult) *AggregationSourcesResponseBody {
	body := &AggregationSourcesResponseBody{
		ProjectID: int(res.ProjectID),
		BranchID:  int(res.BranchID),
	}
	if res.Page != nil {
		body.Page = marshalStreamPaginatedResponseToPaginatedResponseResponseBody(res.Page)
	}
	if res.Sources != nil {
		body.Sources = make([]*AggregatedSourceResponseBody, len(res.Sources))
		for i, val := range res.Sources {
			body.Sources[i] = marshalStreamAggregatedSourceToAggregatedSourceResponseBody(val)
		}
	} else {
		body.Sources = []*AggregatedSourceResponseBody{}
	}
	return body
}

// NewCreateSourceStreamAPISourceAlreadyExistsResponseBody builds the HTTP
// response body from the result of the "CreateSource" endpoint of the "stream"
// service.
func NewCreateSourceStreamAPISourceAlreadyExistsResponseBody(res *stream.GenericError) *CreateSourceStreamAPISourceAlreadyExistsResponseBody {
	body := &CreateSourceStreamAPISourceAlreadyExistsResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateSourceStreamAPIResourceLimitReachedResponseBody builds the HTTP
// response body from the result of the "CreateSource" endpoint of the "stream"
// service.
func NewCreateSourceStreamAPIResourceLimitReachedResponseBody(res *stream.GenericError) *CreateSourceStreamAPIResourceLimitReachedResponseBody {
	body := &CreateSourceStreamAPIResourceLimitReachedResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSourceStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "UpdateSource" endpoint of the "stream" service.
func NewUpdateSourceStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *UpdateSourceStreamAPISourceNotFoundResponseBody {
	body := &UpdateSourceStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSourceStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "GetSource" endpoint of the "stream" service.
func NewGetSourceStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *GetSourceStreamAPISourceNotFoundResponseBody {
	body := &GetSourceStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteSourceStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "DeleteSource" endpoint of the "stream" service.
func NewDeleteSourceStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *DeleteSourceStreamAPISourceNotFoundResponseBody {
	body := &DeleteSourceStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSourceSettingsStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "GetSourceSettings" endpoint of the
// "stream" service.
func NewGetSourceSettingsStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *GetSourceSettingsStreamAPISourceNotFoundResponseBody {
	body := &GetSourceSettingsStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSourceSettingsStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "UpdateSourceSettings" endpoint of the
// "stream" service.
func NewUpdateSourceSettingsStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *UpdateSourceSettingsStreamAPISourceNotFoundResponseBody {
	body := &UpdateSourceSettingsStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSourceSettingsStreamAPIForbiddenResponseBody builds the HTTP
// response body from the result of the "UpdateSourceSettings" endpoint of the
// "stream" service.
func NewUpdateSourceSettingsStreamAPIForbiddenResponseBody(res *stream.GenericError) *UpdateSourceSettingsStreamAPIForbiddenResponseBody {
	body := &UpdateSourceSettingsStreamAPIForbiddenResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewTestSourceStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "TestSource" endpoint of the "stream" service.
func NewTestSourceStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *TestSourceStreamAPISourceNotFoundResponseBody {
	body := &TestSourceStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewTestSourceStreamAPIInvalidColumnValueResponseBody builds the HTTP
// response body from the result of the "TestSource" endpoint of the "stream"
// service.
func NewTestSourceStreamAPIInvalidColumnValueResponseBody(res *stream.GenericError) *TestSourceStreamAPIInvalidColumnValueResponseBody {
	body := &TestSourceStreamAPIInvalidColumnValueResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSourceStatisticsClearStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "SourceStatisticsClear" endpoint of the
// "stream" service.
func NewSourceStatisticsClearStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *SourceStatisticsClearStreamAPISourceNotFoundResponseBody {
	body := &SourceStatisticsClearStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDisableSourceStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "DisableSource" endpoint of the "stream" service.
func NewDisableSourceStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *DisableSourceStreamAPISourceNotFoundResponseBody {
	body := &DisableSourceStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewEnableSourceStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "EnableSource" endpoint of the "stream" service.
func NewEnableSourceStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *EnableSourceStreamAPISourceNotFoundResponseBody {
	body := &EnableSourceStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUndeleteSourceStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "UndeleteSource" endpoint of the
// "stream" service.
func NewUndeleteSourceStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *UndeleteSourceStreamAPISourceNotFoundResponseBody {
	body := &UndeleteSourceStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewListSourceVersionsStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "ListSourceVersions" endpoint of the
// "stream" service.
func NewListSourceVersionsStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *ListSourceVersionsStreamAPISourceNotFoundResponseBody {
	body := &ListSourceVersionsStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSourceVersionDetailStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "SourceVersionDetail" endpoint of the
// "stream" service.
func NewSourceVersionDetailStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *SourceVersionDetailStreamAPISourceNotFoundResponseBody {
	body := &SourceVersionDetailStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSourceVersionDetailStreamAPIVersionNotFoundResponseBody builds the HTTP
// response body from the result of the "SourceVersionDetail" endpoint of the
// "stream" service.
func NewSourceVersionDetailStreamAPIVersionNotFoundResponseBody(res *stream.GenericError) *SourceVersionDetailStreamAPIVersionNotFoundResponseBody {
	body := &SourceVersionDetailStreamAPIVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewRollbackSourceVersionStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "RollbackSourceVersion" endpoint of the
// "stream" service.
func NewRollbackSourceVersionStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *RollbackSourceVersionStreamAPISourceNotFoundResponseBody {
	body := &RollbackSourceVersionStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewRollbackSourceVersionStreamAPIVersionNotFoundResponseBody builds the HTTP
// response body from the result of the "RollbackSourceVersion" endpoint of the
// "stream" service.
func NewRollbackSourceVersionStreamAPIVersionNotFoundResponseBody(res *stream.GenericError) *RollbackSourceVersionStreamAPIVersionNotFoundResponseBody {
	body := &RollbackSourceVersionStreamAPIVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateSinkStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "CreateSink" endpoint of the "stream" service.
func NewCreateSinkStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *CreateSinkStreamAPISourceNotFoundResponseBody {
	body := &CreateSinkStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateSinkStreamAPISinkAlreadyExistsResponseBody builds the HTTP response
// body from the result of the "CreateSink" endpoint of the "stream" service.
func NewCreateSinkStreamAPISinkAlreadyExistsResponseBody(res *stream.GenericError) *CreateSinkStreamAPISinkAlreadyExistsResponseBody {
	body := &CreateSinkStreamAPISinkAlreadyExistsResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateSinkStreamAPIResourceLimitReachedResponseBody builds the HTTP
// response body from the result of the "CreateSink" endpoint of the "stream"
// service.
func NewCreateSinkStreamAPIResourceLimitReachedResponseBody(res *stream.GenericError) *CreateSinkStreamAPIResourceLimitReachedResponseBody {
	body := &CreateSinkStreamAPIResourceLimitReachedResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSinkStreamAPISourceNotFoundResponseBody builds the HTTP response body
// from the result of the "GetSink" endpoint of the "stream" service.
func NewGetSinkStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *GetSinkStreamAPISourceNotFoundResponseBody {
	body := &GetSinkStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSinkStreamAPISinkNotFoundResponseBody builds the HTTP response body
// from the result of the "GetSink" endpoint of the "stream" service.
func NewGetSinkStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *GetSinkStreamAPISinkNotFoundResponseBody {
	body := &GetSinkStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSinkSettingsStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "GetSinkSettings" endpoint of the
// "stream" service.
func NewGetSinkSettingsStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *GetSinkSettingsStreamAPISourceNotFoundResponseBody {
	body := &GetSinkSettingsStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSinkSettingsStreamAPISinkNotFoundResponseBody builds the HTTP response
// body from the result of the "GetSinkSettings" endpoint of the "stream"
// service.
func NewGetSinkSettingsStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *GetSinkSettingsStreamAPISinkNotFoundResponseBody {
	body := &GetSinkSettingsStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSinkSettingsStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "UpdateSinkSettings" endpoint of the
// "stream" service.
func NewUpdateSinkSettingsStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *UpdateSinkSettingsStreamAPISourceNotFoundResponseBody {
	body := &UpdateSinkSettingsStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSinkSettingsStreamAPISinkNotFoundResponseBody builds the HTTP
// response body from the result of the "UpdateSinkSettings" endpoint of the
// "stream" service.
func NewUpdateSinkSettingsStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *UpdateSinkSettingsStreamAPISinkNotFoundResponseBody {
	body := &UpdateSinkSettingsStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSinkSettingsStreamAPIForbiddenResponseBody builds the HTTP response
// body from the result of the "UpdateSinkSettings" endpoint of the "stream"
// service.
func NewUpdateSinkSettingsStreamAPIForbiddenResponseBody(res *stream.GenericError) *UpdateSinkSettingsStreamAPIForbiddenResponseBody {
	body := &UpdateSinkSettingsStreamAPIForbiddenResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewListSinksStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "ListSinks" endpoint of the "stream" service.
func NewListSinksStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *ListSinksStreamAPISourceNotFoundResponseBody {
	body := &ListSinksStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewListDeletedSinksStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "ListDeletedSinks" endpoint of the
// "stream" service.
func NewListDeletedSinksStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *ListDeletedSinksStreamAPISourceNotFoundResponseBody {
	body := &ListDeletedSinksStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSinkStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "UpdateSink" endpoint of the "stream" service.
func NewUpdateSinkStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *UpdateSinkStreamAPISourceNotFoundResponseBody {
	body := &UpdateSinkStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSinkStreamAPISinkNotFoundResponseBody builds the HTTP response body
// from the result of the "UpdateSink" endpoint of the "stream" service.
func NewUpdateSinkStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *UpdateSinkStreamAPISinkNotFoundResponseBody {
	body := &UpdateSinkStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteSinkStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "DeleteSink" endpoint of the "stream" service.
func NewDeleteSinkStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *DeleteSinkStreamAPISourceNotFoundResponseBody {
	body := &DeleteSinkStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteSinkStreamAPISinkNotFoundResponseBody builds the HTTP response body
// from the result of the "DeleteSink" endpoint of the "stream" service.
func NewDeleteSinkStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *DeleteSinkStreamAPISinkNotFoundResponseBody {
	body := &DeleteSinkStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSinkStatisticsTotalStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "SinkStatisticsTotal" endpoint of the
// "stream" service.
func NewSinkStatisticsTotalStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *SinkStatisticsTotalStreamAPISourceNotFoundResponseBody {
	body := &SinkStatisticsTotalStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSinkStatisticsTotalStreamAPISinkNotFoundResponseBody builds the HTTP
// response body from the result of the "SinkStatisticsTotal" endpoint of the
// "stream" service.
func NewSinkStatisticsTotalStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *SinkStatisticsTotalStreamAPISinkNotFoundResponseBody {
	body := &SinkStatisticsTotalStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSinkStatisticsFilesStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "SinkStatisticsFiles" endpoint of the
// "stream" service.
func NewSinkStatisticsFilesStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *SinkStatisticsFilesStreamAPISourceNotFoundResponseBody {
	body := &SinkStatisticsFilesStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSinkStatisticsFilesStreamAPISinkNotFoundResponseBody builds the HTTP
// response body from the result of the "SinkStatisticsFiles" endpoint of the
// "stream" service.
func NewSinkStatisticsFilesStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *SinkStatisticsFilesStreamAPISinkNotFoundResponseBody {
	body := &SinkStatisticsFilesStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSinkStatisticsClearStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "SinkStatisticsClear" endpoint of the
// "stream" service.
func NewSinkStatisticsClearStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *SinkStatisticsClearStreamAPISourceNotFoundResponseBody {
	body := &SinkStatisticsClearStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSinkStatisticsClearStreamAPISinkNotFoundResponseBody builds the HTTP
// response body from the result of the "SinkStatisticsClear" endpoint of the
// "stream" service.
func NewSinkStatisticsClearStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *SinkStatisticsClearStreamAPISinkNotFoundResponseBody {
	body := &SinkStatisticsClearStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDisableSinkStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "DisableSink" endpoint of the "stream" service.
func NewDisableSinkStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *DisableSinkStreamAPISourceNotFoundResponseBody {
	body := &DisableSinkStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDisableSinkStreamAPISinkNotFoundResponseBody builds the HTTP response
// body from the result of the "DisableSink" endpoint of the "stream" service.
func NewDisableSinkStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *DisableSinkStreamAPISinkNotFoundResponseBody {
	body := &DisableSinkStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewEnableSinkStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "EnableSink" endpoint of the "stream" service.
func NewEnableSinkStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *EnableSinkStreamAPISourceNotFoundResponseBody {
	body := &EnableSinkStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewEnableSinkStreamAPISinkNotFoundResponseBody builds the HTTP response body
// from the result of the "EnableSink" endpoint of the "stream" service.
func NewEnableSinkStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *EnableSinkStreamAPISinkNotFoundResponseBody {
	body := &EnableSinkStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUndeleteSinkStreamAPISourceNotFoundResponseBody builds the HTTP response
// body from the result of the "UndeleteSink" endpoint of the "stream" service.
func NewUndeleteSinkStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *UndeleteSinkStreamAPISourceNotFoundResponseBody {
	body := &UndeleteSinkStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUndeleteSinkStreamAPISinkNotFoundResponseBody builds the HTTP response
// body from the result of the "UndeleteSink" endpoint of the "stream" service.
func NewUndeleteSinkStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *UndeleteSinkStreamAPISinkNotFoundResponseBody {
	body := &UndeleteSinkStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewListSinkVersionsStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "ListSinkVersions" endpoint of the
// "stream" service.
func NewListSinkVersionsStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *ListSinkVersionsStreamAPISourceNotFoundResponseBody {
	body := &ListSinkVersionsStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewListSinkVersionsStreamAPISinkNotFoundResponseBody builds the HTTP
// response body from the result of the "ListSinkVersions" endpoint of the
// "stream" service.
func NewListSinkVersionsStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *ListSinkVersionsStreamAPISinkNotFoundResponseBody {
	body := &ListSinkVersionsStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSinkVersionDetailStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "SinkVersionDetail" endpoint of the
// "stream" service.
func NewSinkVersionDetailStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *SinkVersionDetailStreamAPISourceNotFoundResponseBody {
	body := &SinkVersionDetailStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSinkVersionDetailStreamAPISinkNotFoundResponseBody builds the HTTP
// response body from the result of the "SinkVersionDetail" endpoint of the
// "stream" service.
func NewSinkVersionDetailStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *SinkVersionDetailStreamAPISinkNotFoundResponseBody {
	body := &SinkVersionDetailStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewSinkVersionDetailStreamAPIVersionNotFoundResponseBody builds the HTTP
// response body from the result of the "SinkVersionDetail" endpoint of the
// "stream" service.
func NewSinkVersionDetailStreamAPIVersionNotFoundResponseBody(res *stream.GenericError) *SinkVersionDetailStreamAPIVersionNotFoundResponseBody {
	body := &SinkVersionDetailStreamAPIVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewRollbackSinkVersionStreamAPISourceNotFoundResponseBody builds the HTTP
// response body from the result of the "RollbackSinkVersion" endpoint of the
// "stream" service.
func NewRollbackSinkVersionStreamAPISourceNotFoundResponseBody(res *stream.GenericError) *RollbackSinkVersionStreamAPISourceNotFoundResponseBody {
	body := &RollbackSinkVersionStreamAPISourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewRollbackSinkVersionStreamAPISinkNotFoundResponseBody builds the HTTP
// response body from the result of the "RollbackSinkVersion" endpoint of the
// "stream" service.
func NewRollbackSinkVersionStreamAPISinkNotFoundResponseBody(res *stream.GenericError) *RollbackSinkVersionStreamAPISinkNotFoundResponseBody {
	body := &RollbackSinkVersionStreamAPISinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewRollbackSinkVersionStreamAPIVersionNotFoundResponseBody builds the HTTP
// response body from the result of the "RollbackSinkVersion" endpoint of the
// "stream" service.
func NewRollbackSinkVersionStreamAPIVersionNotFoundResponseBody(res *stream.GenericError) *RollbackSinkVersionStreamAPIVersionNotFoundResponseBody {
	body := &RollbackSinkVersionStreamAPIVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetTaskStreamAPITaskNotFoundResponseBody builds the HTTP response body
// from the result of the "GetTask" endpoint of the "stream" service.
func NewGetTaskStreamAPITaskNotFoundResponseBody(res *stream.GenericError) *GetTaskStreamAPITaskNotFoundResponseBody {
	body := &GetTaskStreamAPITaskNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateSourcePayload builds a stream service CreateSource endpoint payload.
func NewCreateSourcePayload(body *CreateSourceRequestBody, branchID string, storageAPIToken string) *stream.CreateSourcePayload {
	v := &stream.CreateSourcePayload{
		Type:        stream.SourceType(*body.Type),
		Name:        *body.Name,
		Description: body.Description,
	}
	if body.SourceID != nil {
		sourceID := stream.SourceID(*body.SourceID)
		v.SourceID = &sourceID
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateSourcePayload builds a stream service UpdateSource endpoint payload.
func NewUpdateSourcePayload(body *UpdateSourceRequestBody, branchID string, sourceID string, storageAPIToken string) *stream.UpdateSourcePayload {
	v := &stream.UpdateSourcePayload{
		ChangeDescription: body.ChangeDescription,
		Name:              body.Name,
		Description:       body.Description,
	}
	if body.Type != nil {
		type_ := stream.SourceType(*body.Type)
		v.Type = &type_
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewListSourcesPayload builds a stream service ListSources endpoint payload.
func NewListSourcesPayload(branchID string, afterID string, limit int, storageAPIToken string) *stream.ListSourcesPayload {
	v := &stream.ListSourcesPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.AfterID = afterID
	v.Limit = limit
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewListDeletedSourcesPayload builds a stream service ListDeletedSources
// endpoint payload.
func NewListDeletedSourcesPayload(branchID string, afterID string, limit int, storageAPIToken string) *stream.ListDeletedSourcesPayload {
	v := &stream.ListDeletedSourcesPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.AfterID = afterID
	v.Limit = limit
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetSourcePayload builds a stream service GetSource endpoint payload.
func NewGetSourcePayload(branchID string, sourceID string, storageAPIToken string) *stream.GetSourcePayload {
	v := &stream.GetSourcePayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewDeleteSourcePayload builds a stream service DeleteSource endpoint payload.
func NewDeleteSourcePayload(branchID string, sourceID string, storageAPIToken string) *stream.DeleteSourcePayload {
	v := &stream.DeleteSourcePayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetSourceSettingsPayload builds a stream service GetSourceSettings
// endpoint payload.
func NewGetSourceSettingsPayload(branchID string, sourceID string, storageAPIToken string) *stream.GetSourceSettingsPayload {
	v := &stream.GetSourceSettingsPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateSourceSettingsPayload builds a stream service UpdateSourceSettings
// endpoint payload.
func NewUpdateSourceSettingsPayload(body *UpdateSourceSettingsRequestBody, branchID string, sourceID string, storageAPIToken string) *stream.UpdateSourceSettingsPayload {
	v := &stream.UpdateSourceSettingsPayload{
		ChangeDescription: body.ChangeDescription,
	}
	if body.Settings != nil {
		v.Settings = make([]*stream.SettingPatch, len(body.Settings))
		for i, val := range body.Settings {
			v.Settings[i] = unmarshalSettingPatchRequestBodyToStreamSettingPatch(val)
		}
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewTestSourcePayload builds a stream service TestSource endpoint payload.
func NewTestSourcePayload(branchID string, sourceID string, storageAPIToken string) *stream.TestSourcePayload {
	v := &stream.TestSourcePayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewSourceStatisticsClearPayload builds a stream service
// SourceStatisticsClear endpoint payload.
func NewSourceStatisticsClearPayload(branchID string, sourceID string, storageAPIToken string) *stream.SourceStatisticsClearPayload {
	v := &stream.SourceStatisticsClearPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewDisableSourcePayload builds a stream service DisableSource endpoint
// payload.
func NewDisableSourcePayload(branchID string, sourceID string, storageAPIToken string) *stream.DisableSourcePayload {
	v := &stream.DisableSourcePayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewEnableSourcePayload builds a stream service EnableSource endpoint payload.
func NewEnableSourcePayload(branchID string, sourceID string, storageAPIToken string) *stream.EnableSourcePayload {
	v := &stream.EnableSourcePayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUndeleteSourcePayload builds a stream service UndeleteSource endpoint
// payload.
func NewUndeleteSourcePayload(branchID string, sourceID string, storageAPIToken string) *stream.UndeleteSourcePayload {
	v := &stream.UndeleteSourcePayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewListSourceVersionsPayload builds a stream service ListSourceVersions
// endpoint payload.
func NewListSourceVersionsPayload(branchID string, sourceID string, afterID string, limit int, storageAPIToken string) *stream.ListSourceVersionsPayload {
	v := &stream.ListSourceVersionsPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.AfterID = afterID
	v.Limit = limit
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewSourceVersionDetailPayload builds a stream service SourceVersionDetail
// endpoint payload.
func NewSourceVersionDetailPayload(branchID string, sourceID string, versionNumber definition.VersionNumber, storageAPIToken string) *stream.SourceVersionDetailPayload {
	v := &stream.SourceVersionDetailPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.VersionNumber = versionNumber
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewRollbackSourceVersionPayload builds a stream service
// RollbackSourceVersion endpoint payload.
func NewRollbackSourceVersionPayload(branchID string, sourceID string, versionNumber definition.VersionNumber, storageAPIToken string) *stream.RollbackSourceVersionPayload {
	v := &stream.RollbackSourceVersionPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.VersionNumber = versionNumber
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewCreateSinkPayload builds a stream service CreateSink endpoint payload.
func NewCreateSinkPayload(body *CreateSinkRequestBody, branchID string, sourceID string, storageAPIToken string) *stream.CreateSinkPayload {
	v := &stream.CreateSinkPayload{
		Type:        stream.SinkType(*body.Type),
		Name:        *body.Name,
		Description: body.Description,
	}
	if body.SinkID != nil {
		sinkID := stream.SinkID(*body.SinkID)
		v.SinkID = &sinkID
	}
	if body.Table != nil {
		v.Table = unmarshalTableSinkCreateRequestBodyToStreamTableSinkCreate(body.Table)
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetSinkPayload builds a stream service GetSink endpoint payload.
func NewGetSinkPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.GetSinkPayload {
	v := &stream.GetSinkPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetSinkSettingsPayload builds a stream service GetSinkSettings endpoint
// payload.
func NewGetSinkSettingsPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.GetSinkSettingsPayload {
	v := &stream.GetSinkSettingsPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateSinkSettingsPayload builds a stream service UpdateSinkSettings
// endpoint payload.
func NewUpdateSinkSettingsPayload(body *UpdateSinkSettingsRequestBody, branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.UpdateSinkSettingsPayload {
	v := &stream.UpdateSinkSettingsPayload{
		ChangeDescription: body.ChangeDescription,
	}
	if body.Settings != nil {
		v.Settings = make([]*stream.SettingPatch, len(body.Settings))
		for i, val := range body.Settings {
			v.Settings[i] = unmarshalSettingPatchRequestBodyToStreamSettingPatch(val)
		}
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewListSinksPayload builds a stream service ListSinks endpoint payload.
func NewListSinksPayload(branchID string, sourceID string, afterID string, limit int, storageAPIToken string) *stream.ListSinksPayload {
	v := &stream.ListSinksPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.AfterID = afterID
	v.Limit = limit
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewListDeletedSinksPayload builds a stream service ListDeletedSinks endpoint
// payload.
func NewListDeletedSinksPayload(branchID string, sourceID string, afterID string, limit int, storageAPIToken string) *stream.ListDeletedSinksPayload {
	v := &stream.ListDeletedSinksPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.AfterID = afterID
	v.Limit = limit
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateSinkPayload builds a stream service UpdateSink endpoint payload.
func NewUpdateSinkPayload(body *UpdateSinkRequestBody, branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.UpdateSinkPayload {
	v := &stream.UpdateSinkPayload{
		ChangeDescription: body.ChangeDescription,
		Name:              body.Name,
		Description:       body.Description,
	}
	if body.Type != nil {
		type_ := stream.SinkType(*body.Type)
		v.Type = &type_
	}
	if body.Table != nil {
		v.Table = unmarshalTableSinkUpdateRequestBodyToStreamTableSinkUpdate(body.Table)
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewDeleteSinkPayload builds a stream service DeleteSink endpoint payload.
func NewDeleteSinkPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.DeleteSinkPayload {
	v := &stream.DeleteSinkPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewSinkStatisticsTotalPayload builds a stream service SinkStatisticsTotal
// endpoint payload.
func NewSinkStatisticsTotalPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.SinkStatisticsTotalPayload {
	v := &stream.SinkStatisticsTotalPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewSinkStatisticsFilesPayload builds a stream service SinkStatisticsFiles
// endpoint payload.
func NewSinkStatisticsFilesPayload(branchID string, sourceID string, sinkID string, failedFiles bool, storageAPIToken string) *stream.SinkStatisticsFilesPayload {
	v := &stream.SinkStatisticsFilesPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.FailedFiles = failedFiles
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewSinkStatisticsClearPayload builds a stream service SinkStatisticsClear
// endpoint payload.
func NewSinkStatisticsClearPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.SinkStatisticsClearPayload {
	v := &stream.SinkStatisticsClearPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewDisableSinkPayload builds a stream service DisableSink endpoint payload.
func NewDisableSinkPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.DisableSinkPayload {
	v := &stream.DisableSinkPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewEnableSinkPayload builds a stream service EnableSink endpoint payload.
func NewEnableSinkPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.EnableSinkPayload {
	v := &stream.EnableSinkPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUndeleteSinkPayload builds a stream service UndeleteSink endpoint payload.
func NewUndeleteSinkPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.UndeleteSinkPayload {
	v := &stream.UndeleteSinkPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewListSinkVersionsPayload builds a stream service ListSinkVersions endpoint
// payload.
func NewListSinkVersionsPayload(branchID string, sourceID string, sinkID string, afterID string, limit int, storageAPIToken string) *stream.ListSinkVersionsPayload {
	v := &stream.ListSinkVersionsPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.AfterID = afterID
	v.Limit = limit
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewSinkVersionDetailPayload builds a stream service SinkVersionDetail
// endpoint payload.
func NewSinkVersionDetailPayload(branchID string, sourceID string, sinkID string, versionNumber definition.VersionNumber, storageAPIToken string) *stream.SinkVersionDetailPayload {
	v := &stream.SinkVersionDetailPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.VersionNumber = versionNumber
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewRollbackSinkVersionPayload builds a stream service RollbackSinkVersion
// endpoint payload.
func NewRollbackSinkVersionPayload(branchID string, sourceID string, sinkID string, versionNumber definition.VersionNumber, storageAPIToken string) *stream.RollbackSinkVersionPayload {
	v := &stream.RollbackSinkVersionPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.VersionNumber = versionNumber
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetTaskPayload builds a stream service GetTask endpoint payload.
func NewGetTaskPayload(taskID string, storageAPIToken string) *stream.GetTaskPayload {
	v := &stream.GetTaskPayload{}
	v.TaskID = stream.TaskID(taskID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewAggregationSourcesPayload builds a stream service AggregationSources
// endpoint payload.
func NewAggregationSourcesPayload(branchID string, afterID string, limit int, storageAPIToken string) *stream.AggregationSourcesPayload {
	v := &stream.AggregationSourcesPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.AfterID = afterID
	v.Limit = limit
	v.StorageAPIToken = storageAPIToken

	return v
}

// ValidateCreateSourceRequestBody runs the validations defined on
// CreateSourceRequestBody
func ValidateCreateSourceRequestBody(body *CreateSourceRequestBody, errContext []string) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 1, true))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 48, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "http") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"http"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	return
}

// ValidateUpdateSourceRequestBody runs the validations defined on
// UpdateSourceRequestBody
func ValidateUpdateSourceRequestBody(body *UpdateSourceRequestBody, errContext []string) (err error) {
	if body.Type != nil {
		if !(*body.Type == "http") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"http"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	return
}

// ValidateUpdateSourceSettingsRequestBody runs the validations defined on
// UpdateSourceSettingsRequestBody
func ValidateUpdateSourceSettingsRequestBody(body *UpdateSourceSettingsRequestBody, errContext []string) (err error) {
	for _, e := range body.Settings {
		if e != nil {
			if err2 := ValidateSettingPatchRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateSinkRequestBody runs the validations defined on
// CreateSinkRequestBody
func ValidateCreateSinkRequestBody(body *CreateSinkRequestBody, errContext []string) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.SinkID != nil {
		if utf8.RuneCountInString(*body.SinkID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sinkId", *body.SinkID, utf8.RuneCountInString(*body.SinkID), 1, true))
		}
	}
	if body.SinkID != nil {
		if utf8.RuneCountInString(*body.SinkID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sinkId", *body.SinkID, utf8.RuneCountInString(*body.SinkID), 48, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "table") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"table"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	if body.Table != nil {
		if err2 := ValidateTableSinkCreateRequestBody(body.Table); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateSinkSettingsRequestBody runs the validations defined on
// UpdateSinkSettingsRequestBody
func ValidateUpdateSinkSettingsRequestBody(body *UpdateSinkSettingsRequestBody, errContext []string) (err error) {
	for _, e := range body.Settings {
		if e != nil {
			if err2 := ValidateSettingPatchRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateSinkRequestBody runs the validations defined on
// UpdateSinkRequestBody
func ValidateUpdateSinkRequestBody(body *UpdateSinkRequestBody, errContext []string) (err error) {
	if body.Type != nil {
		if !(*body.Type == "table") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"table"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	if body.Table != nil {
		if err2 := ValidateTableSinkUpdateRequestBody(body.Table); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSettingPatchRequestBody runs the validations defined on
// SettingPatchRequestBody
func ValidateSettingPatchRequestBody(body *SettingPatchRequestBody, errContext []string) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.Key != nil {
		if utf8.RuneCountInString(*body.Key) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.key", *body.Key, utf8.RuneCountInString(*body.Key), 1, true))
		}
	}
	return
}

// ValidateTableSinkCreateRequestBody runs the validations defined on
// TableSinkCreateRequestBody
func ValidateTableSinkCreateRequestBody(body *TableSinkCreateRequestBody, errContext []string) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.TableID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tableId", "body"))
	}
	if body.Mapping == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mapping", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "keboola") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"keboola"}))
		}
	}
	if body.Mapping != nil {
		if err2 := ValidateTableMappingRequestBody(body.Mapping); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTableMappingRequestBody runs the validations defined on
// TableMappingRequestBody
func ValidateTableMappingRequestBody(body *TableMappingRequestBody, errContext []string) (err error) {
	if body.Columns == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("columns", "body"))
	}
	if len(body.Columns) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.columns", body.Columns, len(body.Columns), 1, true))
	}
	if len(body.Columns) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.columns", body.Columns, len(body.Columns), 100, false))
	}
	for _, e := range body.Columns {
		if e != nil {
			if err2 := ValidateTableColumnRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTableColumnRequestBody runs the validations defined on
// TableColumnRequestBody
func ValidateTableColumnRequestBody(body *TableColumnRequestBody, errContext []string) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "uuid" || *body.Type == "datetime" || *body.Type == "ip" || *body.Type == "body" || *body.Type == "headers" || *body.Type == "path" || *body.Type == "template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"uuid", "datetime", "ip", "body", "headers", "path", "template"}))
		}
	}
	if body.Template != nil {
		if err2 := ValidateTableColumnTemplateRequestBody(body.Template); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTableColumnTemplateRequestBody runs the validations defined on
// TableColumnTemplateRequestBody
func ValidateTableColumnTemplateRequestBody(body *TableColumnTemplateRequestBody, errContext []string) (err error) {
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Language != nil {
		if !(*body.Language == "jsonnet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.language", *body.Language, []any{"jsonnet"}))
		}
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.content", *body.Content, utf8.RuneCountInString(*body.Content), 1, true))
		}
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.content", *body.Content, utf8.RuneCountInString(*body.Content), 4096, false))
		}
	}
	return
}

// ValidateTableSinkUpdateRequestBody runs the validations defined on
// TableSinkUpdateRequestBody
func ValidateTableSinkUpdateRequestBody(body *TableSinkUpdateRequestBody, errContext []string) (err error) {
	if body.Type != nil {
		if !(*body.Type == "keboola") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"keboola"}))
		}
	}
	if body.Mapping != nil {
		if err2 := ValidateTableMappingRequestBody(body.Mapping); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
