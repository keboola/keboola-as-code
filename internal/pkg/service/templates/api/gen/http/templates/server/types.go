// Code generated by goa v3.11.3, DO NOT EDIT.
//
// templates HTTP server types
//
// Command:
// $ goa gen github.com/keboola/keboola-as-code/api/templates --output
// ./internal/pkg/service/templates/api

package server

import (
	"unicode/utf8"

	templates "github.com/keboola/keboola-as-code/internal/pkg/service/templates/api/gen/templates"
	goa "goa.design/goa/v3/pkg"
)

// ValidateInputsRequestBody is the type of the "templates" service
// "ValidateInputs" endpoint HTTP request body.
type ValidateInputsRequestBody struct {
	// Steps with input values filled in by user.
	Steps []*StepPayloadRequestBody `form:"steps,omitempty" json:"steps,omitempty" xml:"steps,omitempty"`
}

// UseTemplateVersionRequestBody is the type of the "templates" service
// "UseTemplateVersion" endpoint HTTP request body.
type UseTemplateVersionRequestBody struct {
	// Name of the new template instance.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID of the branch. Use "default" for default branch.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty" xml:"branch,omitempty"`
	// Steps with input values filled in by user.
	Steps []*StepPayloadRequestBody `form:"steps,omitempty" json:"steps,omitempty" xml:"steps,omitempty"`
}

// UpdateInstanceRequestBody is the type of the "templates" service
// "UpdateInstance" endpoint HTTP request body.
type UpdateInstanceRequestBody struct {
	// New name of the instance.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UpgradeInstanceRequestBody is the type of the "templates" service
// "UpgradeInstance" endpoint HTTP request body.
type UpgradeInstanceRequestBody struct {
	// Steps with input values filled in by user.
	Steps []*StepPayloadRequestBody `form:"steps,omitempty" json:"steps,omitempty" xml:"steps,omitempty"`
}

// UpgradeInstanceValidateInputsRequestBody is the type of the "templates"
// service "UpgradeInstanceValidateInputs" endpoint HTTP request body.
type UpgradeInstanceValidateInputsRequestBody struct {
	// Steps with input values filled in by user.
	Steps []*StepPayloadRequestBody `form:"steps,omitempty" json:"steps,omitempty" xml:"steps,omitempty"`
}

// APIVersionIndexResponseBody is the type of the "templates" service
// "ApiVersionIndex" endpoint HTTP response body.
type APIVersionIndexResponseBody struct {
	// Name of the API
	API string `form:"api" json:"api" xml:"api"`
	// URL of the API documentation.
	Documentation string `form:"documentation" json:"documentation" xml:"documentation"`
}

// RepositoriesIndexResponseBody is the type of the "templates" service
// "RepositoriesIndex" endpoint HTTP response body.
type RepositoriesIndexResponseBody struct {
	// All template repositories defined in the project.
	Repositories []*RepositoryResponseBody `form:"repositories" json:"repositories" xml:"repositories"`
}

// RepositoryIndexResponseBody is the type of the "templates" service
// "RepositoryIndex" endpoint HTTP response body.
type RepositoryIndexResponseBody struct {
	// Template repository name. Use "keboola" for default Keboola repository.
	Name string `form:"name" json:"name" xml:"name"`
	// Git URL to the repository.
	URL string `form:"url" json:"url" xml:"url"`
	// Git branch or tag.
	Ref    string              `form:"ref" json:"ref" xml:"ref"`
	Author *AuthorResponseBody `form:"author" json:"author" xml:"author"`
}

// TemplatesIndexResponseBody is the type of the "templates" service
// "TemplatesIndex" endpoint HTTP response body.
type TemplatesIndexResponseBody struct {
	// Information about the repository.
	Repository *RepositoryResponseBody `form:"repository" json:"repository" xml:"repository"`
	// All template defined in the repository.
	Templates []*TemplateResponseBody `form:"templates" json:"templates" xml:"templates"`
}

// TemplateIndexResponseBody is the type of the "templates" service
// "TemplateIndex" endpoint HTTP response body.
type TemplateIndexResponseBody struct {
	// Information about the repository.
	Repository *RepositoryResponseBody `form:"repository" json:"repository" xml:"repository"`
	// Template ID.
	ID string `form:"id" json:"id" xml:"id"`
	// Template name.
	Name string `form:"name" json:"name" xml:"name"`
	// List of categories the template belongs to.
	Categories []string `form:"categories" json:"categories" xml:"categories"`
	// List of components used in the template.
	Components []string            `form:"components" json:"components" xml:"components"`
	Author     *AuthorResponseBody `form:"author" json:"author" xml:"author"`
	// Short description of the template.
	Description string `form:"description" json:"description" xml:"description"`
	// Recommended version of the template.
	DefaultVersion string `form:"defaultVersion" json:"defaultVersion" xml:"defaultVersion"`
	// All available versions of the template.
	Versions []*VersionResponseBody `form:"versions" json:"versions" xml:"versions"`
}

// VersionIndexResponseBody is the type of the "templates" service
// "VersionIndex" endpoint HTTP response body.
type VersionIndexResponseBody struct {
	// Information about the repository.
	Repository *RepositoryResponseBody `form:"repository" json:"repository" xml:"repository"`
	// Information about the template.
	Template *TemplateResponseBody `form:"template" json:"template" xml:"template"`
	// List of components used in the template version.
	Components []string `form:"components" json:"components" xml:"components"`
	// Extended description of the template in Markdown format.
	LongDescription string `form:"longDescription" json:"longDescription" xml:"longDescription"`
	// Readme of the template version in Markdown format.
	Readme string `form:"readme" json:"readme" xml:"readme"`
	// Semantic version.
	Version string `form:"version" json:"version" xml:"version"`
	// If true, then the version is ready for production use.
	Stable bool `form:"stable" json:"stable" xml:"stable"`
	// Optional short description of the version. Can be empty.
	Description string `form:"description" json:"description" xml:"description"`
}

// InputsIndexResponseBody is the type of the "templates" service "InputsIndex"
// endpoint HTTP response body.
type InputsIndexResponseBody struct {
	// List of the step groups.
	StepGroups []*StepGroupResponseBody `form:"stepGroups" json:"stepGroups" xml:"stepGroups"`
	// Initial state - same structure as the validation result.
	InitialState *ValidationResultResponseBody `form:"initialState" json:"initialState" xml:"initialState"`
}

// ValidateInputsResponseBody is the type of the "templates" service
// "ValidateInputs" endpoint HTTP response body.
type ValidateInputsResponseBody struct {
	// True if all groups and inputs are valid.
	Valid bool `form:"valid" json:"valid" xml:"valid"`
	// List of Details for the step groups.
	StepGroups []*StepGroupValidationResultResponseBody `form:"stepGroups" json:"stepGroups" xml:"stepGroups"`
}

// UseTemplateVersionResponseBody is the type of the "templates" service
// "UseTemplateVersion" endpoint HTTP response body.
type UseTemplateVersionResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64  `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
}

// InstancesIndexResponseBody is the type of the "templates" service
// "InstancesIndex" endpoint HTTP response body.
type InstancesIndexResponseBody struct {
	// All instances found in branch.
	Instances []*InstanceResponseBody `form:"instances" json:"instances" xml:"instances"`
}

// InstanceIndexResponseBody is the type of the "templates" service
// "InstanceIndex" endpoint HTTP response body.
type InstanceIndexResponseBody struct {
	// Information about the template version. Can be null if the repository or
	// template no longer exists. If the exact version is not found, the nearest
	// one is used.
	VersionDetail *VersionDetailResponseBody `form:"versionDetail,omitempty" json:"versionDetail,omitempty" xml:"versionDetail,omitempty"`
	// All configurations from the instance.
	Configurations []*ConfigResponseBody `form:"configurations" json:"configurations" xml:"configurations"`
	// ID of the template.
	TemplateID string `form:"templateId" json:"templateId" xml:"templateId"`
	// ID of the template instance.
	InstanceID string `form:"instanceId" json:"instanceId" xml:"instanceId"`
	// ID of the branch.
	Branch string `form:"branch" json:"branch" xml:"branch"`
	// Name of the template repository.
	RepositoryName string `form:"repositoryName" json:"repositoryName" xml:"repositoryName"`
	// Semantic version of the template.
	Version string `form:"version" json:"version" xml:"version"`
	// Name of the instance.
	Name string `form:"name" json:"name" xml:"name"`
	// Instance creation date and token.
	Created *ChangeInfoResponseBody `form:"created" json:"created" xml:"created"`
	// Instance update date and token.
	Updated    *ChangeInfoResponseBody `form:"updated" json:"updated" xml:"updated"`
	MainConfig *MainConfigResponseBody `form:"mainConfig,omitempty" json:"mainConfig,omitempty" xml:"mainConfig,omitempty"`
}

// UpdateInstanceResponseBody is the type of the "templates" service
// "UpdateInstance" endpoint HTTP response body.
type UpdateInstanceResponseBody struct {
	// Information about the template version. Can be null if the repository or
	// template no longer exists. If the exact version is not found, the nearest
	// one is used.
	VersionDetail *VersionDetailResponseBody `form:"versionDetail,omitempty" json:"versionDetail,omitempty" xml:"versionDetail,omitempty"`
	// All configurations from the instance.
	Configurations []*ConfigResponseBody `form:"configurations" json:"configurations" xml:"configurations"`
	// ID of the template.
	TemplateID string `form:"templateId" json:"templateId" xml:"templateId"`
	// ID of the template instance.
	InstanceID string `form:"instanceId" json:"instanceId" xml:"instanceId"`
	// ID of the branch.
	Branch string `form:"branch" json:"branch" xml:"branch"`
	// Name of the template repository.
	RepositoryName string `form:"repositoryName" json:"repositoryName" xml:"repositoryName"`
	// Semantic version of the template.
	Version string `form:"version" json:"version" xml:"version"`
	// Name of the instance.
	Name string `form:"name" json:"name" xml:"name"`
	// Instance creation date and token.
	Created *ChangeInfoResponseBody `form:"created" json:"created" xml:"created"`
	// Instance update date and token.
	Updated    *ChangeInfoResponseBody `form:"updated" json:"updated" xml:"updated"`
	MainConfig *MainConfigResponseBody `form:"mainConfig,omitempty" json:"mainConfig,omitempty" xml:"mainConfig,omitempty"`
}

// UpgradeInstanceResponseBody is the type of the "templates" service
// "UpgradeInstance" endpoint HTTP response body.
type UpgradeInstanceResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64  `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
}

// UpgradeInstanceInputsIndexResponseBody is the type of the "templates"
// service "UpgradeInstanceInputsIndex" endpoint HTTP response body.
type UpgradeInstanceInputsIndexResponseBody struct {
	// List of the step groups.
	StepGroups []*StepGroupResponseBody `form:"stepGroups" json:"stepGroups" xml:"stepGroups"`
	// Initial state - same structure as the validation result.
	InitialState *ValidationResultResponseBody `form:"initialState" json:"initialState" xml:"initialState"`
}

// UpgradeInstanceValidateInputsResponseBody is the type of the "templates"
// service "UpgradeInstanceValidateInputs" endpoint HTTP response body.
type UpgradeInstanceValidateInputsResponseBody struct {
	// True if all groups and inputs are valid.
	Valid bool `form:"valid" json:"valid" xml:"valid"`
	// List of Details for the step groups.
	StepGroups []*StepGroupValidationResultResponseBody `form:"stepGroups" json:"stepGroups" xml:"stepGroups"`
}

// GetTaskResponseBody is the type of the "templates" service "GetTask"
// endpoint HTTP response body.
type GetTaskResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64  `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
}

// RepositoryIndexTemplatesRepositoryNotFoundResponseBody is the type of the
// "templates" service "RepositoryIndex" endpoint HTTP response body for the
// "templates.repositoryNotFound" error.
type RepositoryIndexTemplatesRepositoryNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// TemplatesIndexTemplatesRepositoryNotFoundResponseBody is the type of the
// "templates" service "TemplatesIndex" endpoint HTTP response body for the
// "templates.repositoryNotFound" error.
type TemplatesIndexTemplatesRepositoryNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// TemplateIndexTemplatesRepositoryNotFoundResponseBody is the type of the
// "templates" service "TemplateIndex" endpoint HTTP response body for the
// "templates.repositoryNotFound" error.
type TemplateIndexTemplatesRepositoryNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// TemplateIndexTemplatesTemplateNotFoundResponseBody is the type of the
// "templates" service "TemplateIndex" endpoint HTTP response body for the
// "templates.templateNotFound" error.
type TemplateIndexTemplatesTemplateNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// VersionIndexTemplatesRepositoryNotFoundResponseBody is the type of the
// "templates" service "VersionIndex" endpoint HTTP response body for the
// "templates.repositoryNotFound" error.
type VersionIndexTemplatesRepositoryNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// VersionIndexTemplatesTemplateNotFoundResponseBody is the type of the
// "templates" service "VersionIndex" endpoint HTTP response body for the
// "templates.templateNotFound" error.
type VersionIndexTemplatesTemplateNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// VersionIndexTemplatesVersionNotFoundResponseBody is the type of the
// "templates" service "VersionIndex" endpoint HTTP response body for the
// "templates.versionNotFound" error.
type VersionIndexTemplatesVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// InputsIndexTemplatesRepositoryNotFoundResponseBody is the type of the
// "templates" service "InputsIndex" endpoint HTTP response body for the
// "templates.repositoryNotFound" error.
type InputsIndexTemplatesRepositoryNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// InputsIndexTemplatesTemplateNotFoundResponseBody is the type of the
// "templates" service "InputsIndex" endpoint HTTP response body for the
// "templates.templateNotFound" error.
type InputsIndexTemplatesTemplateNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// InputsIndexTemplatesVersionNotFoundResponseBody is the type of the
// "templates" service "InputsIndex" endpoint HTTP response body for the
// "templates.versionNotFound" error.
type InputsIndexTemplatesVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ValidateInputsTemplatesRepositoryNotFoundResponseBody is the type of the
// "templates" service "ValidateInputs" endpoint HTTP response body for the
// "templates.repositoryNotFound" error.
type ValidateInputsTemplatesRepositoryNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ValidateInputsTemplatesTemplateNotFoundResponseBody is the type of the
// "templates" service "ValidateInputs" endpoint HTTP response body for the
// "templates.templateNotFound" error.
type ValidateInputsTemplatesTemplateNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ValidateInputsTemplatesVersionNotFoundResponseBody is the type of the
// "templates" service "ValidateInputs" endpoint HTTP response body for the
// "templates.versionNotFound" error.
type ValidateInputsTemplatesVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UseTemplateVersionTemplatesRepositoryNotFoundResponseBody is the type of the
// "templates" service "UseTemplateVersion" endpoint HTTP response body for the
// "templates.repositoryNotFound" error.
type UseTemplateVersionTemplatesRepositoryNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UseTemplateVersionTemplatesTemplateNotFoundResponseBody is the type of the
// "templates" service "UseTemplateVersion" endpoint HTTP response body for the
// "templates.templateNotFound" error.
type UseTemplateVersionTemplatesTemplateNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UseTemplateVersionTemplatesVersionNotFoundResponseBody is the type of the
// "templates" service "UseTemplateVersion" endpoint HTTP response body for the
// "templates.versionNotFound" error.
type UseTemplateVersionTemplatesVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UseTemplateVersionTemplatesProjectLockedResponseBody is the type of the
// "templates" service "UseTemplateVersion" endpoint HTTP response body for the
// "templates.projectLocked" error.
type UseTemplateVersionTemplatesProjectLockedResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UseTemplateVersionInvalidInputsResponseBody is the type of the "templates"
// service "UseTemplateVersion" endpoint HTTP response body for the
// "InvalidInputs" error.
type UseTemplateVersionInvalidInputsResponseBody struct {
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message          string                        `form:"message" json:"message" xml:"message"`
	ValidationResult *ValidationResultResponseBody `form:"ValidationResult" json:"ValidationResult" xml:"ValidationResult"`
}

// InstancesIndexTemplatesBranchNotFoundResponseBody is the type of the
// "templates" service "InstancesIndex" endpoint HTTP response body for the
// "templates.branchNotFound" error.
type InstancesIndexTemplatesBranchNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// InstanceIndexTemplatesBranchNotFoundResponseBody is the type of the
// "templates" service "InstanceIndex" endpoint HTTP response body for the
// "templates.branchNotFound" error.
type InstanceIndexTemplatesBranchNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// InstanceIndexTemplatesRepositoryNotFoundResponseBody is the type of the
// "templates" service "InstanceIndex" endpoint HTTP response body for the
// "templates.repositoryNotFound" error.
type InstanceIndexTemplatesRepositoryNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// InstanceIndexTemplatesInstanceNotFoundResponseBody is the type of the
// "templates" service "InstanceIndex" endpoint HTTP response body for the
// "templates.instanceNotFound" error.
type InstanceIndexTemplatesInstanceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateInstanceTemplatesBranchNotFoundResponseBody is the type of the
// "templates" service "UpdateInstance" endpoint HTTP response body for the
// "templates.branchNotFound" error.
type UpdateInstanceTemplatesBranchNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateInstanceTemplatesInstanceNotFoundResponseBody is the type of the
// "templates" service "UpdateInstance" endpoint HTTP response body for the
// "templates.instanceNotFound" error.
type UpdateInstanceTemplatesInstanceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateInstanceTemplatesProjectLockedResponseBody is the type of the
// "templates" service "UpdateInstance" endpoint HTTP response body for the
// "templates.projectLocked" error.
type UpdateInstanceTemplatesProjectLockedResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteInstanceTemplatesBranchNotFoundResponseBody is the type of the
// "templates" service "DeleteInstance" endpoint HTTP response body for the
// "templates.branchNotFound" error.
type DeleteInstanceTemplatesBranchNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteInstanceTemplatesInstanceNotFoundResponseBody is the type of the
// "templates" service "DeleteInstance" endpoint HTTP response body for the
// "templates.instanceNotFound" error.
type DeleteInstanceTemplatesInstanceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteInstanceTemplatesProjectLockedResponseBody is the type of the
// "templates" service "DeleteInstance" endpoint HTTP response body for the
// "templates.projectLocked" error.
type DeleteInstanceTemplatesProjectLockedResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceTemplatesTemplateNotFoundResponseBody is the type of the
// "templates" service "UpgradeInstance" endpoint HTTP response body for the
// "templates.templateNotFound" error.
type UpgradeInstanceTemplatesTemplateNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceTemplatesBranchNotFoundResponseBody is the type of the
// "templates" service "UpgradeInstance" endpoint HTTP response body for the
// "templates.branchNotFound" error.
type UpgradeInstanceTemplatesBranchNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceTemplatesInstanceNotFoundResponseBody is the type of the
// "templates" service "UpgradeInstance" endpoint HTTP response body for the
// "templates.instanceNotFound" error.
type UpgradeInstanceTemplatesInstanceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceTemplatesVersionNotFoundResponseBody is the type of the
// "templates" service "UpgradeInstance" endpoint HTTP response body for the
// "templates.versionNotFound" error.
type UpgradeInstanceTemplatesVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceTemplatesProjectLockedResponseBody is the type of the
// "templates" service "UpgradeInstance" endpoint HTTP response body for the
// "templates.projectLocked" error.
type UpgradeInstanceTemplatesProjectLockedResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceInvalidInputsResponseBody is the type of the "templates"
// service "UpgradeInstance" endpoint HTTP response body for the
// "InvalidInputs" error.
type UpgradeInstanceInvalidInputsResponseBody struct {
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message          string                        `form:"message" json:"message" xml:"message"`
	ValidationResult *ValidationResultResponseBody `form:"ValidationResult" json:"ValidationResult" xml:"ValidationResult"`
}

// UpgradeInstanceInputsIndexTemplatesTemplateNotFoundResponseBody is the type
// of the "templates" service "UpgradeInstanceInputsIndex" endpoint HTTP
// response body for the "templates.templateNotFound" error.
type UpgradeInstanceInputsIndexTemplatesTemplateNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceInputsIndexTemplatesBranchNotFoundResponseBody is the type of
// the "templates" service "UpgradeInstanceInputsIndex" endpoint HTTP response
// body for the "templates.branchNotFound" error.
type UpgradeInstanceInputsIndexTemplatesBranchNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceInputsIndexTemplatesInstanceNotFoundResponseBody is the type
// of the "templates" service "UpgradeInstanceInputsIndex" endpoint HTTP
// response body for the "templates.instanceNotFound" error.
type UpgradeInstanceInputsIndexTemplatesInstanceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceInputsIndexTemplatesVersionNotFoundResponseBody is the type
// of the "templates" service "UpgradeInstanceInputsIndex" endpoint HTTP
// response body for the "templates.versionNotFound" error.
type UpgradeInstanceInputsIndexTemplatesVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceValidateInputsTemplatesTemplateNotFoundResponseBody is the
// type of the "templates" service "UpgradeInstanceValidateInputs" endpoint
// HTTP response body for the "templates.templateNotFound" error.
type UpgradeInstanceValidateInputsTemplatesTemplateNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceValidateInputsTemplatesBranchNotFoundResponseBody is the type
// of the "templates" service "UpgradeInstanceValidateInputs" endpoint HTTP
// response body for the "templates.branchNotFound" error.
type UpgradeInstanceValidateInputsTemplatesBranchNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceValidateInputsTemplatesInstanceNotFoundResponseBody is the
// type of the "templates" service "UpgradeInstanceValidateInputs" endpoint
// HTTP response body for the "templates.instanceNotFound" error.
type UpgradeInstanceValidateInputsTemplatesInstanceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpgradeInstanceValidateInputsTemplatesVersionNotFoundResponseBody is the
// type of the "templates" service "UpgradeInstanceValidateInputs" endpoint
// HTTP response body for the "templates.versionNotFound" error.
type UpgradeInstanceValidateInputsTemplatesVersionNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetTaskTemplatesTaskNotFoundResponseBody is the type of the "templates"
// service "GetTask" endpoint HTTP response body for the
// "templates.taskNotFound" error.
type GetTaskTemplatesTaskNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// RepositoryResponseBody is used to define fields on response body types.
type RepositoryResponseBody struct {
	// Template repository name. Use "keboola" for default Keboola repository.
	Name string `form:"name" json:"name" xml:"name"`
	// Git URL to the repository.
	URL string `form:"url" json:"url" xml:"url"`
	// Git branch or tag.
	Ref    string              `form:"ref" json:"ref" xml:"ref"`
	Author *AuthorResponseBody `form:"author" json:"author" xml:"author"`
}

// AuthorResponseBody is used to define fields on response body types.
type AuthorResponseBody struct {
	// Name of the author.
	Name string `form:"name" json:"name" xml:"name"`
	// Link to the author website.
	URL string `form:"url" json:"url" xml:"url"`
}

// TemplateResponseBody is used to define fields on response body types.
type TemplateResponseBody struct {
	// Template ID.
	ID string `form:"id" json:"id" xml:"id"`
	// Template name.
	Name string `form:"name" json:"name" xml:"name"`
	// List of categories the template belongs to.
	Categories []string `form:"categories" json:"categories" xml:"categories"`
	// List of components used in the template.
	Components []string            `form:"components" json:"components" xml:"components"`
	Author     *AuthorResponseBody `form:"author" json:"author" xml:"author"`
	// Short description of the template.
	Description string `form:"description" json:"description" xml:"description"`
	// Recommended version of the template.
	DefaultVersion string `form:"defaultVersion" json:"defaultVersion" xml:"defaultVersion"`
	// All available versions of the template.
	Versions []*VersionResponseBody `form:"versions" json:"versions" xml:"versions"`
}

// VersionResponseBody is used to define fields on response body types.
type VersionResponseBody struct {
	// Semantic version.
	Version string `form:"version" json:"version" xml:"version"`
	// If true, then the version is ready for production use.
	Stable bool `form:"stable" json:"stable" xml:"stable"`
	// Optional short description of the version. Can be empty.
	Description string `form:"description" json:"description" xml:"description"`
}

// StepGroupResponseBody is used to define fields on response body types.
type StepGroupResponseBody struct {
	// Unique ID of the step group.
	ID string `form:"id" json:"id" xml:"id"`
	// Description of the step group, a tooltip explaining what needs to be
	// configured.
	Description string `form:"description" json:"description" xml:"description"`
	// The number of steps that must be configured.
	Required string `form:"required" json:"required" xml:"required"`
	// Steps in the group.
	Steps []*StepResponseBody `form:"steps" json:"steps" xml:"steps"`
}

// StepResponseBody is used to define fields on response body types.
type StepResponseBody struct {
	// Unique ID of the step.
	ID string `form:"id" json:"id" xml:"id"`
	// Icon for UI. Component icon if it starts with "component:...", or a common
	// icon if it starts with "common:...".
	Icon string `form:"icon" json:"icon" xml:"icon"`
	// Name of the step.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the step.
	Description string `form:"description" json:"description" xml:"description"`
	// Name of the dialog with inputs.
	DialogName string `form:"dialogName" json:"dialogName" xml:"dialogName"`
	// Description of the dialog with inputs.
	DialogDescription string `form:"dialogDescription" json:"dialogDescription" xml:"dialogDescription"`
	// Inputs in the step.
	Inputs []*InputResponseBody `form:"inputs" json:"inputs" xml:"inputs"`
}

// InputResponseBody is used to define fields on response body types.
type InputResponseBody struct {
	// Unique ID of the input.
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the input.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the input.
	Description string `form:"description" json:"description" xml:"description"`
	// Type of the input.
	Type string `form:"type" json:"type" xml:"type"`
	// Kind of the input.
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// Default value, match defined type.
	Default any `form:"default" json:"default" xml:"default"`
	// Input options for type = select OR multiselect.
	Options []*InputOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// Component id for "oauth" kind inputs.
	ComponentID *string `form:"componentId,omitempty" json:"componentId,omitempty" xml:"componentId,omitempty"`
	// OAuth input id for "oauthAccounts" kind inputs.
	OauthInputID *string `form:"oauthInputId,omitempty" json:"oauthInputId,omitempty" xml:"oauthInputId,omitempty"`
}

// InputOptionResponseBody is used to define fields on response body types.
type InputOptionResponseBody struct {
	// Visible label of the option.
	Label string `form:"label" json:"label" xml:"label"`
	// Value of the option.
	Value string `form:"value" json:"value" xml:"value"`
}

// ValidationResultResponseBody is used to define fields on response body types.
type ValidationResultResponseBody struct {
	// True if all groups and inputs are valid.
	Valid bool `form:"valid" json:"valid" xml:"valid"`
	// List of Details for the step groups.
	StepGroups []*StepGroupValidationResultResponseBody `form:"stepGroups" json:"stepGroups" xml:"stepGroups"`
}

// StepGroupValidationResultResponseBody is used to define fields on response
// body types.
type StepGroupValidationResultResponseBody struct {
	// Step group ID.
	ID string `form:"id" json:"id" xml:"id"`
	// True if the required number of steps is configured and all inputs are valid.
	Valid bool `form:"valid" json:"valid" xml:"valid"`
	// Are all inputs valid?
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// List of Details for the steps.
	Steps []*StepValidationResultResponseBody `form:"steps" json:"steps" xml:"steps"`
}

// StepValidationResultResponseBody is used to define fields on response body
// types.
type StepValidationResultResponseBody struct {
	// Step ID.
	ID string `form:"id" json:"id" xml:"id"`
	// True if the step was part of the sent payload.
	Configured bool `form:"configured" json:"configured" xml:"configured"`
	// True if all inputs in the step are valid.
	Valid bool `form:"valid" json:"valid" xml:"valid"`
	// List of Details for the inputs.
	Inputs []*InputValidationResultResponseBody `form:"inputs" json:"inputs" xml:"inputs"`
}

// InputValidationResultResponseBody is used to define fields on response body
// types.
type InputValidationResultResponseBody struct {
	// Input ID.
	ID string `form:"id" json:"id" xml:"id"`
	// If false, the input should be hidden to user.
	Visible bool `form:"visible" json:"visible" xml:"visible"`
	// Error message.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
}

// InstanceResponseBody is used to define fields on response body types.
type InstanceResponseBody struct {
	// ID of the template.
	TemplateID string `form:"templateId" json:"templateId" xml:"templateId"`
	// ID of the template instance.
	InstanceID string `form:"instanceId" json:"instanceId" xml:"instanceId"`
	// ID of the branch.
	Branch string `form:"branch" json:"branch" xml:"branch"`
	// Name of the template repository.
	RepositoryName string `form:"repositoryName" json:"repositoryName" xml:"repositoryName"`
	// Semantic version of the template.
	Version string `form:"version" json:"version" xml:"version"`
	// Name of the instance.
	Name string `form:"name" json:"name" xml:"name"`
	// Instance creation date and token.
	Created *ChangeInfoResponseBody `form:"created" json:"created" xml:"created"`
	// Instance update date and token.
	Updated    *ChangeInfoResponseBody `form:"updated" json:"updated" xml:"updated"`
	MainConfig *MainConfigResponseBody `form:"mainConfig,omitempty" json:"mainConfig,omitempty" xml:"mainConfig,omitempty"`
}

// ChangeInfoResponseBody is used to define fields on response body types.
type ChangeInfoResponseBody struct {
	// Date and time of the change.
	Date string `form:"date" json:"date" xml:"date"`
	// The token by which the change was made.
	TokenID string `form:"tokenId" json:"tokenId" xml:"tokenId"`
}

// MainConfigResponseBody is used to define fields on response body types.
type MainConfigResponseBody struct {
	// Component ID.
	ComponentID string `form:"componentId" json:"componentId" xml:"componentId"`
	// Configuration ID.
	ConfigID string `form:"configId" json:"configId" xml:"configId"`
}

// VersionDetailResponseBody is used to define fields on response body types.
type VersionDetailResponseBody struct {
	// List of components used in the template version.
	Components []string `form:"components" json:"components" xml:"components"`
	// Extended description of the template in Markdown format.
	LongDescription string `form:"longDescription" json:"longDescription" xml:"longDescription"`
	// Readme of the template version in Markdown format.
	Readme string `form:"readme" json:"readme" xml:"readme"`
	// Semantic version.
	Version string `form:"version" json:"version" xml:"version"`
	// If true, then the version is ready for production use.
	Stable bool `form:"stable" json:"stable" xml:"stable"`
	// Optional short description of the version. Can be empty.
	Description string `form:"description" json:"description" xml:"description"`
}

// ConfigResponseBody is used to define fields on response body types.
type ConfigResponseBody struct {
	// Component ID.
	ComponentID string `form:"componentId" json:"componentId" xml:"componentId"`
	// Configuration ID.
	ConfigID string `form:"configId" json:"configId" xml:"configId"`
	// Name of the configuration.
	Name string `form:"name" json:"name" xml:"name"`
}

// StepPayloadRequestBody is used to define fields on request body types.
type StepPayloadRequestBody struct {
	// Unique ID of the step.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Input values.
	Inputs []*InputValueRequestBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
}

// InputValueRequestBody is used to define fields on request body types.
type InputValueRequestBody struct {
	// Unique ID of the input.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Input value filled in by user in the required type.
	Value any `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewAPIVersionIndexResponseBody builds the HTTP response body from the result
// of the "ApiVersionIndex" endpoint of the "templates" service.
func NewAPIVersionIndexResponseBody(res *templates.ServiceDetail) *APIVersionIndexResponseBody {
	body := &APIVersionIndexResponseBody{
		API:           res.API,
		Documentation: res.Documentation,
	}
	return body
}

// NewRepositoriesIndexResponseBody builds the HTTP response body from the
// result of the "RepositoriesIndex" endpoint of the "templates" service.
func NewRepositoriesIndexResponseBody(res *templates.Repositories) *RepositoriesIndexResponseBody {
	body := &RepositoriesIndexResponseBody{}
	if res.Repositories != nil {
		body.Repositories = make([]*RepositoryResponseBody, len(res.Repositories))
		for i, val := range res.Repositories {
			body.Repositories[i] = marshalTemplatesRepositoryToRepositoryResponseBody(val)
		}
	}
	return body
}

// NewRepositoryIndexResponseBody builds the HTTP response body from the result
// of the "RepositoryIndex" endpoint of the "templates" service.
func NewRepositoryIndexResponseBody(res *templates.Repository) *RepositoryIndexResponseBody {
	body := &RepositoryIndexResponseBody{
		Name: res.Name,
		URL:  res.URL,
		Ref:  res.Ref,
	}
	if res.Author != nil {
		body.Author = marshalTemplatesAuthorToAuthorResponseBody(res.Author)
	}
	return body
}

// NewTemplatesIndexResponseBody builds the HTTP response body from the result
// of the "TemplatesIndex" endpoint of the "templates" service.
func NewTemplatesIndexResponseBody(res *templates.Templates) *TemplatesIndexResponseBody {
	body := &TemplatesIndexResponseBody{}
	if res.Repository != nil {
		body.Repository = marshalTemplatesRepositoryToRepositoryResponseBody(res.Repository)
	}
	if res.Templates != nil {
		body.Templates = make([]*TemplateResponseBody, len(res.Templates))
		for i, val := range res.Templates {
			body.Templates[i] = marshalTemplatesTemplateToTemplateResponseBody(val)
		}
	}
	return body
}

// NewTemplateIndexResponseBody builds the HTTP response body from the result
// of the "TemplateIndex" endpoint of the "templates" service.
func NewTemplateIndexResponseBody(res *templates.TemplateDetail) *TemplateIndexResponseBody {
	body := &TemplateIndexResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		Description:    res.Description,
		DefaultVersion: res.DefaultVersion,
	}
	if res.Repository != nil {
		body.Repository = marshalTemplatesRepositoryToRepositoryResponseBody(res.Repository)
	}
	if res.Categories != nil {
		body.Categories = make([]string, len(res.Categories))
		for i, val := range res.Categories {
			body.Categories[i] = val
		}
	}
	if res.Components != nil {
		body.Components = make([]string, len(res.Components))
		for i, val := range res.Components {
			body.Components[i] = val
		}
	}
	if res.Author != nil {
		body.Author = marshalTemplatesAuthorToAuthorResponseBody(res.Author)
	}
	if res.Versions != nil {
		body.Versions = make([]*VersionResponseBody, len(res.Versions))
		for i, val := range res.Versions {
			body.Versions[i] = marshalTemplatesVersionToVersionResponseBody(val)
		}
	}
	return body
}

// NewVersionIndexResponseBody builds the HTTP response body from the result of
// the "VersionIndex" endpoint of the "templates" service.
func NewVersionIndexResponseBody(res *templates.VersionDetailExtended) *VersionIndexResponseBody {
	body := &VersionIndexResponseBody{
		LongDescription: res.LongDescription,
		Readme:          res.Readme,
		Version:         res.Version,
		Stable:          res.Stable,
		Description:     res.Description,
	}
	if res.Repository != nil {
		body.Repository = marshalTemplatesRepositoryToRepositoryResponseBody(res.Repository)
	}
	if res.Template != nil {
		body.Template = marshalTemplatesTemplateToTemplateResponseBody(res.Template)
	}
	if res.Components != nil {
		body.Components = make([]string, len(res.Components))
		for i, val := range res.Components {
			body.Components[i] = val
		}
	}
	return body
}

// NewInputsIndexResponseBody builds the HTTP response body from the result of
// the "InputsIndex" endpoint of the "templates" service.
func NewInputsIndexResponseBody(res *templates.Inputs) *InputsIndexResponseBody {
	body := &InputsIndexResponseBody{}
	if res.StepGroups != nil {
		body.StepGroups = make([]*StepGroupResponseBody, len(res.StepGroups))
		for i, val := range res.StepGroups {
			body.StepGroups[i] = marshalTemplatesStepGroupToStepGroupResponseBody(val)
		}
	}
	if res.InitialState != nil {
		body.InitialState = marshalTemplatesValidationResultToValidationResultResponseBody(res.InitialState)
	}
	return body
}

// NewValidateInputsResponseBody builds the HTTP response body from the result
// of the "ValidateInputs" endpoint of the "templates" service.
func NewValidateInputsResponseBody(res *templates.ValidationResult) *ValidateInputsResponseBody {
	body := &ValidateInputsResponseBody{
		Valid: res.Valid,
	}
	if res.StepGroups != nil {
		body.StepGroups = make([]*StepGroupValidationResultResponseBody, len(res.StepGroups))
		for i, val := range res.StepGroups {
			body.StepGroups[i] = marshalTemplatesStepGroupValidationResultToStepGroupValidationResultResponseBody(val)
		}
	}
	return body
}

// NewUseTemplateVersionResponseBody builds the HTTP response body from the
// result of the "UseTemplateVersion" endpoint of the "templates" service.
func NewUseTemplateVersionResponseBody(res *templates.Task) *UseTemplateVersionResponseBody {
	body := &UseTemplateVersionResponseBody{
		ID:         string(res.ID),
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	return body
}

// NewInstancesIndexResponseBody builds the HTTP response body from the result
// of the "InstancesIndex" endpoint of the "templates" service.
func NewInstancesIndexResponseBody(res *templates.Instances) *InstancesIndexResponseBody {
	body := &InstancesIndexResponseBody{}
	if res.Instances != nil {
		body.Instances = make([]*InstanceResponseBody, len(res.Instances))
		for i, val := range res.Instances {
			body.Instances[i] = marshalTemplatesInstanceToInstanceResponseBody(val)
		}
	}
	return body
}

// NewInstanceIndexResponseBody builds the HTTP response body from the result
// of the "InstanceIndex" endpoint of the "templates" service.
func NewInstanceIndexResponseBody(res *templates.InstanceDetail) *InstanceIndexResponseBody {
	body := &InstanceIndexResponseBody{
		TemplateID:     res.TemplateID,
		InstanceID:     res.InstanceID,
		Branch:         res.Branch,
		RepositoryName: res.RepositoryName,
		Version:        res.Version,
		Name:           res.Name,
	}
	if res.VersionDetail != nil {
		body.VersionDetail = marshalTemplatesVersionDetailToVersionDetailResponseBody(res.VersionDetail)
	}
	if res.Configurations != nil {
		body.Configurations = make([]*ConfigResponseBody, len(res.Configurations))
		for i, val := range res.Configurations {
			body.Configurations[i] = marshalTemplatesConfigToConfigResponseBody(val)
		}
	}
	if res.Created != nil {
		body.Created = marshalTemplatesChangeInfoToChangeInfoResponseBody(res.Created)
	}
	if res.Updated != nil {
		body.Updated = marshalTemplatesChangeInfoToChangeInfoResponseBody(res.Updated)
	}
	if res.MainConfig != nil {
		body.MainConfig = marshalTemplatesMainConfigToMainConfigResponseBody(res.MainConfig)
	}
	return body
}

// NewUpdateInstanceResponseBody builds the HTTP response body from the result
// of the "UpdateInstance" endpoint of the "templates" service.
func NewUpdateInstanceResponseBody(res *templates.InstanceDetail) *UpdateInstanceResponseBody {
	body := &UpdateInstanceResponseBody{
		TemplateID:     res.TemplateID,
		InstanceID:     res.InstanceID,
		Branch:         res.Branch,
		RepositoryName: res.RepositoryName,
		Version:        res.Version,
		Name:           res.Name,
	}
	if res.VersionDetail != nil {
		body.VersionDetail = marshalTemplatesVersionDetailToVersionDetailResponseBody(res.VersionDetail)
	}
	if res.Configurations != nil {
		body.Configurations = make([]*ConfigResponseBody, len(res.Configurations))
		for i, val := range res.Configurations {
			body.Configurations[i] = marshalTemplatesConfigToConfigResponseBody(val)
		}
	}
	if res.Created != nil {
		body.Created = marshalTemplatesChangeInfoToChangeInfoResponseBody(res.Created)
	}
	if res.Updated != nil {
		body.Updated = marshalTemplatesChangeInfoToChangeInfoResponseBody(res.Updated)
	}
	if res.MainConfig != nil {
		body.MainConfig = marshalTemplatesMainConfigToMainConfigResponseBody(res.MainConfig)
	}
	return body
}

// NewUpgradeInstanceResponseBody builds the HTTP response body from the result
// of the "UpgradeInstance" endpoint of the "templates" service.
func NewUpgradeInstanceResponseBody(res *templates.Task) *UpgradeInstanceResponseBody {
	body := &UpgradeInstanceResponseBody{
		ID:         string(res.ID),
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	return body
}

// NewUpgradeInstanceInputsIndexResponseBody builds the HTTP response body from
// the result of the "UpgradeInstanceInputsIndex" endpoint of the "templates"
// service.
func NewUpgradeInstanceInputsIndexResponseBody(res *templates.Inputs) *UpgradeInstanceInputsIndexResponseBody {
	body := &UpgradeInstanceInputsIndexResponseBody{}
	if res.StepGroups != nil {
		body.StepGroups = make([]*StepGroupResponseBody, len(res.StepGroups))
		for i, val := range res.StepGroups {
			body.StepGroups[i] = marshalTemplatesStepGroupToStepGroupResponseBody(val)
		}
	}
	if res.InitialState != nil {
		body.InitialState = marshalTemplatesValidationResultToValidationResultResponseBody(res.InitialState)
	}
	return body
}

// NewUpgradeInstanceValidateInputsResponseBody builds the HTTP response body
// from the result of the "UpgradeInstanceValidateInputs" endpoint of the
// "templates" service.
func NewUpgradeInstanceValidateInputsResponseBody(res *templates.ValidationResult) *UpgradeInstanceValidateInputsResponseBody {
	body := &UpgradeInstanceValidateInputsResponseBody{
		Valid: res.Valid,
	}
	if res.StepGroups != nil {
		body.StepGroups = make([]*StepGroupValidationResultResponseBody, len(res.StepGroups))
		for i, val := range res.StepGroups {
			body.StepGroups[i] = marshalTemplatesStepGroupValidationResultToStepGroupValidationResultResponseBody(val)
		}
	}
	return body
}

// NewGetTaskResponseBody builds the HTTP response body from the result of the
// "GetTask" endpoint of the "templates" service.
func NewGetTaskResponseBody(res *templates.Task) *GetTaskResponseBody {
	body := &GetTaskResponseBody{
		ID:         string(res.ID),
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	return body
}

// NewRepositoryIndexTemplatesRepositoryNotFoundResponseBody builds the HTTP
// response body from the result of the "RepositoryIndex" endpoint of the
// "templates" service.
func NewRepositoryIndexTemplatesRepositoryNotFoundResponseBody(res *templates.GenericError) *RepositoryIndexTemplatesRepositoryNotFoundResponseBody {
	body := &RepositoryIndexTemplatesRepositoryNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewTemplatesIndexTemplatesRepositoryNotFoundResponseBody builds the HTTP
// response body from the result of the "TemplatesIndex" endpoint of the
// "templates" service.
func NewTemplatesIndexTemplatesRepositoryNotFoundResponseBody(res *templates.GenericError) *TemplatesIndexTemplatesRepositoryNotFoundResponseBody {
	body := &TemplatesIndexTemplatesRepositoryNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewTemplateIndexTemplatesRepositoryNotFoundResponseBody builds the HTTP
// response body from the result of the "TemplateIndex" endpoint of the
// "templates" service.
func NewTemplateIndexTemplatesRepositoryNotFoundResponseBody(res *templates.GenericError) *TemplateIndexTemplatesRepositoryNotFoundResponseBody {
	body := &TemplateIndexTemplatesRepositoryNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewTemplateIndexTemplatesTemplateNotFoundResponseBody builds the HTTP
// response body from the result of the "TemplateIndex" endpoint of the
// "templates" service.
func NewTemplateIndexTemplatesTemplateNotFoundResponseBody(res *templates.GenericError) *TemplateIndexTemplatesTemplateNotFoundResponseBody {
	body := &TemplateIndexTemplatesTemplateNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewVersionIndexTemplatesRepositoryNotFoundResponseBody builds the HTTP
// response body from the result of the "VersionIndex" endpoint of the
// "templates" service.
func NewVersionIndexTemplatesRepositoryNotFoundResponseBody(res *templates.GenericError) *VersionIndexTemplatesRepositoryNotFoundResponseBody {
	body := &VersionIndexTemplatesRepositoryNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewVersionIndexTemplatesTemplateNotFoundResponseBody builds the HTTP
// response body from the result of the "VersionIndex" endpoint of the
// "templates" service.
func NewVersionIndexTemplatesTemplateNotFoundResponseBody(res *templates.GenericError) *VersionIndexTemplatesTemplateNotFoundResponseBody {
	body := &VersionIndexTemplatesTemplateNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewVersionIndexTemplatesVersionNotFoundResponseBody builds the HTTP response
// body from the result of the "VersionIndex" endpoint of the "templates"
// service.
func NewVersionIndexTemplatesVersionNotFoundResponseBody(res *templates.GenericError) *VersionIndexTemplatesVersionNotFoundResponseBody {
	body := &VersionIndexTemplatesVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewInputsIndexTemplatesRepositoryNotFoundResponseBody builds the HTTP
// response body from the result of the "InputsIndex" endpoint of the
// "templates" service.
func NewInputsIndexTemplatesRepositoryNotFoundResponseBody(res *templates.GenericError) *InputsIndexTemplatesRepositoryNotFoundResponseBody {
	body := &InputsIndexTemplatesRepositoryNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewInputsIndexTemplatesTemplateNotFoundResponseBody builds the HTTP response
// body from the result of the "InputsIndex" endpoint of the "templates"
// service.
func NewInputsIndexTemplatesTemplateNotFoundResponseBody(res *templates.GenericError) *InputsIndexTemplatesTemplateNotFoundResponseBody {
	body := &InputsIndexTemplatesTemplateNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewInputsIndexTemplatesVersionNotFoundResponseBody builds the HTTP response
// body from the result of the "InputsIndex" endpoint of the "templates"
// service.
func NewInputsIndexTemplatesVersionNotFoundResponseBody(res *templates.GenericError) *InputsIndexTemplatesVersionNotFoundResponseBody {
	body := &InputsIndexTemplatesVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewValidateInputsTemplatesRepositoryNotFoundResponseBody builds the HTTP
// response body from the result of the "ValidateInputs" endpoint of the
// "templates" service.
func NewValidateInputsTemplatesRepositoryNotFoundResponseBody(res *templates.GenericError) *ValidateInputsTemplatesRepositoryNotFoundResponseBody {
	body := &ValidateInputsTemplatesRepositoryNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewValidateInputsTemplatesTemplateNotFoundResponseBody builds the HTTP
// response body from the result of the "ValidateInputs" endpoint of the
// "templates" service.
func NewValidateInputsTemplatesTemplateNotFoundResponseBody(res *templates.GenericError) *ValidateInputsTemplatesTemplateNotFoundResponseBody {
	body := &ValidateInputsTemplatesTemplateNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewValidateInputsTemplatesVersionNotFoundResponseBody builds the HTTP
// response body from the result of the "ValidateInputs" endpoint of the
// "templates" service.
func NewValidateInputsTemplatesVersionNotFoundResponseBody(res *templates.GenericError) *ValidateInputsTemplatesVersionNotFoundResponseBody {
	body := &ValidateInputsTemplatesVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUseTemplateVersionTemplatesRepositoryNotFoundResponseBody builds the HTTP
// response body from the result of the "UseTemplateVersion" endpoint of the
// "templates" service.
func NewUseTemplateVersionTemplatesRepositoryNotFoundResponseBody(res *templates.GenericError) *UseTemplateVersionTemplatesRepositoryNotFoundResponseBody {
	body := &UseTemplateVersionTemplatesRepositoryNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUseTemplateVersionTemplatesTemplateNotFoundResponseBody builds the HTTP
// response body from the result of the "UseTemplateVersion" endpoint of the
// "templates" service.
func NewUseTemplateVersionTemplatesTemplateNotFoundResponseBody(res *templates.GenericError) *UseTemplateVersionTemplatesTemplateNotFoundResponseBody {
	body := &UseTemplateVersionTemplatesTemplateNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUseTemplateVersionTemplatesVersionNotFoundResponseBody builds the HTTP
// response body from the result of the "UseTemplateVersion" endpoint of the
// "templates" service.
func NewUseTemplateVersionTemplatesVersionNotFoundResponseBody(res *templates.GenericError) *UseTemplateVersionTemplatesVersionNotFoundResponseBody {
	body := &UseTemplateVersionTemplatesVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUseTemplateVersionTemplatesProjectLockedResponseBody builds the HTTP
// response body from the result of the "UseTemplateVersion" endpoint of the
// "templates" service.
func NewUseTemplateVersionTemplatesProjectLockedResponseBody(res *templates.ProjectLockedError) *UseTemplateVersionTemplatesProjectLockedResponseBody {
	body := &UseTemplateVersionTemplatesProjectLockedResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUseTemplateVersionInvalidInputsResponseBody builds the HTTP response body
// from the result of the "UseTemplateVersion" endpoint of the "templates"
// service.
func NewUseTemplateVersionInvalidInputsResponseBody(res *templates.ValidationError) *UseTemplateVersionInvalidInputsResponseBody {
	body := &UseTemplateVersionInvalidInputsResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	if res.ValidationResult != nil {
		body.ValidationResult = marshalTemplatesValidationResultToValidationResultResponseBody(res.ValidationResult)
	}
	return body
}

// NewInstancesIndexTemplatesBranchNotFoundResponseBody builds the HTTP
// response body from the result of the "InstancesIndex" endpoint of the
// "templates" service.
func NewInstancesIndexTemplatesBranchNotFoundResponseBody(res *templates.GenericError) *InstancesIndexTemplatesBranchNotFoundResponseBody {
	body := &InstancesIndexTemplatesBranchNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewInstanceIndexTemplatesBranchNotFoundResponseBody builds the HTTP response
// body from the result of the "InstanceIndex" endpoint of the "templates"
// service.
func NewInstanceIndexTemplatesBranchNotFoundResponseBody(res *templates.GenericError) *InstanceIndexTemplatesBranchNotFoundResponseBody {
	body := &InstanceIndexTemplatesBranchNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewInstanceIndexTemplatesRepositoryNotFoundResponseBody builds the HTTP
// response body from the result of the "InstanceIndex" endpoint of the
// "templates" service.
func NewInstanceIndexTemplatesRepositoryNotFoundResponseBody(res *templates.GenericError) *InstanceIndexTemplatesRepositoryNotFoundResponseBody {
	body := &InstanceIndexTemplatesRepositoryNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewInstanceIndexTemplatesInstanceNotFoundResponseBody builds the HTTP
// response body from the result of the "InstanceIndex" endpoint of the
// "templates" service.
func NewInstanceIndexTemplatesInstanceNotFoundResponseBody(res *templates.GenericError) *InstanceIndexTemplatesInstanceNotFoundResponseBody {
	body := &InstanceIndexTemplatesInstanceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateInstanceTemplatesBranchNotFoundResponseBody builds the HTTP
// response body from the result of the "UpdateInstance" endpoint of the
// "templates" service.
func NewUpdateInstanceTemplatesBranchNotFoundResponseBody(res *templates.GenericError) *UpdateInstanceTemplatesBranchNotFoundResponseBody {
	body := &UpdateInstanceTemplatesBranchNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateInstanceTemplatesInstanceNotFoundResponseBody builds the HTTP
// response body from the result of the "UpdateInstance" endpoint of the
// "templates" service.
func NewUpdateInstanceTemplatesInstanceNotFoundResponseBody(res *templates.GenericError) *UpdateInstanceTemplatesInstanceNotFoundResponseBody {
	body := &UpdateInstanceTemplatesInstanceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateInstanceTemplatesProjectLockedResponseBody builds the HTTP response
// body from the result of the "UpdateInstance" endpoint of the "templates"
// service.
func NewUpdateInstanceTemplatesProjectLockedResponseBody(res *templates.ProjectLockedError) *UpdateInstanceTemplatesProjectLockedResponseBody {
	body := &UpdateInstanceTemplatesProjectLockedResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteInstanceTemplatesBranchNotFoundResponseBody builds the HTTP
// response body from the result of the "DeleteInstance" endpoint of the
// "templates" service.
func NewDeleteInstanceTemplatesBranchNotFoundResponseBody(res *templates.GenericError) *DeleteInstanceTemplatesBranchNotFoundResponseBody {
	body := &DeleteInstanceTemplatesBranchNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteInstanceTemplatesInstanceNotFoundResponseBody builds the HTTP
// response body from the result of the "DeleteInstance" endpoint of the
// "templates" service.
func NewDeleteInstanceTemplatesInstanceNotFoundResponseBody(res *templates.GenericError) *DeleteInstanceTemplatesInstanceNotFoundResponseBody {
	body := &DeleteInstanceTemplatesInstanceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteInstanceTemplatesProjectLockedResponseBody builds the HTTP response
// body from the result of the "DeleteInstance" endpoint of the "templates"
// service.
func NewDeleteInstanceTemplatesProjectLockedResponseBody(res *templates.ProjectLockedError) *DeleteInstanceTemplatesProjectLockedResponseBody {
	body := &DeleteInstanceTemplatesProjectLockedResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceTemplatesTemplateNotFoundResponseBody builds the HTTP
// response body from the result of the "UpgradeInstance" endpoint of the
// "templates" service.
func NewUpgradeInstanceTemplatesTemplateNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceTemplatesTemplateNotFoundResponseBody {
	body := &UpgradeInstanceTemplatesTemplateNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceTemplatesBranchNotFoundResponseBody builds the HTTP
// response body from the result of the "UpgradeInstance" endpoint of the
// "templates" service.
func NewUpgradeInstanceTemplatesBranchNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceTemplatesBranchNotFoundResponseBody {
	body := &UpgradeInstanceTemplatesBranchNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceTemplatesInstanceNotFoundResponseBody builds the HTTP
// response body from the result of the "UpgradeInstance" endpoint of the
// "templates" service.
func NewUpgradeInstanceTemplatesInstanceNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceTemplatesInstanceNotFoundResponseBody {
	body := &UpgradeInstanceTemplatesInstanceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceTemplatesVersionNotFoundResponseBody builds the HTTP
// response body from the result of the "UpgradeInstance" endpoint of the
// "templates" service.
func NewUpgradeInstanceTemplatesVersionNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceTemplatesVersionNotFoundResponseBody {
	body := &UpgradeInstanceTemplatesVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceTemplatesProjectLockedResponseBody builds the HTTP
// response body from the result of the "UpgradeInstance" endpoint of the
// "templates" service.
func NewUpgradeInstanceTemplatesProjectLockedResponseBody(res *templates.ProjectLockedError) *UpgradeInstanceTemplatesProjectLockedResponseBody {
	body := &UpgradeInstanceTemplatesProjectLockedResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceInvalidInputsResponseBody builds the HTTP response body
// from the result of the "UpgradeInstance" endpoint of the "templates" service.
func NewUpgradeInstanceInvalidInputsResponseBody(res *templates.ValidationError) *UpgradeInstanceInvalidInputsResponseBody {
	body := &UpgradeInstanceInvalidInputsResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	if res.ValidationResult != nil {
		body.ValidationResult = marshalTemplatesValidationResultToValidationResultResponseBody(res.ValidationResult)
	}
	return body
}

// NewUpgradeInstanceInputsIndexTemplatesTemplateNotFoundResponseBody builds
// the HTTP response body from the result of the "UpgradeInstanceInputsIndex"
// endpoint of the "templates" service.
func NewUpgradeInstanceInputsIndexTemplatesTemplateNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceInputsIndexTemplatesTemplateNotFoundResponseBody {
	body := &UpgradeInstanceInputsIndexTemplatesTemplateNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceInputsIndexTemplatesBranchNotFoundResponseBody builds the
// HTTP response body from the result of the "UpgradeInstanceInputsIndex"
// endpoint of the "templates" service.
func NewUpgradeInstanceInputsIndexTemplatesBranchNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceInputsIndexTemplatesBranchNotFoundResponseBody {
	body := &UpgradeInstanceInputsIndexTemplatesBranchNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceInputsIndexTemplatesInstanceNotFoundResponseBody builds
// the HTTP response body from the result of the "UpgradeInstanceInputsIndex"
// endpoint of the "templates" service.
func NewUpgradeInstanceInputsIndexTemplatesInstanceNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceInputsIndexTemplatesInstanceNotFoundResponseBody {
	body := &UpgradeInstanceInputsIndexTemplatesInstanceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceInputsIndexTemplatesVersionNotFoundResponseBody builds the
// HTTP response body from the result of the "UpgradeInstanceInputsIndex"
// endpoint of the "templates" service.
func NewUpgradeInstanceInputsIndexTemplatesVersionNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceInputsIndexTemplatesVersionNotFoundResponseBody {
	body := &UpgradeInstanceInputsIndexTemplatesVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceValidateInputsTemplatesTemplateNotFoundResponseBody builds
// the HTTP response body from the result of the
// "UpgradeInstanceValidateInputs" endpoint of the "templates" service.
func NewUpgradeInstanceValidateInputsTemplatesTemplateNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceValidateInputsTemplatesTemplateNotFoundResponseBody {
	body := &UpgradeInstanceValidateInputsTemplatesTemplateNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceValidateInputsTemplatesBranchNotFoundResponseBody builds
// the HTTP response body from the result of the
// "UpgradeInstanceValidateInputs" endpoint of the "templates" service.
func NewUpgradeInstanceValidateInputsTemplatesBranchNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceValidateInputsTemplatesBranchNotFoundResponseBody {
	body := &UpgradeInstanceValidateInputsTemplatesBranchNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceValidateInputsTemplatesInstanceNotFoundResponseBody builds
// the HTTP response body from the result of the
// "UpgradeInstanceValidateInputs" endpoint of the "templates" service.
func NewUpgradeInstanceValidateInputsTemplatesInstanceNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceValidateInputsTemplatesInstanceNotFoundResponseBody {
	body := &UpgradeInstanceValidateInputsTemplatesInstanceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpgradeInstanceValidateInputsTemplatesVersionNotFoundResponseBody builds
// the HTTP response body from the result of the
// "UpgradeInstanceValidateInputs" endpoint of the "templates" service.
func NewUpgradeInstanceValidateInputsTemplatesVersionNotFoundResponseBody(res *templates.GenericError) *UpgradeInstanceValidateInputsTemplatesVersionNotFoundResponseBody {
	body := &UpgradeInstanceValidateInputsTemplatesVersionNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetTaskTemplatesTaskNotFoundResponseBody builds the HTTP response body
// from the result of the "GetTask" endpoint of the "templates" service.
func NewGetTaskTemplatesTaskNotFoundResponseBody(res *templates.GenericError) *GetTaskTemplatesTaskNotFoundResponseBody {
	body := &GetTaskTemplatesTaskNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewRepositoriesIndexPayload builds a templates service RepositoriesIndex
// endpoint payload.
func NewRepositoriesIndexPayload(storageAPIToken string) *templates.RepositoriesIndexPayload {
	v := &templates.RepositoriesIndexPayload{}
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewRepositoryIndexPayload builds a templates service RepositoryIndex
// endpoint payload.
func NewRepositoryIndexPayload(repository string, storageAPIToken string) *templates.RepositoryIndexPayload {
	v := &templates.RepositoryIndexPayload{}
	v.Repository = repository
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewTemplatesIndexPayload builds a templates service TemplatesIndex endpoint
// payload.
func NewTemplatesIndexPayload(repository string, storageAPIToken string) *templates.TemplatesIndexPayload {
	v := &templates.TemplatesIndexPayload{}
	v.Repository = repository
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewTemplateIndexPayload builds a templates service TemplateIndex endpoint
// payload.
func NewTemplateIndexPayload(repository string, template string, storageAPIToken string) *templates.TemplateIndexPayload {
	v := &templates.TemplateIndexPayload{}
	v.Repository = repository
	v.Template = template
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewVersionIndexPayload builds a templates service VersionIndex endpoint
// payload.
func NewVersionIndexPayload(repository string, template string, version string, storageAPIToken string) *templates.VersionIndexPayload {
	v := &templates.VersionIndexPayload{}
	v.Repository = repository
	v.Template = template
	v.Version = version
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewInputsIndexPayload builds a templates service InputsIndex endpoint
// payload.
func NewInputsIndexPayload(repository string, template string, version string, storageAPIToken string) *templates.InputsIndexPayload {
	v := &templates.InputsIndexPayload{}
	v.Repository = repository
	v.Template = template
	v.Version = version
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewValidateInputsPayload builds a templates service ValidateInputs endpoint
// payload.
func NewValidateInputsPayload(body *ValidateInputsRequestBody, repository string, template string, version string, storageAPIToken string) *templates.ValidateInputsPayload {
	v := &templates.ValidateInputsPayload{}
	v.Steps = make([]*templates.StepPayload, len(body.Steps))
	for i, val := range body.Steps {
		v.Steps[i] = unmarshalStepPayloadRequestBodyToTemplatesStepPayload(val)
	}
	v.Repository = repository
	v.Template = template
	v.Version = version
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUseTemplateVersionPayload builds a templates service UseTemplateVersion
// endpoint payload.
func NewUseTemplateVersionPayload(body *UseTemplateVersionRequestBody, repository string, template string, version string, storageAPIToken string) *templates.UseTemplateVersionPayload {
	v := &templates.UseTemplateVersionPayload{
		Name:   *body.Name,
		Branch: *body.Branch,
	}
	v.Steps = make([]*templates.StepPayload, len(body.Steps))
	for i, val := range body.Steps {
		v.Steps[i] = unmarshalStepPayloadRequestBodyToTemplatesStepPayload(val)
	}
	v.Repository = repository
	v.Template = template
	v.Version = version
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewInstancesIndexPayload builds a templates service InstancesIndex endpoint
// payload.
func NewInstancesIndexPayload(branch string, storageAPIToken string) *templates.InstancesIndexPayload {
	v := &templates.InstancesIndexPayload{}
	v.Branch = branch
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewInstanceIndexPayload builds a templates service InstanceIndex endpoint
// payload.
func NewInstanceIndexPayload(branch string, instanceID string, storageAPIToken string) *templates.InstanceIndexPayload {
	v := &templates.InstanceIndexPayload{}
	v.Branch = branch
	v.InstanceID = instanceID
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateInstancePayload builds a templates service UpdateInstance endpoint
// payload.
func NewUpdateInstancePayload(body *UpdateInstanceRequestBody, branch string, instanceID string, storageAPIToken string) *templates.UpdateInstancePayload {
	v := &templates.UpdateInstancePayload{
		Name: *body.Name,
	}
	v.Branch = branch
	v.InstanceID = instanceID
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewDeleteInstancePayload builds a templates service DeleteInstance endpoint
// payload.
func NewDeleteInstancePayload(branch string, instanceID string, storageAPIToken string) *templates.DeleteInstancePayload {
	v := &templates.DeleteInstancePayload{}
	v.Branch = branch
	v.InstanceID = instanceID
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpgradeInstancePayload builds a templates service UpgradeInstance
// endpoint payload.
func NewUpgradeInstancePayload(body *UpgradeInstanceRequestBody, branch string, instanceID string, version string, storageAPIToken string) *templates.UpgradeInstancePayload {
	v := &templates.UpgradeInstancePayload{}
	v.Steps = make([]*templates.StepPayload, len(body.Steps))
	for i, val := range body.Steps {
		v.Steps[i] = unmarshalStepPayloadRequestBodyToTemplatesStepPayload(val)
	}
	v.Branch = branch
	v.InstanceID = instanceID
	v.Version = version
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpgradeInstanceInputsIndexPayload builds a templates service
// UpgradeInstanceInputsIndex endpoint payload.
func NewUpgradeInstanceInputsIndexPayload(branch string, instanceID string, version string, storageAPIToken string) *templates.UpgradeInstanceInputsIndexPayload {
	v := &templates.UpgradeInstanceInputsIndexPayload{}
	v.Branch = branch
	v.InstanceID = instanceID
	v.Version = version
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpgradeInstanceValidateInputsPayload builds a templates service
// UpgradeInstanceValidateInputs endpoint payload.
func NewUpgradeInstanceValidateInputsPayload(body *UpgradeInstanceValidateInputsRequestBody, branch string, instanceID string, version string, storageAPIToken string) *templates.UpgradeInstanceValidateInputsPayload {
	v := &templates.UpgradeInstanceValidateInputsPayload{}
	v.Steps = make([]*templates.StepPayload, len(body.Steps))
	for i, val := range body.Steps {
		v.Steps[i] = unmarshalStepPayloadRequestBodyToTemplatesStepPayload(val)
	}
	v.Branch = branch
	v.InstanceID = instanceID
	v.Version = version
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetTaskPayload builds a templates service GetTask endpoint payload.
func NewGetTaskPayload(taskID string, storageAPIToken string) *templates.GetTaskPayload {
	v := &templates.GetTaskPayload{}
	v.TaskID = templates.TaskID(taskID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// ValidateValidateInputsRequestBody runs the validations defined on
// ValidateInputsRequestBody
func ValidateValidateInputsRequestBody(body *ValidateInputsRequestBody) (err error) {
	if body.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "body"))
	}
	for _, e := range body.Steps {
		if e != nil {
			if err2 := ValidateStepPayloadRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUseTemplateVersionRequestBody runs the validations defined on
// UseTemplateVersionRequestBody
func ValidateUseTemplateVersionRequestBody(body *UseTemplateVersionRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Branch == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("branch", "body"))
	}
	if body.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "body"))
	}
	for _, e := range body.Steps {
		if e != nil {
			if err2 := ValidateStepPayloadRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateInstanceRequestBody runs the validations defined on
// UpdateInstanceRequestBody
func ValidateUpdateInstanceRequestBody(body *UpdateInstanceRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpgradeInstanceRequestBody runs the validations defined on
// UpgradeInstanceRequestBody
func ValidateUpgradeInstanceRequestBody(body *UpgradeInstanceRequestBody) (err error) {
	if body.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "body"))
	}
	for _, e := range body.Steps {
		if e != nil {
			if err2 := ValidateStepPayloadRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpgradeInstanceValidateInputsRequestBody runs the validations
// defined on UpgradeInstanceValidateInputsRequestBody
func ValidateUpgradeInstanceValidateInputsRequestBody(body *UpgradeInstanceValidateInputsRequestBody) (err error) {
	if body.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "body"))
	}
	for _, e := range body.Steps {
		if e != nil {
			if err2 := ValidateStepPayloadRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStepPayloadRequestBody runs the validations defined on
// StepPayloadRequestBody
func ValidateStepPayloadRequestBody(body *StepPayloadRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Inputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inputs", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 1, true))
		}
	}
	for _, e := range body.Inputs {
		if e != nil {
			if err2 := ValidateInputValueRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateInputValueRequestBody runs the validations defined on
// InputValueRequestBody
func ValidateInputValueRequestBody(body *InputValueRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 1, true))
		}
	}
	return
}
