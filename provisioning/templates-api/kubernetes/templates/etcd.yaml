---
# Source: etcd/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: templates-api-etcd
  namespace: "templates-api"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.5.8
    app.kubernetes.io/instance: templates-api-etcd
    app.kubernetes.io/managed-by: Helm
    app: templates-api-etcd
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: etcd
      helm.sh/chart: etcd-8.5.8
      app.kubernetes.io/instance: templates-api-etcd
      app.kubernetes.io/managed-by: Helm
  policyTypes:
    - Ingress
    - Egress
  egress:
    # Allow dns resolution
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
    # Allow outbound connections to other cluster pods
    - ports:
        - port: 2379
        - port: 2380
      to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: etcd
              helm.sh/chart: etcd-8.5.8
              app.kubernetes.io/instance: templates-api-etcd
              app.kubernetes.io/managed-by: Helm
  ingress:
    # Allow inbound connections
    - ports:
        - port: 2379
        - port: 2380
      from:
        - podSelector:
            matchLabels:
              templates-api-etcd-client: "true"
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: etcd
              helm.sh/chart: etcd-8.5.8
              app.kubernetes.io/instance: templates-api-etcd
              app.kubernetes.io/managed-by: Helm
---
# Source: etcd/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: templates-api-etcd
  namespace: "templates-api"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.5.8
    app.kubernetes.io/instance: templates-api-etcd
    app.kubernetes.io/managed-by: Helm
    app: templates-api-etcd
type: Opaque
data:
  etcd-root-password: "$ETCD_ROOT_PASSWORD_BASE64"
---
# Source: etcd/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: templates-api-etcd-headless
  namespace: "templates-api"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.5.8
    app.kubernetes.io/instance: templates-api-etcd
    app.kubernetes.io/managed-by: Helm
    app: templates-api-etcd
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: client
      port: 2379
      targetPort: client
    - name: peer
      port: 2380
      targetPort: peer
  selector:
    app.kubernetes.io/name: etcd
    app.kubernetes.io/instance: templates-api-etcd
---
# Source: etcd/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: templates-api-etcd
  namespace: "templates-api"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.5.8
    app.kubernetes.io/instance: templates-api-etcd
    app.kubernetes.io/managed-by: Helm
    app: templates-api-etcd
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  sessionAffinity: None
  ports:
    - name: "client"
      port: 2379
      targetPort: client
      nodePort: null
    - name: "peer"
      port: 2380
      targetPort: peer
      nodePort: null
  selector:
    app.kubernetes.io/name: etcd
    app.kubernetes.io/instance: templates-api-etcd
---
# Source: etcd/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: templates-api-etcd
  namespace: "templates-api"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.5.8
    app.kubernetes.io/instance: templates-api-etcd
    app.kubernetes.io/managed-by: Helm
    app: templates-api-etcd
spec:
  replicas: $TEMPLATES_API_ETCD_REPLICAS
  selector:
    matchLabels:
      app.kubernetes.io/name: etcd
      app.kubernetes.io/instance: templates-api-etcd
  serviceName: templates-api-etcd-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: etcd
        helm.sh/chart: etcd-8.5.8
        app.kubernetes.io/instance: templates-api-etcd
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:

      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: etcd
                    app.kubernetes.io/instance: templates-api-etcd
                namespaces:
                  - "templates-api"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      nodeSelector:
        nodepool: main
      tolerations:
        - effect: NoSchedule
          key: app
          operator: Exists
      securityContext:
        fsGroup: 1001
      serviceAccountName: "default"
      containers:
        - name: etcd
          image: docker.io/bitnami/etcd:3.5.4-debian-11-r27
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_STS_NAME
              value: "templates-api-etcd"
            - name: ETCDCTL_API
              value: "3"
            - name: ETCD_ON_K8S
              value: "yes"
            - name: ETCD_START_FROM_SNAPSHOT
              value: "no"
            - name: ETCD_DISASTER_RECOVERY
              value: "no"
            - name: ETCD_NAME
              value: "$(MY_POD_NAME)"
            - name: ETCD_DATA_DIR
              value: "/bitnami/etcd/data"
            - name: ETCD_LOG_LEVEL
              value: "info"
            - name: ALLOW_NONE_AUTHENTICATION
              value: "no"
            - name: ETCD_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: templates-api-etcd
                  key: etcd-root-password
            - name: ETCD_AUTH_TOKEN
              value: "simple"
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: "http://$(MY_POD_NAME).templates-api-etcd-headless.templates-api.svc.cluster.local:2379,http://templates-api-etcd.templates-api.svc.cluster.local:2379"
            - name: ETCD_LISTEN_CLIENT_URLS
              value: "http://0.0.0.0:2379"
            - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
              value: "http://$(MY_POD_NAME).templates-api-etcd-headless.templates-api.svc.cluster.local:2380"
            - name: ETCD_LISTEN_PEER_URLS
              value: "http://0.0.0.0:2380"
            - name: ETCD_INITIAL_CLUSTER_TOKEN
              value: "etcd-cluster-k8s"
            - name: ETCD_INITIAL_CLUSTER_STATE
              value: "new"
            - name: ETCD_INITIAL_CLUSTER
              value: "$ETCD_INITIAL_CLUSTER"
            - name: ETCD_CLUSTER_DOMAIN
              value: "templates-api-etcd-headless.templates-api.svc.cluster.local"
            - name: ETCD_DISABLE_STORE_MEMBER_ID
              value: "yes"
          envFrom:
          ports:
            - name: client
              containerPort: 2379
              protocol: TCP
            - name: peer
              containerPort: 2380
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 0
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          startupProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 60
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/etcd
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "512Mi"
